
box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003390  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800352c  0800352c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800352c  0800352c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800352c  0800352c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800352c  0800352c  0001352c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003530  08003530  00013530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000070  080035a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080035a4  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096f4  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002389  00000000  00000000  0002978d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  0002c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184a0  00000000  00000000  0002d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d571  00000000  00000000  00045628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000873ee  00000000  00000000  00052b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9f87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003344  00000000  00000000  000d9fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003484 	.word	0x08003484

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003484 	.word	0x08003484

0800014c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000150:	4b04      	ldr	r3, [pc, #16]	; (8000164 <__NVIC_GetPriorityGrouping+0x18>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	0a1b      	lsrs	r3, r3, #8
 8000156:	f003 0307 	and.w	r3, r3, #7
}
 800015a:	4618      	mov	r0, r3
 800015c:	46bd      	mov	sp, r7
 800015e:	bc80      	pop	{r7}
 8000160:	4770      	bx	lr
 8000162:	bf00      	nop
 8000164:	e000ed00 	.word	0xe000ed00

08000168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000168:	b480      	push	{r7}
 800016a:	b083      	sub	sp, #12
 800016c:	af00      	add	r7, sp, #0
 800016e:	4603      	mov	r3, r0
 8000170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000176:	2b00      	cmp	r3, #0
 8000178:	db0b      	blt.n	8000192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	f003 021f 	and.w	r2, r3, #31
 8000180:	4906      	ldr	r1, [pc, #24]	; (800019c <__NVIC_EnableIRQ+0x34>)
 8000182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000186:	095b      	lsrs	r3, r3, #5
 8000188:	2001      	movs	r0, #1
 800018a:	fa00 f202 	lsl.w	r2, r0, r2
 800018e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	e000e100 	.word	0xe000e100

080001a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	4603      	mov	r3, r0
 80001a8:	6039      	str	r1, [r7, #0]
 80001aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	db0a      	blt.n	80001ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001b4:	683b      	ldr	r3, [r7, #0]
 80001b6:	b2da      	uxtb	r2, r3
 80001b8:	490c      	ldr	r1, [pc, #48]	; (80001ec <__NVIC_SetPriority+0x4c>)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	0112      	lsls	r2, r2, #4
 80001c0:	b2d2      	uxtb	r2, r2
 80001c2:	440b      	add	r3, r1
 80001c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001c8:	e00a      	b.n	80001e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	b2da      	uxtb	r2, r3
 80001ce:	4908      	ldr	r1, [pc, #32]	; (80001f0 <__NVIC_SetPriority+0x50>)
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	f003 030f 	and.w	r3, r3, #15
 80001d6:	3b04      	subs	r3, #4
 80001d8:	0112      	lsls	r2, r2, #4
 80001da:	b2d2      	uxtb	r2, r2
 80001dc:	440b      	add	r3, r1
 80001de:	761a      	strb	r2, [r3, #24]
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000e100 	.word	0xe000e100
 80001f0:	e000ed00 	.word	0xe000ed00

080001f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b089      	sub	sp, #36	; 0x24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	f003 0307 	and.w	r3, r3, #7
 8000206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000208:	69fb      	ldr	r3, [r7, #28]
 800020a:	f1c3 0307 	rsb	r3, r3, #7
 800020e:	2b04      	cmp	r3, #4
 8000210:	bf28      	it	cs
 8000212:	2304      	movcs	r3, #4
 8000214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	69fb      	ldr	r3, [r7, #28]
 8000218:	3304      	adds	r3, #4
 800021a:	2b06      	cmp	r3, #6
 800021c:	d902      	bls.n	8000224 <NVIC_EncodePriority+0x30>
 800021e:	69fb      	ldr	r3, [r7, #28]
 8000220:	3b03      	subs	r3, #3
 8000222:	e000      	b.n	8000226 <NVIC_EncodePriority+0x32>
 8000224:	2300      	movs	r3, #0
 8000226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800022c:	69bb      	ldr	r3, [r7, #24]
 800022e:	fa02 f303 	lsl.w	r3, r2, r3
 8000232:	43da      	mvns	r2, r3
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	401a      	ands	r2, r3
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800023c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	fa01 f303 	lsl.w	r3, r1, r3
 8000246:	43d9      	mvns	r1, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	4313      	orrs	r3, r2
         );
}
 800024e:	4618      	mov	r0, r3
 8000250:	3724      	adds	r7, #36	; 0x24
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr

08000258 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000262:	699a      	ldr	r2, [r3, #24]
 8000264:	4907      	ldr	r1, [pc, #28]	; (8000284 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4313      	orrs	r3, r2
 800026a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <LL_APB2_GRP1_EnableClock+0x2c>)
 800026e:	699a      	ldr	r2, [r3, #24]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4013      	ands	r3, r2
 8000274:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000276:	68fb      	ldr	r3, [r7, #12]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40021000 	.word	0x40021000

08000288 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000288:	b490      	push	{r4, r7}
 800028a:	b088      	sub	sp, #32
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	461a      	mov	r2, r3
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	0e1b      	lsrs	r3, r3, #24
 800029c:	4413      	add	r3, r2
 800029e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80002a0:	6822      	ldr	r2, [r4, #0]
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	fa93 f3a3 	rbit	r3, r3
 80002ac:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	fab3 f383 	clz	r3, r3
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	210f      	movs	r1, #15
 80002ba:	fa01 f303 	lsl.w	r3, r1, r3
 80002be:	43db      	mvns	r3, r3
 80002c0:	401a      	ands	r2, r3
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	fa93 f3a3 	rbit	r3, r3
 80002cc:	61bb      	str	r3, [r7, #24]
  return result;
 80002ce:	69bb      	ldr	r3, [r7, #24]
 80002d0:	fab3 f383 	clz	r3, r3
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	6879      	ldr	r1, [r7, #4]
 80002da:	fa01 f303 	lsl.w	r3, r1, r3
 80002de:	4313      	orrs	r3, r2
 80002e0:	6023      	str	r3, [r4, #0]
}
 80002e2:	bf00      	nop
 80002e4:	3720      	adds	r7, #32
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc90      	pop	{r4, r7}
 80002ea:	4770      	bx	lr

080002ec <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b087      	sub	sp, #28
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	68da      	ldr	r2, [r3, #12]
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	0a1b      	lsrs	r3, r3, #8
 8000300:	43db      	mvns	r3, r3
 8000302:	401a      	ands	r2, r3
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	0a1b      	lsrs	r3, r3, #8
 8000308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	fa93 f3a3 	rbit	r3, r3
 8000310:	613b      	str	r3, [r7, #16]
  return result;
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	fab3 f383 	clz	r3, r3
 8000318:	b2db      	uxtb	r3, r3
 800031a:	4619      	mov	r1, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	408b      	lsls	r3, r1
 8000320:	431a      	orrs	r2, r3
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	60da      	str	r2, [r3, #12]
}
 8000326:	bf00      	nop
 8000328:	371c      	adds	r7, #28
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr

08000330 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	0a1b      	lsrs	r3, r3, #8
 800033e:	b29a      	uxth	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	611a      	str	r2, [r3, #16]
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
	...

08000350 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800035a:	4a13      	ldr	r2, [pc, #76]	; (80003a8 <LL_GPIO_AF_SetEXTISource+0x58>)
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	b2db      	uxtb	r3, r3
 8000360:	3302      	adds	r3, #2
 8000362:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	0c1b      	lsrs	r3, r3, #16
 800036a:	43db      	mvns	r3, r3
 800036c:	ea02 0103 	and.w	r1, r2, r3
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	0c1b      	lsrs	r3, r3, #16
 8000374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	fa93 f3a3 	rbit	r3, r3
 800037c:	60bb      	str	r3, [r7, #8]
  return result;
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	fab3 f383 	clz	r3, r3
 8000384:	b2db      	uxtb	r3, r3
 8000386:	461a      	mov	r2, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	fa03 f202 	lsl.w	r2, r3, r2
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <LL_GPIO_AF_SetEXTISource+0x58>)
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	430a      	orrs	r2, r1
 8000396:	3302      	adds	r3, #2
 8000398:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800039c:	bf00      	nop
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40010000 	.word	0x40010000

080003ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80003ca:	2020      	movs	r0, #32
 80003cc:	f7ff ff44 	bl	8000258 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80003d0:	2004      	movs	r0, #4
 80003d2:	f7ff ff41 	bl	8000258 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80003d6:	2008      	movs	r0, #8
 80003d8:	f7ff ff3e 	bl	8000258 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 80003dc:	f240 2102 	movw	r1, #514	; 0x202
 80003e0:	4821      	ldr	r0, [pc, #132]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003e2:	f7ff ffa5 	bl	8000330 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE0);
 80003e6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80003ea:	2000      	movs	r0, #0
 80003ec:	f7ff ffb0 	bl	8000350 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80003f0:	2301      	movs	r3, #1
 80003f2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80003f4:	2301      	movs	r3, #1
 80003f6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80003f8:	2300      	movs	r3, #0
 80003fa:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80003fc:	2302      	movs	r3, #2
 80003fe:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000400:	f107 0318 	add.w	r3, r7, #24
 8000404:	4618      	mov	r0, r3
 8000406:	f001 ff8b 	bl	8002320 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_0, LL_GPIO_PULL_UP);
 800040a:	2201      	movs	r2, #1
 800040c:	f240 1101 	movw	r1, #257	; 0x101
 8000410:	4815      	ldr	r0, [pc, #84]	; (8000468 <MX_GPIO_Init+0xbc>)
 8000412:	f7ff ff6b 	bl	80002ec <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_0, LL_GPIO_MODE_INPUT);
 8000416:	2208      	movs	r2, #8
 8000418:	f240 1101 	movw	r1, #257	; 0x101
 800041c:	4812      	ldr	r0, [pc, #72]	; (8000468 <MX_GPIO_Init+0xbc>)
 800041e:	f7ff ff33 	bl	8000288 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000422:	f240 2302 	movw	r3, #514	; 0x202
 8000426:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000428:	2301      	movs	r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800042c:	2302      	movs	r3, #2
 800042e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	480b      	ldr	r0, [pc, #44]	; (8000468 <MX_GPIO_Init+0xbc>)
 800043a:	f002 f8aa 	bl	8002592 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800043e:	f7ff fe85 	bl	800014c <__NVIC_GetPriorityGrouping>
 8000442:	4603      	mov	r3, r0
 8000444:	2200      	movs	r2, #0
 8000446:	2100      	movs	r1, #0
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff fed3 	bl	80001f4 <NVIC_EncodePriority>
 800044e:	4603      	mov	r3, r0
 8000450:	4619      	mov	r1, r3
 8000452:	2006      	movs	r0, #6
 8000454:	f7ff fea4 	bl	80001a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000458:	2006      	movs	r0, #6
 800045a:	f7ff fe85 	bl	8000168 <__NVIC_EnableIRQ>

}
 800045e:	bf00      	nop
 8000460:	3720      	adds	r7, #32
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40010800 	.word	0x40010800

0800046c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <MX_I2C1_Init+0x50>)
 8000472:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <MX_I2C1_Init+0x54>)
 8000474:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <MX_I2C1_Init+0x50>)
 8000478:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <MX_I2C1_Init+0x58>)
 800047a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <MX_I2C1_Init+0x50>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_I2C1_Init+0x50>)
 8000484:	2200      	movs	r2, #0
 8000486:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <MX_I2C1_Init+0x50>)
 800048a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800048e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000490:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <MX_I2C1_Init+0x50>)
 8000492:	2200      	movs	r2, #0
 8000494:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <MX_I2C1_Init+0x50>)
 8000498:	2200      	movs	r2, #0
 800049a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <MX_I2C1_Init+0x50>)
 800049e:	2200      	movs	r2, #0
 80004a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <MX_I2C1_Init+0x50>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004a8:	4804      	ldr	r0, [pc, #16]	; (80004bc <MX_I2C1_Init+0x50>)
 80004aa:	f001 f913 	bl	80016d4 <HAL_I2C_Init>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004b4:	f000 fb04 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	2000008c 	.word	0x2000008c
 80004c0:	40005400 	.word	0x40005400
 80004c4:	000186a0 	.word	0x000186a0

080004c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a15      	ldr	r2, [pc, #84]	; (8000538 <HAL_I2C_MspInit+0x70>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d123      	bne.n	8000530 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <HAL_I2C_MspInit+0x74>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a13      	ldr	r2, [pc, #76]	; (800053c <HAL_I2C_MspInit+0x74>)
 80004ee:	f043 0308 	orr.w	r3, r3, #8
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <HAL_I2C_MspInit+0x74>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0308 	and.w	r3, r3, #8
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000500:	23c0      	movs	r3, #192	; 0xc0
 8000502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000504:	2312      	movs	r3, #18
 8000506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000508:	2303      	movs	r3, #3
 800050a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	480b      	ldr	r0, [pc, #44]	; (8000540 <HAL_I2C_MspInit+0x78>)
 8000514:	f000 ff5a 	bl	80013cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_I2C_MspInit+0x74>)
 800051a:	69db      	ldr	r3, [r3, #28]
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <HAL_I2C_MspInit+0x74>)
 800051e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000522:	61d3      	str	r3, [r2, #28]
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <HAL_I2C_MspInit+0x74>)
 8000526:	69db      	ldr	r3, [r3, #28]
 8000528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40005400 	.word	0x40005400
 800053c:	40021000 	.word	0x40021000
 8000540:	40010c00 	.word	0x40010c00

08000544 <LCD_SendInternal>:
  /* USER CODE END I2C1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af02      	add	r7, sp, #8
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
 800054e:	460b      	mov	r3, r1
 8000550:	71bb      	strb	r3, [r7, #6]
 8000552:	4613      	mov	r3, r2
 8000554:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	b299      	uxth	r1, r3
 800055a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800055e:	2201      	movs	r2, #1
 8000560:	4822      	ldr	r0, [pc, #136]	; (80005ec <LCD_SendInternal+0xa8>)
 8000562:	f001 faf9 	bl	8001b58 <HAL_I2C_IsDeviceReady>
 8000566:	4603      	mov	r3, r0
 8000568:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d000      	beq.n	8000572 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000570:	e7f1      	b.n	8000556 <LCD_SendInternal+0x12>
            break;
 8000572:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	f023 030f 	bic.w	r3, r3, #15
 800057a:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	011b      	lsls	r3, r3, #4
 8000580:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000582:	7bba      	ldrb	r2, [r7, #14]
 8000584:	797b      	ldrb	r3, [r7, #5]
 8000586:	4313      	orrs	r3, r2
 8000588:	b2db      	uxtb	r3, r3
 800058a:	f043 030c 	orr.w	r3, r3, #12
 800058e:	b2db      	uxtb	r3, r3
 8000590:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8000592:	7bba      	ldrb	r2, [r7, #14]
 8000594:	797b      	ldrb	r3, [r7, #5]
 8000596:	4313      	orrs	r3, r2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	f043 0308 	orr.w	r3, r3, #8
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80005a2:	7b7a      	ldrb	r2, [r7, #13]
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	f043 030c 	orr.w	r3, r3, #12
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80005b2:	7b7a      	ldrb	r2, [r7, #13]
 80005b4:	797b      	ldrb	r3, [r7, #5]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	b299      	uxth	r1, r3
 80005c6:	f107 0208 	add.w	r2, r7, #8
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2304      	movs	r3, #4
 80005d2:	4806      	ldr	r0, [pc, #24]	; (80005ec <LCD_SendInternal+0xa8>)
 80005d4:	f001 f9c2 	bl	800195c <HAL_I2C_Master_Transmit>
 80005d8:	4603      	mov	r3, r0
 80005da:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 80005dc:	2005      	movs	r0, #5
 80005de:	f000 fded 	bl	80011bc <HAL_Delay>
    return res;
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	2000008c 	.word	0x2000008c

080005f0 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	460a      	mov	r2, r1
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000600:	79b9      	ldrb	r1, [r7, #6]
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2200      	movs	r2, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff9c 	bl	8000544 <LCD_SendInternal>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	460a      	mov	r2, r1
 800061e:	71fb      	strb	r3, [r7, #7]
 8000620:	4613      	mov	r3, r2
 8000622:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000624:	79b9      	ldrb	r1, [r7, #6]
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2201      	movs	r2, #1
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ff8a 	bl	8000544 <LCD_SendInternal>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2130      	movs	r1, #48	; 0x30
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ffd2 	bl	80005f0 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	2102      	movs	r1, #2
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ffcd 	bl	80005f0 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	210c      	movs	r1, #12
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffc8 	bl	80005f0 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2101      	movs	r1, #1
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ffc3 	bl	80005f0 <LCD_SendCommand>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
 8000678:	4603      	mov	r3, r0
 800067a:	6039      	str	r1, [r7, #0]
 800067c:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 800067e:	e009      	b.n	8000694 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	781a      	ldrb	r2, [r3, #0]
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4611      	mov	r1, r2
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffc3 	bl	8000614 <LCD_SendData>
        str++;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1f1      	bne.n	8000680 <LCD_SendString+0xe>
    }
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <I2C_Scan>:
void I2C_Scan() {
 80006a8:	b5b0      	push	{r4, r5, r7, lr}
 80006aa:	b098      	sub	sp, #96	; 0x60
 80006ac:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80006ae:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <I2C_Scan+0x80>)
 80006b0:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80006b4:	461d      	mov	r5, r3
 80006b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006be:	6020      	str	r0, [r4, #0]
 80006c0:	3404      	adds	r4, #4
 80006c2:	8021      	strh	r1, [r4, #0]
//    HAL_UART_Transmit(&huart2, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
    uint8_t hui = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    HAL_StatusTypeDef res;
    for(uint8_t i = 0; i < 254; i++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80006d0:	e020      	b.n	8000714 <I2C_Scan+0x6c>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80006d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	b299      	uxth	r1, r3
 80006dc:	230a      	movs	r3, #10
 80006de:	2201      	movs	r2, #1
 80006e0:	4812      	ldr	r0, [pc, #72]	; (800072c <I2C_Scan+0x84>)
 80006e2:	f001 fa39 	bl	8001b58 <HAL_I2C_IsDeviceReady>
 80006e6:	4603      	mov	r3, r0
 80006e8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        hui = i;
 80006ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006f0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        if(res == HAL_OK) {
 80006f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d106      	bne.n	800070a <I2C_Scan+0x62>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80006fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000700:	1d38      	adds	r0, r7, #4
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <I2C_Scan+0x88>)
 8000704:	2140      	movs	r1, #64	; 0x40
 8000706:	f002 fa0f 	bl	8002b28 <sniprintf>
    for(uint8_t i = 0; i < 254; i++) {
 800070a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800070e:	3301      	adds	r3, #1
 8000710:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000718:	2bfd      	cmp	r3, #253	; 0xfd
 800071a:	d9da      	bls.n	80006d2 <I2C_Scan+0x2a>
//            HAL_UART_Transmit(&huart2, (uint8_t*)".", 1, HAL_MAX_DELAY);
        }
    }

//    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3760      	adds	r7, #96	; 0x60
 8000722:	46bd      	mov	sp, r7
 8000724:	bdb0      	pop	{r4, r5, r7, pc}
 8000726:	bf00      	nop
 8000728:	080034a4 	.word	0x080034a4
 800072c:	2000008c 	.word	0x2000008c
 8000730:	0800349c 	.word	0x0800349c

08000734 <LCD_SetCursor>:
void LCD_SetCursor(uint8_t lcd_addr,uint8_t col, uint8_t row){
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b087      	sub	sp, #28
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	460b      	mov	r3, r1
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	4613      	mov	r3, r2
 8000744:	717b      	strb	r3, [r7, #5]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <LCD_SetCursor+0x58>)
 8000748:	f107 0408 	add.w	r4, r7, #8
 800074c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800074e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if ( row > 2 ) {
 8000752:	797b      	ldrb	r3, [r7, #5]
 8000754:	2b02      	cmp	r3, #2
 8000756:	d901      	bls.n	800075c <LCD_SetCursor+0x28>
		row = 2-1;    // we count rows starting w/0
 8000758:	2301      	movs	r3, #1
 800075a:	717b      	strb	r3, [r7, #5]
	}
	LCD_SendCommand(lcd_addr, 0x80 | (col + row_offsets[row]));
 800075c:	797b      	ldrb	r3, [r7, #5]
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	3318      	adds	r3, #24
 8000762:	443b      	add	r3, r7
 8000764:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	4413      	add	r3, r2
 800076e:	b2db      	uxtb	r3, r3
 8000770:	b25b      	sxtb	r3, r3
 8000772:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000776:	b25b      	sxtb	r3, r3
 8000778:	b2da      	uxtb	r2, r3
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	4611      	mov	r1, r2
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff36 	bl	80005f0 <LCD_SendCommand>
}
 8000784:	bf00      	nop
 8000786:	371c      	adds	r7, #28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd90      	pop	{r4, r7, pc}
 800078c:	080034bc 	.word	0x080034bc

08000790 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <LL_RCC_HSE_Enable+0x18>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <LL_RCC_HSE_Enable+0x18>)
 800079a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	40021000 	.word	0x40021000

080007ac <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <LL_RCC_HSE_IsReady+0x20>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80007bc:	bf0c      	ite	eq
 80007be:	2301      	moveq	r3, #1
 80007c0:	2300      	movne	r3, #0
 80007c2:	b2db      	uxtb	r3, r3
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	40021000 	.word	0x40021000

080007d0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <LL_RCC_SetSysClkSource+0x24>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	f023 0203 	bic.w	r2, r3, #3
 80007e0:	4904      	ldr	r1, [pc, #16]	; (80007f4 <LL_RCC_SetSysClkSource+0x24>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	604b      	str	r3, [r1, #4]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000

080007f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <LL_RCC_GetSysClkSource+0x14>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f003 030c 	and.w	r3, r3, #12
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	40021000 	.word	0x40021000

08000810 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <LL_RCC_SetAHBPrescaler+0x24>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000820:	4904      	ldr	r1, [pc, #16]	; (8000834 <LL_RCC_SetAHBPrescaler+0x24>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4313      	orrs	r3, r2
 8000826:	604b      	str	r3, [r1, #4]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000848:	4904      	ldr	r1, [pc, #16]	; (800085c <LL_RCC_SetAPB1Prescaler+0x24>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4313      	orrs	r3, r2
 800084e:	604b      	str	r3, [r1, #4]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000

08000860 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <LL_RCC_SetAPB2Prescaler+0x24>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000870:	4904      	ldr	r1, [pc, #16]	; (8000884 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4313      	orrs	r3, r2
 8000876:	604b      	str	r3, [r1, #4]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <LL_RCC_PLL_Enable+0x18>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <LL_RCC_PLL_Enable+0x18>)
 8000892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000896:	6013      	str	r3, [r2, #0]
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40021000 	.word	0x40021000

080008a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <LL_RCC_PLL_IsReady+0x20>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80008b4:	bf0c      	ite	eq
 80008b6:	2301      	moveq	r3, #1
 80008b8:	2300      	movne	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	40021000 	.word	0x40021000

080008c8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	430b      	orrs	r3, r1
 80008e4:	4903      	ldr	r1, [pc, #12]	; (80008f4 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80008e6:	4313      	orrs	r3, r2
 80008e8:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40021000 	.word	0x40021000

080008f8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <LL_FLASH_SetLatency+0x24>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f023 0207 	bic.w	r2, r3, #7
 8000908:	4904      	ldr	r1, [pc, #16]	; (800091c <LL_FLASH_SetLatency+0x24>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4313      	orrs	r3, r2
 800090e:	600b      	str	r3, [r1, #0]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40022000 	.word	0x40022000

08000920 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <LL_FLASH_GetLatency+0x14>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f003 0307 	and.w	r3, r3, #7
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	40022000 	.word	0x40022000

08000938 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	f043 0220 	orr.w	r2, r3, #32
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	60da      	str	r2, [r3, #12]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f043 0201 	orr.w	r2, r3, #1
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	615a      	str	r2, [r3, #20]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b09a      	sub	sp, #104	; 0x68
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097a:	f000 fbbd 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 f85b 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f7ff fd13 	bl	80003ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000986:	f000 fb29 	bl	8000fdc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800098a:	f7ff fd6f 	bl	800046c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  USART1->CR1 |= USART_CR1_TE | USART_CR1_RE ; // разрешаем приемник и передатчик
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <main+0xa8>)
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	4a22      	ldr	r2, [pc, #136]	; (8000a1c <main+0xa8>)
 8000994:	f043 030c 	orr.w	r3, r3, #12
 8000998:	60d3      	str	r3, [r2, #12]
  extern uint8_t flag_signal;
  flag_signal = 0;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <main+0xac>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
  extern uint8_t score;
  score = 0;
 80009a0:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <main+0xb0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
  extern uint8_t flag_change;
  flag_change = 1;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <main+0xb4>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
  char str[100];
  I2C_Scan();
 80009ac:	f7ff fe7c 	bl	80006a8 <I2C_Scan>
  LCD_Init(LCD_ADDR);
 80009b0:	207e      	movs	r0, #126	; 0x7e
 80009b2:	f7ff fe41 	bl	8000638 <LCD_Init>
  LCD_SetCursor(LCD_ADDR, 5, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2105      	movs	r1, #5
 80009ba:	207e      	movs	r0, #126	; 0x7e
 80009bc:	f7ff feba 	bl	8000734 <LCD_SetCursor>
  LCD_SendString(LCD_ADDR, "RESET");
 80009c0:	491a      	ldr	r1, [pc, #104]	; (8000a2c <main+0xb8>)
 80009c2:	207e      	movs	r0, #126	; 0x7e
 80009c4:	f7ff fe55 	bl	8000672 <LCD_SendString>
  LCD_SetCursor(LCD_ADDR, 0, 1);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2100      	movs	r1, #0
 80009cc:	207e      	movs	r0, #126	; 0x7e
 80009ce:	f7ff feb1 	bl	8000734 <LCD_SetCursor>
  LCD_SendString(LCD_ADDR, "Score:");
 80009d2:	4917      	ldr	r1, [pc, #92]	; (8000a30 <main+0xbc>)
 80009d4:	207e      	movs	r0, #126	; 0x7e
 80009d6:	f7ff fe4c 	bl	8000672 <LCD_SendString>
  LL_USART_EnableIT_RXNE(USART1);
 80009da:	4810      	ldr	r0, [pc, #64]	; (8000a1c <main+0xa8>)
 80009dc:	f7ff ffac 	bl	8000938 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_ERROR(USART1);
 80009e0:	480e      	ldr	r0, [pc, #56]	; (8000a1c <main+0xa8>)
 80009e2:	f7ff ffb8 	bl	8000956 <LL_USART_EnableIT_ERROR>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_change == 1){
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <main+0xb4>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d1fb      	bne.n	80009e6 <main+0x72>
		  flag_change = 0;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <main+0xb4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
		  LCD_SetCursor(LCD_ADDR, 7, 1);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2107      	movs	r1, #7
 80009f8:	207e      	movs	r0, #126	; 0x7e
 80009fa:	f7ff fe9b 	bl	8000734 <LCD_SetCursor>
		  sprintf (str, "%d", score);
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <main+0xb0>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	490b      	ldr	r1, [pc, #44]	; (8000a34 <main+0xc0>)
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 f8c1 	bl	8002b90 <siprintf>
		  LCD_SendString(LCD_ADDR, str);
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	207e      	movs	r0, #126	; 0x7e
 8000a14:	f7ff fe2d 	bl	8000672 <LCD_SendString>
	  if(flag_change == 1){
 8000a18:	e7e5      	b.n	80009e6 <main+0x72>
 8000a1a:	bf00      	nop
 8000a1c:	40013800 	.word	0x40013800
 8000a20:	200000e0 	.word	0x200000e0
 8000a24:	200000e1 	.word	0x200000e1
 8000a28:	200000e2 	.word	0x200000e2
 8000a2c:	080034cc 	.word	0x080034cc
 8000a30:	080034d4 	.word	0x080034d4
 8000a34:	080034dc 	.word	0x080034dc

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f7ff ff5b 	bl	80008f8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000a42:	bf00      	nop
 8000a44:	f7ff ff6c 	bl	8000920 <LL_FLASH_GetLatency>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d1fa      	bne.n	8000a44 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000a4e:	f7ff fe9f 	bl	8000790 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000a52:	bf00      	nop
 8000a54:	f7ff feaa 	bl	80007ac <LL_RCC_HSE_IsReady>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d1fa      	bne.n	8000a54 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000a5e:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000a62:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000a66:	f7ff ff2f 	bl	80008c8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000a6a:	f7ff ff0d 	bl	8000888 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a6e:	bf00      	nop
 8000a70:	f7ff ff18 	bl	80008a4 <LL_RCC_PLL_IsReady>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d1fa      	bne.n	8000a70 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fec8 	bl	8000810 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000a80:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a84:	f7ff fed8 	bl	8000838 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fee9 	bl	8000860 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f7ff fe9e 	bl	80007d0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a94:	bf00      	nop
 8000a96:	f7ff feaf 	bl	80007f8 <LL_RCC_GetSysClkSource>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b08      	cmp	r3, #8
 8000a9e:	d1fa      	bne.n	8000a96 <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8000aa0:	4806      	ldr	r0, [pc, #24]	; (8000abc <SystemClock_Config+0x84>)
 8000aa2:	f002 f809 	bl	8002ab8 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f000 fb3c 	bl	8001124 <HAL_InitTick>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ab2:	f000 f805 	bl	8000ac0 <Error_Handler>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	044aa200 	.word	0x044aa200

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_MspInit+0x40>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <HAL_MspInit+0x40>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6193      	str	r3, [r2, #24]
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_MspInit+0x40>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_MspInit+0x40>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_MspInit+0x40>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	61d3      	str	r3, [r2, #28]
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_MspInit+0x40>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000

08000b10 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000b1a:	695a      	ldr	r2, [r3, #20]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	bf0c      	ite	eq
 8000b26:	2301      	moveq	r3, #1
 8000b28:	2300      	movne	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40010400 	.word	0x40010400

08000b3c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000b44:	4a03      	ldr	r2, [pc, #12]	; (8000b54 <LL_EXTI_ClearFlag_0_31+0x18>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6153      	str	r3, [r2, #20]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	40010400 	.word	0x40010400

08000b58 <LL_USART_IsActiveFlag_FE>:
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	bf0c      	ite	eq
 8000b6c:	2301      	moveq	r3, #1
 8000b6e:	2300      	movne	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <LL_USART_IsActiveFlag_NE>:
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	bf0c      	ite	eq
 8000b90:	2301      	moveq	r3, #1
 8000b92:	2300      	movne	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <LL_USART_IsActiveFlag_ORE>:
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f003 0308 	and.w	r3, r3, #8
 8000bb0:	2b08      	cmp	r3, #8
 8000bb2:	bf0c      	ite	eq
 8000bb4:	2301      	moveq	r3, #1
 8000bb6:	2300      	movne	r3, #0
 8000bb8:	b2db      	uxtb	r3, r3
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <LL_USART_IsActiveFlag_RXNE>:
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	2b20      	cmp	r3, #32
 8000bd6:	bf0c      	ite	eq
 8000bd8:	2301      	moveq	r3, #1
 8000bda:	2300      	movne	r3, #0
 8000bdc:	b2db      	uxtb	r3, r3
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	f003 0320 	and.w	r3, r3, #32
 8000bf8:	2b20      	cmp	r3, #32
 8000bfa:	bf0c      	ite	eq
 8000bfc:	2301      	moveq	r3, #1
 8000bfe:	2300      	movne	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	b2db      	uxtb	r3, r3
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <LL_GPIO_IsInputPinSet>:
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	43da      	mvns	r2, r3
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	4013      	ands	r3, r2
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	bf0c      	ite	eq
 8000c40:	2301      	moveq	r3, #1
 8000c42:	2300      	movne	r3, #0
 8000c44:	b2db      	uxtb	r3, r3
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <LL_GPIO_SetOutputPin>:
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	611a      	str	r2, [r3, #16]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <LL_GPIO_ResetOutputPin>:
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	0a1b      	lsrs	r3, r3, #8
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	615a      	str	r2, [r3, #20]
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <USART1_RX_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void  USART1_RX_Callback(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  char buff = LL_USART_ReceiveData8(USART1);
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <USART1_RX_Callback+0x3c>)
 8000c94:	f7ff ffba 	bl	8000c0c <LL_USART_ReceiveData8>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	71fb      	strb	r3, [r7, #7]

	  if(buff == 'h')
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b68      	cmp	r3, #104	; 0x68
 8000ca0:	d105      	bne.n	8000cae <USART1_RX_Callback+0x22>
//		  flag_signal = 1;
		  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000ca2:	f240 2102 	movw	r1, #514	; 0x202
 8000ca6:	4809      	ldr	r0, [pc, #36]	; (8000ccc <USART1_RX_Callback+0x40>)
 8000ca8:	f7ff ffd2 	bl	8000c50 <LL_GPIO_SetOutputPin>
	  else if(buff == 'l')
		  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
}
 8000cac:	e007      	b.n	8000cbe <USART1_RX_Callback+0x32>
	  else if(buff == 'l')
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b6c      	cmp	r3, #108	; 0x6c
 8000cb2:	d104      	bne.n	8000cbe <USART1_RX_Callback+0x32>
		  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000cb4:	f240 2102 	movw	r1, #514	; 0x202
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <USART1_RX_Callback+0x40>)
 8000cba:	f7ff ffd8 	bl	8000c6e <LL_GPIO_ResetOutputPin>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40013800 	.word	0x40013800
 8000ccc:	40010800 	.word	0x40010800

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr

08000cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d16:	f000 fa35 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if(!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0)){
 8000d24:	f240 1101 	movw	r1, #257	; 0x101
 8000d28:	4812      	ldr	r0, [pc, #72]	; (8000d74 <EXTI0_IRQHandler+0x54>)
 8000d2a:	f7ff ff7b 	bl	8000c24 <LL_GPIO_IsInputPinSet>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d113      	bne.n	8000d5c <EXTI0_IRQHandler+0x3c>
		LL_mDelay(1);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f001 fe9b 	bl	8002a70 <LL_mDelay>
		if(!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0)){
 8000d3a:	f240 1101 	movw	r1, #257	; 0x101
 8000d3e:	480d      	ldr	r0, [pc, #52]	; (8000d74 <EXTI0_IRQHandler+0x54>)
 8000d40:	f7ff ff70 	bl	8000c24 <LL_GPIO_IsInputPinSet>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d108      	bne.n	8000d5c <EXTI0_IRQHandler+0x3c>
			flag_change = 1;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <EXTI0_IRQHandler+0x58>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
			score++;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <EXTI0_IRQHandler+0x5c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <EXTI0_IRQHandler+0x5c>)
 8000d5a:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff fed7 	bl	8000b10 <LL_EXTI_IsActiveFlag_0_31>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <EXTI0_IRQHandler+0x4e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff fee7 	bl	8000b3c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40010800 	.word	0x40010800
 8000d78:	200000e2 	.word	0x200000e2
 8000d7c:	200000e1 	.word	0x200000e1

08000d80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 8000d84:	4815      	ldr	r0, [pc, #84]	; (8000ddc <USART1_IRQHandler+0x5c>)
 8000d86:	f7ff ff1d 	bl	8000bc4 <LL_USART_IsActiveFlag_RXNE>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d008      	beq.n	8000da2 <USART1_IRQHandler+0x22>
 8000d90:	4812      	ldr	r0, [pc, #72]	; (8000ddc <USART1_IRQHandler+0x5c>)
 8000d92:	f7ff ff29 	bl	8000be8 <LL_USART_IsEnabledIT_RXNE>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <USART1_IRQHandler+0x22>
	  {
		USART1_RX_Callback();
 8000d9c:	f7ff ff76 	bl	8000c8c <USART1_RX_Callback>
	  }
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000da0:	e019      	b.n	8000dd6 <USART1_IRQHandler+0x56>
		if(LL_USART_IsActiveFlag_ORE(USART1))
 8000da2:	480e      	ldr	r0, [pc, #56]	; (8000ddc <USART1_IRQHandler+0x5c>)
 8000da4:	f7ff fefc 	bl	8000ba0 <LL_USART_IsActiveFlag_ORE>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <USART1_IRQHandler+0x34>
		  (void) USART1->DR;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <USART1_IRQHandler+0x5c>)
 8000db0:	685b      	ldr	r3, [r3, #4]
}
 8000db2:	e010      	b.n	8000dd6 <USART1_IRQHandler+0x56>
		else if(LL_USART_IsActiveFlag_FE(USART1))
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <USART1_IRQHandler+0x5c>)
 8000db6:	f7ff fecf 	bl	8000b58 <LL_USART_IsActiveFlag_FE>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <USART1_IRQHandler+0x46>
		  (void) USART1->DR;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <USART1_IRQHandler+0x5c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
}
 8000dc4:	e007      	b.n	8000dd6 <USART1_IRQHandler+0x56>
		else if(LL_USART_IsActiveFlag_NE(USART1))
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <USART1_IRQHandler+0x5c>)
 8000dc8:	f7ff fed8 	bl	8000b7c <LL_USART_IsActiveFlag_NE>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <USART1_IRQHandler+0x56>
		  (void) USART1->DR;
 8000dd2:	4b02      	ldr	r3, [pc, #8]	; (8000ddc <USART1_IRQHandler+0x5c>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40013800 	.word	0x40013800

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f001 fe60 	bl	8002ad4 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20005000 	.word	0x20005000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	200000e4 	.word	0x200000e4
 8000e48:	20000100 	.word	0x20000100

08000e4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <__NVIC_GetPriorityGrouping>:
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4906      	ldr	r1, [pc, #24]	; (8000ea8 <__NVIC_EnableIRQ+0x34>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <LL_APB2_GRP1_EnableClock>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f6e:	699a      	ldr	r2, [r3, #24]
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f7a:	699a      	ldr	r2, [r3, #24]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <LL_USART_Enable>:
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	60da      	str	r2, [r3, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <LL_USART_ConfigAsyncMode>:
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	615a      	str	r2, [r3, #20]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]
 8000ff2:	615a      	str	r2, [r3, #20]
 8000ff4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001004:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001008:	f7ff ffac 	bl	8000f64 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800100c:	2004      	movs	r0, #4
 800100e:	f7ff ffa9 	bl	8000f64 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001012:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_USART1_UART_Init+0xc0>)
 8001014:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001016:	2309      	movs	r3, #9
 8001018:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	481e      	ldr	r0, [pc, #120]	; (80010a0 <MX_USART1_UART_Init+0xc4>)
 8001028:	f001 fab3 	bl	8002592 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_USART1_UART_Init+0xc8>)
 800102e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001030:	2304      	movs	r3, #4
 8001032:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	4819      	ldr	r0, [pc, #100]	; (80010a0 <MX_USART1_UART_Init+0xc4>)
 800103a:	f001 faaa 	bl	8002592 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800103e:	f7ff ff0b 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8001042:	4603      	mov	r3, r0
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff59 	bl	8000f00 <NVIC_EncodePriority>
 800104e:	4603      	mov	r3, r0
 8001050:	4619      	mov	r1, r3
 8001052:	2025      	movs	r0, #37	; 0x25
 8001054:	f7ff ff2a 	bl	8000eac <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001058:	2025      	movs	r0, #37	; 0x25
 800105a:	f7ff ff0b 	bl	8000e74 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800105e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001062:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001070:	230c      	movs	r3, #12
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001074:	2300      	movs	r3, #0
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <MX_USART1_UART_Init+0xcc>)
 8001084:	f001 fc94 	bl	80029b0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001088:	4807      	ldr	r0, [pc, #28]	; (80010a8 <MX_USART1_UART_Init+0xcc>)
 800108a:	f7ff ff92 	bl	8000fb2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <MX_USART1_UART_Init+0xcc>)
 8001090:	f7ff ff80 	bl	8000f94 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	3730      	adds	r7, #48	; 0x30
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	04020002 	.word	0x04020002
 80010a0:	40010800 	.word	0x40010800
 80010a4:	04040004 	.word	0x04040004
 80010a8:	40013800 	.word	0x40013800

080010ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ae:	490d      	ldr	r1, [pc, #52]	; (80010e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c4:	4c0a      	ldr	r4, [pc, #40]	; (80010f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010d2:	f7ff febb 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f001 fd03 	bl	8002ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010da:	f7ff fc4b 	bl	8000974 <main>
  bx lr
 80010de:	4770      	bx	lr
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010e8:	08003534 	.word	0x08003534
  ldr r2, =_sbss
 80010ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010f0:	200000fc 	.word	0x200000fc

080010f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC1_2_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_Init+0x28>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a07      	ldr	r2, [pc, #28]	; (8001120 <HAL_Init+0x28>)
 8001102:	f043 0310 	orr.w	r3, r3, #16
 8001106:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001108:	2003      	movs	r0, #3
 800110a:	f000 f92b 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110e:	200f      	movs	r0, #15
 8001110:	f000 f808 	bl	8001124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001114:	f7ff fcda 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40022000 	.word	0x40022000

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x54>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_InitTick+0x58>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f935 	bl	80013b2 <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e00e      	b.n	8001170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d80a      	bhi.n	800116e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001160:	f000 f90b 	bl	800137a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_InitTick+0x5c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000
 800117c:	20000008 	.word	0x20000008
 8001180:	20000004 	.word	0x20000004

08001184 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_IncTick+0x1c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_IncTick+0x20>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a03      	ldr	r2, [pc, #12]	; (80011a4 <HAL_IncTick+0x20>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	20000008 	.word	0x20000008
 80011a4:	200000e8 	.word	0x200000e8

080011a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b02      	ldr	r3, [pc, #8]	; (80011b8 <HAL_GetTick+0x10>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	200000e8 	.word	0x200000e8

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff fff0 	bl	80011a8 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffe0 	bl	80011a8 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008

08001204 <__NVIC_SetPriorityGrouping>:
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_SetPriority>:
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	; (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001330:	d301      	bcc.n	8001336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2301      	movs	r3, #1
 8001334:	e00f      	b.n	8001356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <SysTick_Config+0x40>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133e:	210f      	movs	r1, #15
 8001340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001344:	f7ff ff90 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <SysTick_Config+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SysTick_Config+0x40>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff49 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff5e 	bl	800124c <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ff90 	bl	80012bc <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5f 	bl	8001268 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffb0 	bl	8001320 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b08b      	sub	sp, #44	; 0x2c
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013de:	e169      	b.n	80016b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013e0:	2201      	movs	r2, #1
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	f040 8158 	bne.w	80016ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	4a9a      	ldr	r2, [pc, #616]	; (800166c <HAL_GPIO_Init+0x2a0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d05e      	beq.n	80014c6 <HAL_GPIO_Init+0xfa>
 8001408:	4a98      	ldr	r2, [pc, #608]	; (800166c <HAL_GPIO_Init+0x2a0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d875      	bhi.n	80014fa <HAL_GPIO_Init+0x12e>
 800140e:	4a98      	ldr	r2, [pc, #608]	; (8001670 <HAL_GPIO_Init+0x2a4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d058      	beq.n	80014c6 <HAL_GPIO_Init+0xfa>
 8001414:	4a96      	ldr	r2, [pc, #600]	; (8001670 <HAL_GPIO_Init+0x2a4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d86f      	bhi.n	80014fa <HAL_GPIO_Init+0x12e>
 800141a:	4a96      	ldr	r2, [pc, #600]	; (8001674 <HAL_GPIO_Init+0x2a8>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d052      	beq.n	80014c6 <HAL_GPIO_Init+0xfa>
 8001420:	4a94      	ldr	r2, [pc, #592]	; (8001674 <HAL_GPIO_Init+0x2a8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d869      	bhi.n	80014fa <HAL_GPIO_Init+0x12e>
 8001426:	4a94      	ldr	r2, [pc, #592]	; (8001678 <HAL_GPIO_Init+0x2ac>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d04c      	beq.n	80014c6 <HAL_GPIO_Init+0xfa>
 800142c:	4a92      	ldr	r2, [pc, #584]	; (8001678 <HAL_GPIO_Init+0x2ac>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d863      	bhi.n	80014fa <HAL_GPIO_Init+0x12e>
 8001432:	4a92      	ldr	r2, [pc, #584]	; (800167c <HAL_GPIO_Init+0x2b0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d046      	beq.n	80014c6 <HAL_GPIO_Init+0xfa>
 8001438:	4a90      	ldr	r2, [pc, #576]	; (800167c <HAL_GPIO_Init+0x2b0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d85d      	bhi.n	80014fa <HAL_GPIO_Init+0x12e>
 800143e:	2b12      	cmp	r3, #18
 8001440:	d82a      	bhi.n	8001498 <HAL_GPIO_Init+0xcc>
 8001442:	2b12      	cmp	r3, #18
 8001444:	d859      	bhi.n	80014fa <HAL_GPIO_Init+0x12e>
 8001446:	a201      	add	r2, pc, #4	; (adr r2, 800144c <HAL_GPIO_Init+0x80>)
 8001448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144c:	080014c7 	.word	0x080014c7
 8001450:	080014a1 	.word	0x080014a1
 8001454:	080014b3 	.word	0x080014b3
 8001458:	080014f5 	.word	0x080014f5
 800145c:	080014fb 	.word	0x080014fb
 8001460:	080014fb 	.word	0x080014fb
 8001464:	080014fb 	.word	0x080014fb
 8001468:	080014fb 	.word	0x080014fb
 800146c:	080014fb 	.word	0x080014fb
 8001470:	080014fb 	.word	0x080014fb
 8001474:	080014fb 	.word	0x080014fb
 8001478:	080014fb 	.word	0x080014fb
 800147c:	080014fb 	.word	0x080014fb
 8001480:	080014fb 	.word	0x080014fb
 8001484:	080014fb 	.word	0x080014fb
 8001488:	080014fb 	.word	0x080014fb
 800148c:	080014fb 	.word	0x080014fb
 8001490:	080014a9 	.word	0x080014a9
 8001494:	080014bd 	.word	0x080014bd
 8001498:	4a79      	ldr	r2, [pc, #484]	; (8001680 <HAL_GPIO_Init+0x2b4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800149e:	e02c      	b.n	80014fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	623b      	str	r3, [r7, #32]
          break;
 80014a6:	e029      	b.n	80014fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	3304      	adds	r3, #4
 80014ae:	623b      	str	r3, [r7, #32]
          break;
 80014b0:	e024      	b.n	80014fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	3308      	adds	r3, #8
 80014b8:	623b      	str	r3, [r7, #32]
          break;
 80014ba:	e01f      	b.n	80014fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	330c      	adds	r3, #12
 80014c2:	623b      	str	r3, [r7, #32]
          break;
 80014c4:	e01a      	b.n	80014fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ce:	2304      	movs	r3, #4
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e013      	b.n	80014fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d105      	bne.n	80014e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014dc:	2308      	movs	r3, #8
 80014de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	611a      	str	r2, [r3, #16]
          break;
 80014e6:	e009      	b.n	80014fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e8:	2308      	movs	r3, #8
 80014ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	615a      	str	r2, [r3, #20]
          break;
 80014f2:	e003      	b.n	80014fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
          break;
 80014f8:	e000      	b.n	80014fc <HAL_GPIO_Init+0x130>
          break;
 80014fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2bff      	cmp	r3, #255	; 0xff
 8001500:	d801      	bhi.n	8001506 <HAL_GPIO_Init+0x13a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	e001      	b.n	800150a <HAL_GPIO_Init+0x13e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3304      	adds	r3, #4
 800150a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2bff      	cmp	r3, #255	; 0xff
 8001510:	d802      	bhi.n	8001518 <HAL_GPIO_Init+0x14c>
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	e002      	b.n	800151e <HAL_GPIO_Init+0x152>
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	3b08      	subs	r3, #8
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	210f      	movs	r1, #15
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	401a      	ands	r2, r3
 8001530:	6a39      	ldr	r1, [r7, #32]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	fa01 f303 	lsl.w	r3, r1, r3
 8001538:	431a      	orrs	r2, r3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 80b1 	beq.w	80016ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800154c:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <HAL_GPIO_Init+0x2b8>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a4c      	ldr	r2, [pc, #304]	; (8001684 <HAL_GPIO_Init+0x2b8>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b4a      	ldr	r3, [pc, #296]	; (8001684 <HAL_GPIO_Init+0x2b8>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001564:	4a48      	ldr	r2, [pc, #288]	; (8001688 <HAL_GPIO_Init+0x2bc>)
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	3302      	adds	r3, #2
 800156c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001570:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	220f      	movs	r2, #15
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	4013      	ands	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a40      	ldr	r2, [pc, #256]	; (800168c <HAL_GPIO_Init+0x2c0>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d013      	beq.n	80015b8 <HAL_GPIO_Init+0x1ec>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a3f      	ldr	r2, [pc, #252]	; (8001690 <HAL_GPIO_Init+0x2c4>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d00d      	beq.n	80015b4 <HAL_GPIO_Init+0x1e8>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a3e      	ldr	r2, [pc, #248]	; (8001694 <HAL_GPIO_Init+0x2c8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d007      	beq.n	80015b0 <HAL_GPIO_Init+0x1e4>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a3d      	ldr	r2, [pc, #244]	; (8001698 <HAL_GPIO_Init+0x2cc>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d101      	bne.n	80015ac <HAL_GPIO_Init+0x1e0>
 80015a8:	2303      	movs	r3, #3
 80015aa:	e006      	b.n	80015ba <HAL_GPIO_Init+0x1ee>
 80015ac:	2304      	movs	r3, #4
 80015ae:	e004      	b.n	80015ba <HAL_GPIO_Init+0x1ee>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e002      	b.n	80015ba <HAL_GPIO_Init+0x1ee>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_GPIO_Init+0x1ee>
 80015b8:	2300      	movs	r3, #0
 80015ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015bc:	f002 0203 	and.w	r2, r2, #3
 80015c0:	0092      	lsls	r2, r2, #2
 80015c2:	4093      	lsls	r3, r2
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ca:	492f      	ldr	r1, [pc, #188]	; (8001688 <HAL_GPIO_Init+0x2bc>)
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3302      	adds	r3, #2
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d006      	beq.n	80015f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015e4:	4b2d      	ldr	r3, [pc, #180]	; (800169c <HAL_GPIO_Init+0x2d0>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	492c      	ldr	r1, [pc, #176]	; (800169c <HAL_GPIO_Init+0x2d0>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <HAL_GPIO_Init+0x2d0>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	4928      	ldr	r1, [pc, #160]	; (800169c <HAL_GPIO_Init+0x2d0>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <HAL_GPIO_Init+0x2d0>)
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	4922      	ldr	r1, [pc, #136]	; (800169c <HAL_GPIO_Init+0x2d0>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_GPIO_Init+0x2d0>)
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	43db      	mvns	r3, r3
 8001622:	491e      	ldr	r1, [pc, #120]	; (800169c <HAL_GPIO_Init+0x2d0>)
 8001624:	4013      	ands	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_GPIO_Init+0x2d0>)
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	4918      	ldr	r1, [pc, #96]	; (800169c <HAL_GPIO_Init+0x2d0>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_GPIO_Init+0x2d0>)
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	43db      	mvns	r3, r3
 800164a:	4914      	ldr	r1, [pc, #80]	; (800169c <HAL_GPIO_Init+0x2d0>)
 800164c:	4013      	ands	r3, r2
 800164e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d021      	beq.n	80016a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <HAL_GPIO_Init+0x2d0>)
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	490e      	ldr	r1, [pc, #56]	; (800169c <HAL_GPIO_Init+0x2d0>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	60cb      	str	r3, [r1, #12]
 8001668:	e021      	b.n	80016ae <HAL_GPIO_Init+0x2e2>
 800166a:	bf00      	nop
 800166c:	10320000 	.word	0x10320000
 8001670:	10310000 	.word	0x10310000
 8001674:	10220000 	.word	0x10220000
 8001678:	10210000 	.word	0x10210000
 800167c:	10120000 	.word	0x10120000
 8001680:	10110000 	.word	0x10110000
 8001684:	40021000 	.word	0x40021000
 8001688:	40010000 	.word	0x40010000
 800168c:	40010800 	.word	0x40010800
 8001690:	40010c00 	.word	0x40010c00
 8001694:	40011000 	.word	0x40011000
 8001698:	40011400 	.word	0x40011400
 800169c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_GPIO_Init+0x304>)
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	4909      	ldr	r1, [pc, #36]	; (80016d0 <HAL_GPIO_Init+0x304>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	3301      	adds	r3, #1
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	fa22 f303 	lsr.w	r3, r2, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f47f ae8e 	bne.w	80013e0 <HAL_GPIO_Init+0x14>
  }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	372c      	adds	r7, #44	; 0x2c
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	40010400 	.word	0x40010400

080016d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e12b      	b.n	800193e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d106      	bne.n	8001700 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7fe fee4 	bl	80004c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2224      	movs	r2, #36	; 0x24
 8001704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0201 	bic.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001726:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001736:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001738:	f000 fd4e 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 800173c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4a81      	ldr	r2, [pc, #516]	; (8001948 <HAL_I2C_Init+0x274>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d807      	bhi.n	8001758 <HAL_I2C_Init+0x84>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4a80      	ldr	r2, [pc, #512]	; (800194c <HAL_I2C_Init+0x278>)
 800174c:	4293      	cmp	r3, r2
 800174e:	bf94      	ite	ls
 8001750:	2301      	movls	r3, #1
 8001752:	2300      	movhi	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	e006      	b.n	8001766 <HAL_I2C_Init+0x92>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4a7d      	ldr	r2, [pc, #500]	; (8001950 <HAL_I2C_Init+0x27c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	bf94      	ite	ls
 8001760:	2301      	movls	r3, #1
 8001762:	2300      	movhi	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e0e7      	b.n	800193e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4a78      	ldr	r2, [pc, #480]	; (8001954 <HAL_I2C_Init+0x280>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	0c9b      	lsrs	r3, r3, #18
 8001778:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	430a      	orrs	r2, r1
 800178c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4a6a      	ldr	r2, [pc, #424]	; (8001948 <HAL_I2C_Init+0x274>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d802      	bhi.n	80017a8 <HAL_I2C_Init+0xd4>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	3301      	adds	r3, #1
 80017a6:	e009      	b.n	80017bc <HAL_I2C_Init+0xe8>
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ae:	fb02 f303 	mul.w	r3, r2, r3
 80017b2:	4a69      	ldr	r2, [pc, #420]	; (8001958 <HAL_I2C_Init+0x284>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	099b      	lsrs	r3, r3, #6
 80017ba:	3301      	adds	r3, #1
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	430b      	orrs	r3, r1
 80017c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	495c      	ldr	r1, [pc, #368]	; (8001948 <HAL_I2C_Init+0x274>)
 80017d8:	428b      	cmp	r3, r1
 80017da:	d819      	bhi.n	8001810 <HAL_I2C_Init+0x13c>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1e59      	subs	r1, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ea:	1c59      	adds	r1, r3, #1
 80017ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017f0:	400b      	ands	r3, r1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00a      	beq.n	800180c <HAL_I2C_Init+0x138>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1e59      	subs	r1, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fbb1 f3f3 	udiv	r3, r1, r3
 8001804:	3301      	adds	r3, #1
 8001806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180a:	e051      	b.n	80018b0 <HAL_I2C_Init+0x1dc>
 800180c:	2304      	movs	r3, #4
 800180e:	e04f      	b.n	80018b0 <HAL_I2C_Init+0x1dc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d111      	bne.n	800183c <HAL_I2C_Init+0x168>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1e58      	subs	r0, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	440b      	add	r3, r1
 8001826:	fbb0 f3f3 	udiv	r3, r0, r3
 800182a:	3301      	adds	r3, #1
 800182c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf0c      	ite	eq
 8001834:	2301      	moveq	r3, #1
 8001836:	2300      	movne	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	e012      	b.n	8001862 <HAL_I2C_Init+0x18e>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1e58      	subs	r0, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	0099      	lsls	r1, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001852:	3301      	adds	r3, #1
 8001854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf0c      	ite	eq
 800185c:	2301      	moveq	r3, #1
 800185e:	2300      	movne	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_I2C_Init+0x196>
 8001866:	2301      	movs	r3, #1
 8001868:	e022      	b.n	80018b0 <HAL_I2C_Init+0x1dc>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10e      	bne.n	8001890 <HAL_I2C_Init+0x1bc>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1e58      	subs	r0, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6859      	ldr	r1, [r3, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	440b      	add	r3, r1
 8001880:	fbb0 f3f3 	udiv	r3, r0, r3
 8001884:	3301      	adds	r3, #1
 8001886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800188e:	e00f      	b.n	80018b0 <HAL_I2C_Init+0x1dc>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1e58      	subs	r0, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6859      	ldr	r1, [r3, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	0099      	lsls	r1, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a6:	3301      	adds	r3, #1
 80018a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	6809      	ldr	r1, [r1, #0]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69da      	ldr	r2, [r3, #28]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6911      	ldr	r1, [r2, #16]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68d2      	ldr	r2, [r2, #12]
 80018ea:	4311      	orrs	r1, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	430b      	orrs	r3, r1
 80018f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2220      	movs	r2, #32
 800192a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	000186a0 	.word	0x000186a0
 800194c:	001e847f 	.word	0x001e847f
 8001950:	003d08ff 	.word	0x003d08ff
 8001954:	431bde83 	.word	0x431bde83
 8001958:	10624dd3 	.word	0x10624dd3

0800195c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af02      	add	r7, sp, #8
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	461a      	mov	r2, r3
 8001968:	460b      	mov	r3, r1
 800196a:	817b      	strh	r3, [r7, #10]
 800196c:	4613      	mov	r3, r2
 800196e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff fc1a 	bl	80011a8 <HAL_GetTick>
 8001974:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b20      	cmp	r3, #32
 8001980:	f040 80e0 	bne.w	8001b44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2319      	movs	r3, #25
 800198a:	2201      	movs	r2, #1
 800198c:	4970      	ldr	r1, [pc, #448]	; (8001b50 <HAL_I2C_Master_Transmit+0x1f4>)
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 fa92 	bl	8001eb8 <I2C_WaitOnFlagUntilTimeout>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800199a:	2302      	movs	r3, #2
 800199c:	e0d3      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_I2C_Master_Transmit+0x50>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e0cc      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ea>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d007      	beq.n	80019d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0201 	orr.w	r2, r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2221      	movs	r2, #33	; 0x21
 80019e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2210      	movs	r2, #16
 80019ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	893a      	ldrh	r2, [r7, #8]
 8001a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4a50      	ldr	r2, [pc, #320]	; (8001b54 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a14:	8979      	ldrh	r1, [r7, #10]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	6a3a      	ldr	r2, [r7, #32]
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 f9ca 	bl	8001db4 <I2C_MasterRequestWrite>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e08d      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a40:	e066      	b.n	8001b10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	6a39      	ldr	r1, [r7, #32]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 fb0c 	bl	8002064 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00d      	beq.n	8001a6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d107      	bne.n	8001a6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e06b      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d11b      	bne.n	8001ae4 <HAL_I2C_Master_Transmit+0x188>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d017      	beq.n	8001ae4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	6a39      	ldr	r1, [r7, #32]
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 fafc 	bl	80020e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00d      	beq.n	8001b10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d107      	bne.n	8001b0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e01a      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d194      	bne.n	8001a42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e000      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
  }
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	00100002 	.word	0x00100002
 8001b54:	ffff0000 	.word	0xffff0000

08001b58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	460b      	mov	r3, r1
 8001b66:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff fb1e 	bl	80011a8 <HAL_GetTick>
 8001b6c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	f040 8111 	bne.w	8001da2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2319      	movs	r3, #25
 8001b86:	2201      	movs	r2, #1
 8001b88:	4988      	ldr	r1, [pc, #544]	; (8001dac <HAL_I2C_IsDeviceReady+0x254>)
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 f994 	bl	8001eb8 <I2C_WaitOnFlagUntilTimeout>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001b96:	2302      	movs	r3, #2
 8001b98:	e104      	b.n	8001da4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_I2C_IsDeviceReady+0x50>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e0fd      	b.n	8001da4 <HAL_I2C_IsDeviceReady+0x24c>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d007      	beq.n	8001bce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2224      	movs	r2, #36	; 0x24
 8001be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4a70      	ldr	r2, [pc, #448]	; (8001db0 <HAL_I2C_IsDeviceReady+0x258>)
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c00:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f952 	bl	8001eb8 <I2C_WaitOnFlagUntilTimeout>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00d      	beq.n	8001c36 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c28:	d103      	bne.n	8001c32 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e0b6      	b.n	8001da4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c36:	897b      	ldrh	r3, [r7, #10]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c44:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001c46:	f7ff faaf 	bl	80011a8 <HAL_GetTick>
 8001c4a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	bf0c      	ite	eq
 8001c5a:	2301      	moveq	r3, #1
 8001c5c:	2300      	movne	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c70:	bf0c      	ite	eq
 8001c72:	2301      	moveq	r3, #1
 8001c74:	2300      	movne	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001c7a:	e025      	b.n	8001cc8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c7c:	f7ff fa94 	bl	80011a8 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d302      	bcc.n	8001c92 <HAL_I2C_IsDeviceReady+0x13a>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	22a0      	movs	r2, #160	; 0xa0
 8001c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2ba0      	cmp	r3, #160	; 0xa0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_I2C_IsDeviceReady+0x188>
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d102      	bne.n	8001ce0 <HAL_I2C_IsDeviceReady+0x188>
 8001cda:	7dbb      	ldrb	r3, [r7, #22]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0cd      	beq.n	8001c7c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d129      	bne.n	8001d4a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d04:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2319      	movs	r3, #25
 8001d22:	2201      	movs	r2, #1
 8001d24:	4921      	ldr	r1, [pc, #132]	; (8001dac <HAL_I2C_IsDeviceReady+0x254>)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f8c6 	bl	8001eb8 <I2C_WaitOnFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e036      	b.n	8001da4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e02c      	b.n	8001da4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d58:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d62:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2319      	movs	r3, #25
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	490f      	ldr	r1, [pc, #60]	; (8001dac <HAL_I2C_IsDeviceReady+0x254>)
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f8a2 	bl	8001eb8 <I2C_WaitOnFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e012      	b.n	8001da4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	3301      	adds	r3, #1
 8001d82:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	f4ff af32 	bcc.w	8001bf2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001da2:	2302      	movs	r3, #2
  }
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	00100002 	.word	0x00100002
 8001db0:	ffff0000 	.word	0xffff0000

08001db4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d006      	beq.n	8001dde <I2C_MasterRequestWrite+0x2a>
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d003      	beq.n	8001dde <I2C_MasterRequestWrite+0x2a>
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ddc:	d108      	bne.n	8001df0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	e00b      	b.n	8001e08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	2b12      	cmp	r3, #18
 8001df6:	d107      	bne.n	8001e08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f84f 	bl	8001eb8 <I2C_WaitOnFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00d      	beq.n	8001e3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e2e:	d103      	bne.n	8001e38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e035      	b.n	8001ea8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e44:	d108      	bne.n	8001e58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e46:	897b      	ldrh	r3, [r7, #10]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e54:	611a      	str	r2, [r3, #16]
 8001e56:	e01b      	b.n	8001e90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e58:	897b      	ldrh	r3, [r7, #10]
 8001e5a:	11db      	asrs	r3, r3, #7
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f003 0306 	and.w	r3, r3, #6
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f063 030f 	orn	r3, r3, #15
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	490e      	ldr	r1, [pc, #56]	; (8001eb0 <I2C_MasterRequestWrite+0xfc>)
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f875 	bl	8001f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e010      	b.n	8001ea8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e86:	897b      	ldrh	r3, [r7, #10]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4907      	ldr	r1, [pc, #28]	; (8001eb4 <I2C_MasterRequestWrite+0x100>)
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f865 	bl	8001f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	00010008 	.word	0x00010008
 8001eb4:	00010002 	.word	0x00010002

08001eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ec8:	e025      	b.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ed0:	d021      	beq.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed2:	f7ff f969 	bl	80011a8 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d302      	bcc.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d116      	bne.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f043 0220 	orr.w	r2, r3, #32
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e023      	b.n	8001f5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	0c1b      	lsrs	r3, r3, #16
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10d      	bne.n	8001f3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf0c      	ite	eq
 8001f32:	2301      	moveq	r3, #1
 8001f34:	2300      	movne	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	e00c      	b.n	8001f56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	43da      	mvns	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4013      	ands	r3, r2
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf0c      	ite	eq
 8001f4e:	2301      	moveq	r3, #1
 8001f50:	2300      	movne	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d0b6      	beq.n	8001eca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f74:	e051      	b.n	800201a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f84:	d123      	bne.n	8001fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f043 0204 	orr.w	r2, r3, #4
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e046      	b.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fd4:	d021      	beq.n	800201a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd6:	f7ff f8e7 	bl	80011a8 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d302      	bcc.n	8001fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d116      	bne.n	800201a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e020      	b.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	0c1b      	lsrs	r3, r3, #16
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d10c      	bne.n	800203e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4013      	ands	r3, r2
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	bf14      	ite	ne
 8002036:	2301      	movne	r3, #1
 8002038:	2300      	moveq	r3, #0
 800203a:	b2db      	uxtb	r3, r3
 800203c:	e00b      	b.n	8002056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	43da      	mvns	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4013      	ands	r3, r2
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf14      	ite	ne
 8002050:	2301      	movne	r3, #1
 8002052:	2300      	moveq	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d18d      	bne.n	8001f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002070:	e02d      	b.n	80020ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f878 	bl	8002168 <I2C_IsAcknowledgeFailed>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e02d      	b.n	80020de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002088:	d021      	beq.n	80020ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208a:	f7ff f88d 	bl	80011a8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	429a      	cmp	r2, r3
 8002098:	d302      	bcc.n	80020a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d116      	bne.n	80020ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2220      	movs	r2, #32
 80020aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f043 0220 	orr.w	r2, r3, #32
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e007      	b.n	80020de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d8:	2b80      	cmp	r3, #128	; 0x80
 80020da:	d1ca      	bne.n	8002072 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020f2:	e02d      	b.n	8002150 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f837 	bl	8002168 <I2C_IsAcknowledgeFailed>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e02d      	b.n	8002160 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800210a:	d021      	beq.n	8002150 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800210c:	f7ff f84c 	bl	80011a8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	429a      	cmp	r2, r3
 800211a:	d302      	bcc.n	8002122 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d116      	bne.n	8002150 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f043 0220 	orr.w	r2, r3, #32
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e007      	b.n	8002160 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b04      	cmp	r3, #4
 800215c:	d1ca      	bne.n	80020f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217e:	d11b      	bne.n	80021b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002188:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0204 	orr.w	r2, r3, #4
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c8:	4b02      	ldr	r3, [pc, #8]	; (80021d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	20000000 	.word	0x20000000

080021d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021dc:	f7ff fff2 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	4903      	ldr	r1, [pc, #12]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	080034f0 	.word	0x080034f0

08002200 <LL_EXTI_EnableIT_0_31>:
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <LL_EXTI_EnableIT_0_31+0x20>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4904      	ldr	r1, [pc, #16]	; (8002220 <LL_EXTI_EnableIT_0_31+0x20>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40010400 	.word	0x40010400

08002224 <LL_EXTI_DisableIT_0_31>:
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <LL_EXTI_DisableIT_0_31+0x20>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	43db      	mvns	r3, r3
 8002234:	4903      	ldr	r1, [pc, #12]	; (8002244 <LL_EXTI_DisableIT_0_31+0x20>)
 8002236:	4013      	ands	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	40010400 	.word	0x40010400

08002248 <LL_EXTI_EnableEvent_0_31>:
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	4904      	ldr	r1, [pc, #16]	; (8002268 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40010400 	.word	0x40010400

0800226c <LL_EXTI_DisableEvent_0_31>:
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <LL_EXTI_DisableEvent_0_31+0x20>)
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	43db      	mvns	r3, r3
 800227c:	4903      	ldr	r1, [pc, #12]	; (800228c <LL_EXTI_DisableEvent_0_31+0x20>)
 800227e:	4013      	ands	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	40010400 	.word	0x40010400

08002290 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4904      	ldr	r1, [pc, #16]	; (80022b0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40010400 	.word	0x40010400

080022b4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	4903      	ldr	r1, [pc, #12]	; (80022d4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	40010400 	.word	0x40010400

080022d8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60cb      	str	r3, [r1, #12]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40010400 	.word	0x40010400

080022fc <LL_EXTI_DisableFallingTrig_0_31>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	43db      	mvns	r3, r3
 800230c:	4903      	ldr	r1, [pc, #12]	; (800231c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800230e:	4013      	ands	r3, r2
 8002310:	60cb      	str	r3, [r1, #12]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	40010400 	.word	0x40010400

08002320 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	791b      	ldrb	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d065      	beq.n	8002400 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d06c      	beq.n	8002416 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	795b      	ldrb	r3, [r3, #5]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d01c      	beq.n	800237e <LL_EXTI_Init+0x5e>
 8002344:	2b02      	cmp	r3, #2
 8002346:	dc25      	bgt.n	8002394 <LL_EXTI_Init+0x74>
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <LL_EXTI_Init+0x32>
 800234c:	2b01      	cmp	r3, #1
 800234e:	d00b      	beq.n	8002368 <LL_EXTI_Init+0x48>
 8002350:	e020      	b.n	8002394 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff88 	bl	800226c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff4d 	bl	8002200 <LL_EXTI_EnableIT_0_31>
          break;
 8002366:	e018      	b.n	800239a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff59 	bl	8002224 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff66 	bl	8002248 <LL_EXTI_EnableEvent_0_31>
          break;
 800237c:	e00d      	b.n	800239a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff3c 	bl	8002200 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff5b 	bl	8002248 <LL_EXTI_EnableEvent_0_31>
          break;
 8002392:	e002      	b.n	800239a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
          break;
 8002398:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	799b      	ldrb	r3, [r3, #6]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d039      	beq.n	8002416 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	799b      	ldrb	r3, [r3, #6]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d01c      	beq.n	80023e4 <LL_EXTI_Init+0xc4>
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	dc25      	bgt.n	80023fa <LL_EXTI_Init+0xda>
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d002      	beq.n	80023b8 <LL_EXTI_Init+0x98>
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d00b      	beq.n	80023ce <LL_EXTI_Init+0xae>
 80023b6:	e020      	b.n	80023fa <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff9d 	bl	80022fc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff62 	bl	8002290 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80023cc:	e024      	b.n	8002418 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff ff6e 	bl	80022b4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff7b 	bl	80022d8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80023e2:	e019      	b.n	8002418 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff51 	bl	8002290 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff70 	bl	80022d8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80023f8:	e00e      	b.n	8002418 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
            break;
 80023fe:	e00b      	b.n	8002418 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff0d 	bl	8002224 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff2c 	bl	800226c <LL_EXTI_DisableEvent_0_31>
 8002414:	e000      	b.n	8002418 <LL_EXTI_Init+0xf8>
      }
 8002416:	bf00      	nop
  }
  return status;
 8002418:	7bfb      	ldrb	r3, [r7, #15]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <LL_GPIO_SetPinMode>:
{
 8002422:	b490      	push	{r4, r7}
 8002424:	b088      	sub	sp, #32
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	461a      	mov	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	0e1b      	lsrs	r3, r3, #24
 8002436:	4413      	add	r3, r2
 8002438:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800243a:	6822      	ldr	r2, [r4, #0]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	613b      	str	r3, [r7, #16]
  return result;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	210f      	movs	r1, #15
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	401a      	ands	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	61bb      	str	r3, [r7, #24]
  return result;
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	4313      	orrs	r3, r2
 800247a:	6023      	str	r3, [r4, #0]
}
 800247c:	bf00      	nop
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bc90      	pop	{r4, r7}
 8002484:	4770      	bx	lr

08002486 <LL_GPIO_SetPinSpeed>:
{
 8002486:	b490      	push	{r4, r7}
 8002488:	b088      	sub	sp, #32
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	461a      	mov	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	0e1b      	lsrs	r3, r3, #24
 800249a:	4413      	add	r3, r2
 800249c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800249e:	6822      	ldr	r2, [r4, #0]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	613b      	str	r3, [r7, #16]
  return result;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	2103      	movs	r1, #3
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	401a      	ands	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	61bb      	str	r3, [r7, #24]
  return result;
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	4313      	orrs	r3, r2
 80024de:	6023      	str	r3, [r4, #0]
}
 80024e0:	bf00      	nop
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc90      	pop	{r4, r7}
 80024e8:	4770      	bx	lr

080024ea <LL_GPIO_SetPinOutputType>:
{
 80024ea:	b490      	push	{r4, r7}
 80024ec:	b088      	sub	sp, #32
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	461a      	mov	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	0e1b      	lsrs	r3, r3, #24
 80024fe:	4413      	add	r3, r2
 8002500:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002502:	6822      	ldr	r2, [r4, #0]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	613b      	str	r3, [r7, #16]
  return result;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	2104      	movs	r1, #4
 800251c:	fa01 f303 	lsl.w	r3, r1, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	401a      	ands	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	61bb      	str	r3, [r7, #24]
  return result;
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	4313      	orrs	r3, r2
 8002542:	6023      	str	r3, [r4, #0]
}
 8002544:	bf00      	nop
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bc90      	pop	{r4, r7}
 800254c:	4770      	bx	lr

0800254e <LL_GPIO_SetPinPull>:
{
 800254e:	b480      	push	{r7}
 8002550:	b087      	sub	sp, #28
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	43db      	mvns	r3, r3
 8002564:	401a      	ands	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	613b      	str	r3, [r7, #16]
  return result;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	4619      	mov	r1, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	408b      	lsls	r3, r1
 8002582:	431a      	orrs	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	60da      	str	r2, [r3, #12]
}
 8002588:	bf00      	nop
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b088      	sub	sp, #32
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	0c1b      	lsrs	r3, r3, #16
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	60fb      	str	r3, [r7, #12]
  return result;
 80025b2:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80025bc:	e044      	b.n	8002648 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80025be:	2201      	movs	r2, #1
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	409a      	lsls	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d03a      	beq.n	8002642 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b07      	cmp	r3, #7
 80025d0:	d806      	bhi.n	80025e0 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80025d2:	f240 1201 	movw	r2, #257	; 0x101
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	e008      	b.n	80025f2 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	3b08      	subs	r3, #8
 80025e4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025f0:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d106      	bne.n	8002608 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	461a      	mov	r2, r3
 8002600:	69b9      	ldr	r1, [r7, #24]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ffa3 	bl	800254e <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	461a      	mov	r2, r3
 800260e:	69b9      	ldr	r1, [r7, #24]
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff06 	bl	8002422 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d003      	beq.n	8002626 <LL_GPIO_Init+0x94>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b09      	cmp	r3, #9
 8002624:	d10d      	bne.n	8002642 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	461a      	mov	r2, r3
 800262c:	69b9      	ldr	r1, [r7, #24]
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ff29 	bl	8002486 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	461a      	mov	r2, r3
 800263a:	69b9      	ldr	r1, [r7, #24]
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff54 	bl	80024ea <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3301      	adds	r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1b4      	bne.n	80025be <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <LL_RCC_GetSysClkSource>:
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <LL_RCC_GetSysClkSource+0x14>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 030c 	and.w	r3, r3, #12
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	40021000 	.word	0x40021000

08002678 <LL_RCC_GetAHBPrescaler>:
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <LL_RCC_GetAHBPrescaler+0x14>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	40021000 	.word	0x40021000

08002690 <LL_RCC_GetAPB1Prescaler>:
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	40021000 	.word	0x40021000

080026a8 <LL_RCC_GetAPB2Prescaler>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <LL_RCC_GetAPB2Prescaler+0x14>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	40021000 	.word	0x40021000

080026c0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <LL_RCC_PLL_GetMainSource+0x14>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40021000 	.word	0x40021000

080026d8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <LL_RCC_PLL_GetMultiplicator+0x14>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	40021000 	.word	0x40021000

080026f0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <LL_RCC_PLL_GetPrediv+0x18>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	0c5b      	lsrs	r3, r3, #17
 80026fa:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000

0800270c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002714:	f000 f820 	bl	8002758 <RCC_GetSystemClockFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f83e 	bl	80027a4 <RCC_GetHCLKClockFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f84c 	bl	80027d0 <RCC_GetPCLK1ClockFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f858 	bl	80027f8 <RCC_GetPCLK2ClockFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	60da      	str	r2, [r3, #12]
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002762:	f7ff ff7d 	bl	8002660 <LL_RCC_GetSysClkSource>
 8002766:	4603      	mov	r3, r0
 8002768:	2b08      	cmp	r3, #8
 800276a:	d00c      	beq.n	8002786 <RCC_GetSystemClockFreq+0x2e>
 800276c:	2b08      	cmp	r3, #8
 800276e:	d80e      	bhi.n	800278e <RCC_GetSystemClockFreq+0x36>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <RCC_GetSystemClockFreq+0x22>
 8002774:	2b04      	cmp	r3, #4
 8002776:	d003      	beq.n	8002780 <RCC_GetSystemClockFreq+0x28>
 8002778:	e009      	b.n	800278e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <RCC_GetSystemClockFreq+0x48>)
 800277c:	607b      	str	r3, [r7, #4]
      break;
 800277e:	e009      	b.n	8002794 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <RCC_GetSystemClockFreq+0x48>)
 8002782:	607b      	str	r3, [r7, #4]
      break;
 8002784:	e006      	b.n	8002794 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002786:	f000 f84b 	bl	8002820 <RCC_PLL_GetFreqDomain_SYS>
 800278a:	6078      	str	r0, [r7, #4]
      break;
 800278c:	e002      	b.n	8002794 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <RCC_GetSystemClockFreq+0x48>)
 8002790:	607b      	str	r3, [r7, #4]
      break;
 8002792:	bf00      	nop
  }

  return frequency;
 8002794:	687b      	ldr	r3, [r7, #4]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	007a1200 	.word	0x007a1200

080027a4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80027ac:	f7ff ff64 	bl	8002678 <LL_RCC_GetAHBPrescaler>
 80027b0:	4603      	mov	r3, r0
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <RCC_GetHCLKClockFreq+0x28>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	461a      	mov	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	40d3      	lsrs	r3, r2
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	080034e0 	.word	0x080034e0

080027d0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80027d8:	f7ff ff5a 	bl	8002690 <LL_RCC_GetAPB1Prescaler>
 80027dc:	4603      	mov	r3, r0
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <RCC_GetPCLK1ClockFreq+0x24>)
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	461a      	mov	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	40d3      	lsrs	r3, r2
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	080034f0 	.word	0x080034f0

080027f8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002800:	f7ff ff52 	bl	80026a8 <LL_RCC_GetAPB2Prescaler>
 8002804:	4603      	mov	r3, r0
 8002806:	0adb      	lsrs	r3, r3, #11
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <RCC_GetPCLK2ClockFreq+0x24>)
 800280a:	5cd3      	ldrb	r3, [r2, r3]
 800280c:	461a      	mov	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	40d3      	lsrs	r3, r2
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	080034f0 	.word	0x080034f0

08002820 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	2300      	movs	r3, #0
 800282c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800282e:	f7ff ff47 	bl	80026c0 <LL_RCC_PLL_GetMainSource>
 8002832:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d004      	beq.n	8002844 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d003      	beq.n	800284a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002842:	e00b      	b.n	800285c <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002846:	607b      	str	r3, [r7, #4]
      break;
 8002848:	e00b      	b.n	8002862 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800284a:	f7ff ff51 	bl	80026f0 <LL_RCC_PLL_GetPrediv>
 800284e:	4603      	mov	r3, r0
 8002850:	3301      	adds	r3, #1
 8002852:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	607b      	str	r3, [r7, #4]
      break;
 800285a:	e002      	b.n	8002862 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800285e:	607b      	str	r3, [r7, #4]
      break;
 8002860:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002862:	f7ff ff39 	bl	80026d8 <LL_RCC_PLL_GetMultiplicator>
 8002866:	4603      	mov	r3, r0
 8002868:	0c9b      	lsrs	r3, r3, #18
 800286a:	3302      	adds	r3, #2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	fb02 f303 	mul.w	r3, r2, r3
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	003d0900 	.word	0x003d0900
 8002880:	007a1200 	.word	0x007a1200

08002884 <LL_USART_IsEnabled>:
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002898:	bf0c      	ite	eq
 800289a:	2301      	moveq	r3, #1
 800289c:	2300      	movne	r3, #0
 800289e:	b2db      	uxtb	r3, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <LL_USART_SetStopBitsLength>:
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	611a      	str	r2, [r3, #16]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <LL_USART_SetHWFlowCtrl>:
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	615a      	str	r2, [r3, #20]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
	...

080028f4 <LL_USART_SetBaudRate>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	009a      	lsls	r2, r3, #2
 800290a:	441a      	add	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	4a25      	ldr	r2, [pc, #148]	; (80029ac <LL_USART_SetBaudRate+0xb8>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	b29b      	uxth	r3, r3
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	b299      	uxth	r1, r3
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	009a      	lsls	r2, r3, #2
 800292c:	441a      	add	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	fbb2 f2f3 	udiv	r2, r2, r3
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <LL_USART_SetBaudRate+0xb8>)
 8002938:	fba3 0302 	umull	r0, r3, r3, r2
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	2064      	movs	r0, #100	; 0x64
 8002940:	fb00 f303 	mul.w	r3, r0, r3
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	3332      	adds	r3, #50	; 0x32
 800294a:	4a18      	ldr	r2, [pc, #96]	; (80029ac <LL_USART_SetBaudRate+0xb8>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	b29b      	uxth	r3, r3
 8002954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002958:	b29b      	uxth	r3, r3
 800295a:	440b      	add	r3, r1
 800295c:	b299      	uxth	r1, r3
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	009a      	lsls	r2, r3, #2
 8002968:	441a      	add	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <LL_USART_SetBaudRate+0xb8>)
 8002974:	fba3 0302 	umull	r0, r3, r3, r2
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	2064      	movs	r0, #100	; 0x64
 800297c:	fb00 f303 	mul.w	r3, r0, r3
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	3332      	adds	r3, #50	; 0x32
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <LL_USART_SetBaudRate+0xb8>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	b29b      	uxth	r3, r3
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	b29b      	uxth	r3, r3
 8002996:	440b      	add	r3, r1
 8002998:	b29b      	uxth	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	609a      	str	r2, [r3, #8]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	51eb851f 	.word	0x51eb851f

080029b0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ff5e 	bl	8002884 <LL_USART_IsEnabled>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d145      	bne.n	8002a5a <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029d6:	f023 030c 	bic.w	r3, r3, #12
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	6851      	ldr	r1, [r2, #4]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	68d2      	ldr	r2, [r2, #12]
 80029e2:	4311      	orrs	r1, r2
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	6912      	ldr	r2, [r2, #16]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4619      	mov	r1, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ff57 	bl	80028aa <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ff63 	bl	80028ce <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002a08:	f107 0308 	add.w	r3, r7, #8
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fe7d 	bl	800270c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a13      	ldr	r2, [pc, #76]	; (8002a64 <LL_USART_Init+0xb4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d102      	bne.n	8002a20 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	e00c      	b.n	8002a3a <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <LL_USART_Init+0xb8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d102      	bne.n	8002a2e <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	e005      	b.n	8002a3a <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a0e      	ldr	r2, [pc, #56]	; (8002a6c <LL_USART_Init+0xbc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d101      	bne.n	8002a3a <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00c      	beq.n	8002a5a <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	69b9      	ldr	r1, [r7, #24]
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff4d 	bl	80028f4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002a5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3720      	adds	r7, #32
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40004400 	.word	0x40004400
 8002a6c:	40004800 	.word	0x40004800

08002a70 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <LL_mDelay+0x44>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002a7e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a86:	d00c      	beq.n	8002aa2 <LL_mDelay+0x32>
  {
    Delay++;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002a8e:	e008      	b.n	8002aa2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002a90:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <LL_mDelay+0x44>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <LL_mDelay+0x32>
    {
      Delay--;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f3      	bne.n	8002a90 <LL_mDelay+0x20>
    }
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	e000e010 	.word	0xe000e010

08002ab8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <LL_SetSystemCoreClock+0x18>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6013      	str	r3, [r2, #0]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	20000000 	.word	0x20000000

08002ad4 <__errno>:
 8002ad4:	4b01      	ldr	r3, [pc, #4]	; (8002adc <__errno+0x8>)
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	2000000c 	.word	0x2000000c

08002ae0 <__libc_init_array>:
 8002ae0:	b570      	push	{r4, r5, r6, lr}
 8002ae2:	2600      	movs	r6, #0
 8002ae4:	4d0c      	ldr	r5, [pc, #48]	; (8002b18 <__libc_init_array+0x38>)
 8002ae6:	4c0d      	ldr	r4, [pc, #52]	; (8002b1c <__libc_init_array+0x3c>)
 8002ae8:	1b64      	subs	r4, r4, r5
 8002aea:	10a4      	asrs	r4, r4, #2
 8002aec:	42a6      	cmp	r6, r4
 8002aee:	d109      	bne.n	8002b04 <__libc_init_array+0x24>
 8002af0:	f000 fcc8 	bl	8003484 <_init>
 8002af4:	2600      	movs	r6, #0
 8002af6:	4d0a      	ldr	r5, [pc, #40]	; (8002b20 <__libc_init_array+0x40>)
 8002af8:	4c0a      	ldr	r4, [pc, #40]	; (8002b24 <__libc_init_array+0x44>)
 8002afa:	1b64      	subs	r4, r4, r5
 8002afc:	10a4      	asrs	r4, r4, #2
 8002afe:	42a6      	cmp	r6, r4
 8002b00:	d105      	bne.n	8002b0e <__libc_init_array+0x2e>
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
 8002b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b08:	4798      	blx	r3
 8002b0a:	3601      	adds	r6, #1
 8002b0c:	e7ee      	b.n	8002aec <__libc_init_array+0xc>
 8002b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b12:	4798      	blx	r3
 8002b14:	3601      	adds	r6, #1
 8002b16:	e7f2      	b.n	8002afe <__libc_init_array+0x1e>
 8002b18:	0800352c 	.word	0x0800352c
 8002b1c:	0800352c 	.word	0x0800352c
 8002b20:	0800352c 	.word	0x0800352c
 8002b24:	08003530 	.word	0x08003530

08002b28 <sniprintf>:
 8002b28:	b40c      	push	{r2, r3}
 8002b2a:	b530      	push	{r4, r5, lr}
 8002b2c:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <sniprintf+0x64>)
 8002b2e:	1e0c      	subs	r4, r1, #0
 8002b30:	681d      	ldr	r5, [r3, #0]
 8002b32:	b09d      	sub	sp, #116	; 0x74
 8002b34:	da08      	bge.n	8002b48 <sniprintf+0x20>
 8002b36:	238b      	movs	r3, #139	; 0x8b
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b3c:	602b      	str	r3, [r5, #0]
 8002b3e:	b01d      	add	sp, #116	; 0x74
 8002b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b44:	b002      	add	sp, #8
 8002b46:	4770      	bx	lr
 8002b48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002b4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002b50:	bf0c      	ite	eq
 8002b52:	4623      	moveq	r3, r4
 8002b54:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002b58:	9304      	str	r3, [sp, #16]
 8002b5a:	9307      	str	r3, [sp, #28]
 8002b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b60:	9002      	str	r0, [sp, #8]
 8002b62:	9006      	str	r0, [sp, #24]
 8002b64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002b68:	4628      	mov	r0, r5
 8002b6a:	ab21      	add	r3, sp, #132	; 0x84
 8002b6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002b6e:	a902      	add	r1, sp, #8
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	f000 f889 	bl	8002c88 <_svfiprintf_r>
 8002b76:	1c43      	adds	r3, r0, #1
 8002b78:	bfbc      	itt	lt
 8002b7a:	238b      	movlt	r3, #139	; 0x8b
 8002b7c:	602b      	strlt	r3, [r5, #0]
 8002b7e:	2c00      	cmp	r4, #0
 8002b80:	d0dd      	beq.n	8002b3e <sniprintf+0x16>
 8002b82:	2200      	movs	r2, #0
 8002b84:	9b02      	ldr	r3, [sp, #8]
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e7d9      	b.n	8002b3e <sniprintf+0x16>
 8002b8a:	bf00      	nop
 8002b8c:	2000000c 	.word	0x2000000c

08002b90 <siprintf>:
 8002b90:	b40e      	push	{r1, r2, r3}
 8002b92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b96:	b500      	push	{lr}
 8002b98:	b09c      	sub	sp, #112	; 0x70
 8002b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8002b9c:	9002      	str	r0, [sp, #8]
 8002b9e:	9006      	str	r0, [sp, #24]
 8002ba0:	9107      	str	r1, [sp, #28]
 8002ba2:	9104      	str	r1, [sp, #16]
 8002ba4:	4808      	ldr	r0, [pc, #32]	; (8002bc8 <siprintf+0x38>)
 8002ba6:	4909      	ldr	r1, [pc, #36]	; (8002bcc <siprintf+0x3c>)
 8002ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bac:	9105      	str	r1, [sp, #20]
 8002bae:	6800      	ldr	r0, [r0, #0]
 8002bb0:	a902      	add	r1, sp, #8
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	f000 f868 	bl	8002c88 <_svfiprintf_r>
 8002bb8:	2200      	movs	r2, #0
 8002bba:	9b02      	ldr	r3, [sp, #8]
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	b01c      	add	sp, #112	; 0x70
 8002bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bc4:	b003      	add	sp, #12
 8002bc6:	4770      	bx	lr
 8002bc8:	2000000c 	.word	0x2000000c
 8002bcc:	ffff0208 	.word	0xffff0208

08002bd0 <__ssputs_r>:
 8002bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bd4:	688e      	ldr	r6, [r1, #8]
 8002bd6:	4682      	mov	sl, r0
 8002bd8:	429e      	cmp	r6, r3
 8002bda:	460c      	mov	r4, r1
 8002bdc:	4690      	mov	r8, r2
 8002bde:	461f      	mov	r7, r3
 8002be0:	d838      	bhi.n	8002c54 <__ssputs_r+0x84>
 8002be2:	898a      	ldrh	r2, [r1, #12]
 8002be4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002be8:	d032      	beq.n	8002c50 <__ssputs_r+0x80>
 8002bea:	6825      	ldr	r5, [r4, #0]
 8002bec:	6909      	ldr	r1, [r1, #16]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	eba5 0901 	sub.w	r9, r5, r1
 8002bf4:	6965      	ldr	r5, [r4, #20]
 8002bf6:	444b      	add	r3, r9
 8002bf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c00:	106d      	asrs	r5, r5, #1
 8002c02:	429d      	cmp	r5, r3
 8002c04:	bf38      	it	cc
 8002c06:	461d      	movcc	r5, r3
 8002c08:	0553      	lsls	r3, r2, #21
 8002c0a:	d531      	bpl.n	8002c70 <__ssputs_r+0xa0>
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	f000 fb6f 	bl	80032f0 <_malloc_r>
 8002c12:	4606      	mov	r6, r0
 8002c14:	b950      	cbnz	r0, 8002c2c <__ssputs_r+0x5c>
 8002c16:	230c      	movs	r3, #12
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c1c:	f8ca 3000 	str.w	r3, [sl]
 8002c20:	89a3      	ldrh	r3, [r4, #12]
 8002c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c26:	81a3      	strh	r3, [r4, #12]
 8002c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c2c:	464a      	mov	r2, r9
 8002c2e:	6921      	ldr	r1, [r4, #16]
 8002c30:	f000 face 	bl	80031d0 <memcpy>
 8002c34:	89a3      	ldrh	r3, [r4, #12]
 8002c36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3e:	81a3      	strh	r3, [r4, #12]
 8002c40:	6126      	str	r6, [r4, #16]
 8002c42:	444e      	add	r6, r9
 8002c44:	6026      	str	r6, [r4, #0]
 8002c46:	463e      	mov	r6, r7
 8002c48:	6165      	str	r5, [r4, #20]
 8002c4a:	eba5 0509 	sub.w	r5, r5, r9
 8002c4e:	60a5      	str	r5, [r4, #8]
 8002c50:	42be      	cmp	r6, r7
 8002c52:	d900      	bls.n	8002c56 <__ssputs_r+0x86>
 8002c54:	463e      	mov	r6, r7
 8002c56:	4632      	mov	r2, r6
 8002c58:	4641      	mov	r1, r8
 8002c5a:	6820      	ldr	r0, [r4, #0]
 8002c5c:	f000 fac6 	bl	80031ec <memmove>
 8002c60:	68a3      	ldr	r3, [r4, #8]
 8002c62:	2000      	movs	r0, #0
 8002c64:	1b9b      	subs	r3, r3, r6
 8002c66:	60a3      	str	r3, [r4, #8]
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	4433      	add	r3, r6
 8002c6c:	6023      	str	r3, [r4, #0]
 8002c6e:	e7db      	b.n	8002c28 <__ssputs_r+0x58>
 8002c70:	462a      	mov	r2, r5
 8002c72:	f000 fbb1 	bl	80033d8 <_realloc_r>
 8002c76:	4606      	mov	r6, r0
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d1e1      	bne.n	8002c40 <__ssputs_r+0x70>
 8002c7c:	4650      	mov	r0, sl
 8002c7e:	6921      	ldr	r1, [r4, #16]
 8002c80:	f000 face 	bl	8003220 <_free_r>
 8002c84:	e7c7      	b.n	8002c16 <__ssputs_r+0x46>
	...

08002c88 <_svfiprintf_r>:
 8002c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c8c:	4698      	mov	r8, r3
 8002c8e:	898b      	ldrh	r3, [r1, #12]
 8002c90:	4607      	mov	r7, r0
 8002c92:	061b      	lsls	r3, r3, #24
 8002c94:	460d      	mov	r5, r1
 8002c96:	4614      	mov	r4, r2
 8002c98:	b09d      	sub	sp, #116	; 0x74
 8002c9a:	d50e      	bpl.n	8002cba <_svfiprintf_r+0x32>
 8002c9c:	690b      	ldr	r3, [r1, #16]
 8002c9e:	b963      	cbnz	r3, 8002cba <_svfiprintf_r+0x32>
 8002ca0:	2140      	movs	r1, #64	; 0x40
 8002ca2:	f000 fb25 	bl	80032f0 <_malloc_r>
 8002ca6:	6028      	str	r0, [r5, #0]
 8002ca8:	6128      	str	r0, [r5, #16]
 8002caa:	b920      	cbnz	r0, 8002cb6 <_svfiprintf_r+0x2e>
 8002cac:	230c      	movs	r3, #12
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb4:	e0d1      	b.n	8002e5a <_svfiprintf_r+0x1d2>
 8002cb6:	2340      	movs	r3, #64	; 0x40
 8002cb8:	616b      	str	r3, [r5, #20]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cc4:	2330      	movs	r3, #48	; 0x30
 8002cc6:	f04f 0901 	mov.w	r9, #1
 8002cca:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002e74 <_svfiprintf_r+0x1ec>
 8002cd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cd6:	4623      	mov	r3, r4
 8002cd8:	469a      	mov	sl, r3
 8002cda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cde:	b10a      	cbz	r2, 8002ce4 <_svfiprintf_r+0x5c>
 8002ce0:	2a25      	cmp	r2, #37	; 0x25
 8002ce2:	d1f9      	bne.n	8002cd8 <_svfiprintf_r+0x50>
 8002ce4:	ebba 0b04 	subs.w	fp, sl, r4
 8002ce8:	d00b      	beq.n	8002d02 <_svfiprintf_r+0x7a>
 8002cea:	465b      	mov	r3, fp
 8002cec:	4622      	mov	r2, r4
 8002cee:	4629      	mov	r1, r5
 8002cf0:	4638      	mov	r0, r7
 8002cf2:	f7ff ff6d 	bl	8002bd0 <__ssputs_r>
 8002cf6:	3001      	adds	r0, #1
 8002cf8:	f000 80aa 	beq.w	8002e50 <_svfiprintf_r+0x1c8>
 8002cfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cfe:	445a      	add	r2, fp
 8002d00:	9209      	str	r2, [sp, #36]	; 0x24
 8002d02:	f89a 3000 	ldrb.w	r3, [sl]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80a2 	beq.w	8002e50 <_svfiprintf_r+0x1c8>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d16:	f10a 0a01 	add.w	sl, sl, #1
 8002d1a:	9304      	str	r3, [sp, #16]
 8002d1c:	9307      	str	r3, [sp, #28]
 8002d1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d22:	931a      	str	r3, [sp, #104]	; 0x68
 8002d24:	4654      	mov	r4, sl
 8002d26:	2205      	movs	r2, #5
 8002d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d2c:	4851      	ldr	r0, [pc, #324]	; (8002e74 <_svfiprintf_r+0x1ec>)
 8002d2e:	f000 fa41 	bl	80031b4 <memchr>
 8002d32:	9a04      	ldr	r2, [sp, #16]
 8002d34:	b9d8      	cbnz	r0, 8002d6e <_svfiprintf_r+0xe6>
 8002d36:	06d0      	lsls	r0, r2, #27
 8002d38:	bf44      	itt	mi
 8002d3a:	2320      	movmi	r3, #32
 8002d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d40:	0711      	lsls	r1, r2, #28
 8002d42:	bf44      	itt	mi
 8002d44:	232b      	movmi	r3, #43	; 0x2b
 8002d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d50:	d015      	beq.n	8002d7e <_svfiprintf_r+0xf6>
 8002d52:	4654      	mov	r4, sl
 8002d54:	2000      	movs	r0, #0
 8002d56:	f04f 0c0a 	mov.w	ip, #10
 8002d5a:	9a07      	ldr	r2, [sp, #28]
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d62:	3b30      	subs	r3, #48	; 0x30
 8002d64:	2b09      	cmp	r3, #9
 8002d66:	d94e      	bls.n	8002e06 <_svfiprintf_r+0x17e>
 8002d68:	b1b0      	cbz	r0, 8002d98 <_svfiprintf_r+0x110>
 8002d6a:	9207      	str	r2, [sp, #28]
 8002d6c:	e014      	b.n	8002d98 <_svfiprintf_r+0x110>
 8002d6e:	eba0 0308 	sub.w	r3, r0, r8
 8002d72:	fa09 f303 	lsl.w	r3, r9, r3
 8002d76:	4313      	orrs	r3, r2
 8002d78:	46a2      	mov	sl, r4
 8002d7a:	9304      	str	r3, [sp, #16]
 8002d7c:	e7d2      	b.n	8002d24 <_svfiprintf_r+0x9c>
 8002d7e:	9b03      	ldr	r3, [sp, #12]
 8002d80:	1d19      	adds	r1, r3, #4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	9103      	str	r1, [sp, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bfbb      	ittet	lt
 8002d8a:	425b      	neglt	r3, r3
 8002d8c:	f042 0202 	orrlt.w	r2, r2, #2
 8002d90:	9307      	strge	r3, [sp, #28]
 8002d92:	9307      	strlt	r3, [sp, #28]
 8002d94:	bfb8      	it	lt
 8002d96:	9204      	strlt	r2, [sp, #16]
 8002d98:	7823      	ldrb	r3, [r4, #0]
 8002d9a:	2b2e      	cmp	r3, #46	; 0x2e
 8002d9c:	d10c      	bne.n	8002db8 <_svfiprintf_r+0x130>
 8002d9e:	7863      	ldrb	r3, [r4, #1]
 8002da0:	2b2a      	cmp	r3, #42	; 0x2a
 8002da2:	d135      	bne.n	8002e10 <_svfiprintf_r+0x188>
 8002da4:	9b03      	ldr	r3, [sp, #12]
 8002da6:	3402      	adds	r4, #2
 8002da8:	1d1a      	adds	r2, r3, #4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	9203      	str	r2, [sp, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bfb8      	it	lt
 8002db2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002db6:	9305      	str	r3, [sp, #20]
 8002db8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002e78 <_svfiprintf_r+0x1f0>
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	4650      	mov	r0, sl
 8002dc0:	7821      	ldrb	r1, [r4, #0]
 8002dc2:	f000 f9f7 	bl	80031b4 <memchr>
 8002dc6:	b140      	cbz	r0, 8002dda <_svfiprintf_r+0x152>
 8002dc8:	2340      	movs	r3, #64	; 0x40
 8002dca:	eba0 000a 	sub.w	r0, r0, sl
 8002dce:	fa03 f000 	lsl.w	r0, r3, r0
 8002dd2:	9b04      	ldr	r3, [sp, #16]
 8002dd4:	3401      	adds	r4, #1
 8002dd6:	4303      	orrs	r3, r0
 8002dd8:	9304      	str	r3, [sp, #16]
 8002dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dde:	2206      	movs	r2, #6
 8002de0:	4826      	ldr	r0, [pc, #152]	; (8002e7c <_svfiprintf_r+0x1f4>)
 8002de2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002de6:	f000 f9e5 	bl	80031b4 <memchr>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d038      	beq.n	8002e60 <_svfiprintf_r+0x1d8>
 8002dee:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <_svfiprintf_r+0x1f8>)
 8002df0:	bb1b      	cbnz	r3, 8002e3a <_svfiprintf_r+0x1b2>
 8002df2:	9b03      	ldr	r3, [sp, #12]
 8002df4:	3307      	adds	r3, #7
 8002df6:	f023 0307 	bic.w	r3, r3, #7
 8002dfa:	3308      	adds	r3, #8
 8002dfc:	9303      	str	r3, [sp, #12]
 8002dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e00:	4433      	add	r3, r6
 8002e02:	9309      	str	r3, [sp, #36]	; 0x24
 8002e04:	e767      	b.n	8002cd6 <_svfiprintf_r+0x4e>
 8002e06:	460c      	mov	r4, r1
 8002e08:	2001      	movs	r0, #1
 8002e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e0e:	e7a5      	b.n	8002d5c <_svfiprintf_r+0xd4>
 8002e10:	2300      	movs	r3, #0
 8002e12:	f04f 0c0a 	mov.w	ip, #10
 8002e16:	4619      	mov	r1, r3
 8002e18:	3401      	adds	r4, #1
 8002e1a:	9305      	str	r3, [sp, #20]
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e22:	3a30      	subs	r2, #48	; 0x30
 8002e24:	2a09      	cmp	r2, #9
 8002e26:	d903      	bls.n	8002e30 <_svfiprintf_r+0x1a8>
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0c5      	beq.n	8002db8 <_svfiprintf_r+0x130>
 8002e2c:	9105      	str	r1, [sp, #20]
 8002e2e:	e7c3      	b.n	8002db8 <_svfiprintf_r+0x130>
 8002e30:	4604      	mov	r4, r0
 8002e32:	2301      	movs	r3, #1
 8002e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e38:	e7f0      	b.n	8002e1c <_svfiprintf_r+0x194>
 8002e3a:	ab03      	add	r3, sp, #12
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	462a      	mov	r2, r5
 8002e40:	4638      	mov	r0, r7
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <_svfiprintf_r+0x1fc>)
 8002e44:	a904      	add	r1, sp, #16
 8002e46:	f3af 8000 	nop.w
 8002e4a:	1c42      	adds	r2, r0, #1
 8002e4c:	4606      	mov	r6, r0
 8002e4e:	d1d6      	bne.n	8002dfe <_svfiprintf_r+0x176>
 8002e50:	89ab      	ldrh	r3, [r5, #12]
 8002e52:	065b      	lsls	r3, r3, #25
 8002e54:	f53f af2c 	bmi.w	8002cb0 <_svfiprintf_r+0x28>
 8002e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e5a:	b01d      	add	sp, #116	; 0x74
 8002e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e60:	ab03      	add	r3, sp, #12
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	462a      	mov	r2, r5
 8002e66:	4638      	mov	r0, r7
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <_svfiprintf_r+0x1fc>)
 8002e6a:	a904      	add	r1, sp, #16
 8002e6c:	f000 f87c 	bl	8002f68 <_printf_i>
 8002e70:	e7eb      	b.n	8002e4a <_svfiprintf_r+0x1c2>
 8002e72:	bf00      	nop
 8002e74:	080034f8 	.word	0x080034f8
 8002e78:	080034fe 	.word	0x080034fe
 8002e7c:	08003502 	.word	0x08003502
 8002e80:	00000000 	.word	0x00000000
 8002e84:	08002bd1 	.word	0x08002bd1

08002e88 <_printf_common>:
 8002e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e8c:	4616      	mov	r6, r2
 8002e8e:	4699      	mov	r9, r3
 8002e90:	688a      	ldr	r2, [r1, #8]
 8002e92:	690b      	ldr	r3, [r1, #16]
 8002e94:	4607      	mov	r7, r0
 8002e96:	4293      	cmp	r3, r2
 8002e98:	bfb8      	it	lt
 8002e9a:	4613      	movlt	r3, r2
 8002e9c:	6033      	str	r3, [r6, #0]
 8002e9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ea8:	b10a      	cbz	r2, 8002eae <_printf_common+0x26>
 8002eaa:	3301      	adds	r3, #1
 8002eac:	6033      	str	r3, [r6, #0]
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	0699      	lsls	r1, r3, #26
 8002eb2:	bf42      	ittt	mi
 8002eb4:	6833      	ldrmi	r3, [r6, #0]
 8002eb6:	3302      	addmi	r3, #2
 8002eb8:	6033      	strmi	r3, [r6, #0]
 8002eba:	6825      	ldr	r5, [r4, #0]
 8002ebc:	f015 0506 	ands.w	r5, r5, #6
 8002ec0:	d106      	bne.n	8002ed0 <_printf_common+0x48>
 8002ec2:	f104 0a19 	add.w	sl, r4, #25
 8002ec6:	68e3      	ldr	r3, [r4, #12]
 8002ec8:	6832      	ldr	r2, [r6, #0]
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	42ab      	cmp	r3, r5
 8002ece:	dc28      	bgt.n	8002f22 <_printf_common+0x9a>
 8002ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ed4:	1e13      	subs	r3, r2, #0
 8002ed6:	6822      	ldr	r2, [r4, #0]
 8002ed8:	bf18      	it	ne
 8002eda:	2301      	movne	r3, #1
 8002edc:	0692      	lsls	r2, r2, #26
 8002ede:	d42d      	bmi.n	8002f3c <_printf_common+0xb4>
 8002ee0:	4649      	mov	r1, r9
 8002ee2:	4638      	mov	r0, r7
 8002ee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ee8:	47c0      	blx	r8
 8002eea:	3001      	adds	r0, #1
 8002eec:	d020      	beq.n	8002f30 <_printf_common+0xa8>
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	68e5      	ldr	r5, [r4, #12]
 8002ef2:	f003 0306 	and.w	r3, r3, #6
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	bf18      	it	ne
 8002efa:	2500      	movne	r5, #0
 8002efc:	6832      	ldr	r2, [r6, #0]
 8002efe:	f04f 0600 	mov.w	r6, #0
 8002f02:	68a3      	ldr	r3, [r4, #8]
 8002f04:	bf08      	it	eq
 8002f06:	1aad      	subeq	r5, r5, r2
 8002f08:	6922      	ldr	r2, [r4, #16]
 8002f0a:	bf08      	it	eq
 8002f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bfc4      	itt	gt
 8002f14:	1a9b      	subgt	r3, r3, r2
 8002f16:	18ed      	addgt	r5, r5, r3
 8002f18:	341a      	adds	r4, #26
 8002f1a:	42b5      	cmp	r5, r6
 8002f1c:	d11a      	bne.n	8002f54 <_printf_common+0xcc>
 8002f1e:	2000      	movs	r0, #0
 8002f20:	e008      	b.n	8002f34 <_printf_common+0xac>
 8002f22:	2301      	movs	r3, #1
 8002f24:	4652      	mov	r2, sl
 8002f26:	4649      	mov	r1, r9
 8002f28:	4638      	mov	r0, r7
 8002f2a:	47c0      	blx	r8
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	d103      	bne.n	8002f38 <_printf_common+0xb0>
 8002f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f38:	3501      	adds	r5, #1
 8002f3a:	e7c4      	b.n	8002ec6 <_printf_common+0x3e>
 8002f3c:	2030      	movs	r0, #48	; 0x30
 8002f3e:	18e1      	adds	r1, r4, r3
 8002f40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f4a:	4422      	add	r2, r4
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f52:	e7c5      	b.n	8002ee0 <_printf_common+0x58>
 8002f54:	2301      	movs	r3, #1
 8002f56:	4622      	mov	r2, r4
 8002f58:	4649      	mov	r1, r9
 8002f5a:	4638      	mov	r0, r7
 8002f5c:	47c0      	blx	r8
 8002f5e:	3001      	adds	r0, #1
 8002f60:	d0e6      	beq.n	8002f30 <_printf_common+0xa8>
 8002f62:	3601      	adds	r6, #1
 8002f64:	e7d9      	b.n	8002f1a <_printf_common+0x92>
	...

08002f68 <_printf_i>:
 8002f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f6c:	7e0f      	ldrb	r7, [r1, #24]
 8002f6e:	4691      	mov	r9, r2
 8002f70:	2f78      	cmp	r7, #120	; 0x78
 8002f72:	4680      	mov	r8, r0
 8002f74:	460c      	mov	r4, r1
 8002f76:	469a      	mov	sl, r3
 8002f78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f7e:	d807      	bhi.n	8002f90 <_printf_i+0x28>
 8002f80:	2f62      	cmp	r7, #98	; 0x62
 8002f82:	d80a      	bhi.n	8002f9a <_printf_i+0x32>
 8002f84:	2f00      	cmp	r7, #0
 8002f86:	f000 80d9 	beq.w	800313c <_printf_i+0x1d4>
 8002f8a:	2f58      	cmp	r7, #88	; 0x58
 8002f8c:	f000 80a4 	beq.w	80030d8 <_printf_i+0x170>
 8002f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f98:	e03a      	b.n	8003010 <_printf_i+0xa8>
 8002f9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f9e:	2b15      	cmp	r3, #21
 8002fa0:	d8f6      	bhi.n	8002f90 <_printf_i+0x28>
 8002fa2:	a101      	add	r1, pc, #4	; (adr r1, 8002fa8 <_printf_i+0x40>)
 8002fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fa8:	08003001 	.word	0x08003001
 8002fac:	08003015 	.word	0x08003015
 8002fb0:	08002f91 	.word	0x08002f91
 8002fb4:	08002f91 	.word	0x08002f91
 8002fb8:	08002f91 	.word	0x08002f91
 8002fbc:	08002f91 	.word	0x08002f91
 8002fc0:	08003015 	.word	0x08003015
 8002fc4:	08002f91 	.word	0x08002f91
 8002fc8:	08002f91 	.word	0x08002f91
 8002fcc:	08002f91 	.word	0x08002f91
 8002fd0:	08002f91 	.word	0x08002f91
 8002fd4:	08003123 	.word	0x08003123
 8002fd8:	08003045 	.word	0x08003045
 8002fdc:	08003105 	.word	0x08003105
 8002fe0:	08002f91 	.word	0x08002f91
 8002fe4:	08002f91 	.word	0x08002f91
 8002fe8:	08003145 	.word	0x08003145
 8002fec:	08002f91 	.word	0x08002f91
 8002ff0:	08003045 	.word	0x08003045
 8002ff4:	08002f91 	.word	0x08002f91
 8002ff8:	08002f91 	.word	0x08002f91
 8002ffc:	0800310d 	.word	0x0800310d
 8003000:	682b      	ldr	r3, [r5, #0]
 8003002:	1d1a      	adds	r2, r3, #4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	602a      	str	r2, [r5, #0]
 8003008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800300c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003010:	2301      	movs	r3, #1
 8003012:	e0a4      	b.n	800315e <_printf_i+0x1f6>
 8003014:	6820      	ldr	r0, [r4, #0]
 8003016:	6829      	ldr	r1, [r5, #0]
 8003018:	0606      	lsls	r6, r0, #24
 800301a:	f101 0304 	add.w	r3, r1, #4
 800301e:	d50a      	bpl.n	8003036 <_printf_i+0xce>
 8003020:	680e      	ldr	r6, [r1, #0]
 8003022:	602b      	str	r3, [r5, #0]
 8003024:	2e00      	cmp	r6, #0
 8003026:	da03      	bge.n	8003030 <_printf_i+0xc8>
 8003028:	232d      	movs	r3, #45	; 0x2d
 800302a:	4276      	negs	r6, r6
 800302c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003030:	230a      	movs	r3, #10
 8003032:	485e      	ldr	r0, [pc, #376]	; (80031ac <_printf_i+0x244>)
 8003034:	e019      	b.n	800306a <_printf_i+0x102>
 8003036:	680e      	ldr	r6, [r1, #0]
 8003038:	f010 0f40 	tst.w	r0, #64	; 0x40
 800303c:	602b      	str	r3, [r5, #0]
 800303e:	bf18      	it	ne
 8003040:	b236      	sxthne	r6, r6
 8003042:	e7ef      	b.n	8003024 <_printf_i+0xbc>
 8003044:	682b      	ldr	r3, [r5, #0]
 8003046:	6820      	ldr	r0, [r4, #0]
 8003048:	1d19      	adds	r1, r3, #4
 800304a:	6029      	str	r1, [r5, #0]
 800304c:	0601      	lsls	r1, r0, #24
 800304e:	d501      	bpl.n	8003054 <_printf_i+0xec>
 8003050:	681e      	ldr	r6, [r3, #0]
 8003052:	e002      	b.n	800305a <_printf_i+0xf2>
 8003054:	0646      	lsls	r6, r0, #25
 8003056:	d5fb      	bpl.n	8003050 <_printf_i+0xe8>
 8003058:	881e      	ldrh	r6, [r3, #0]
 800305a:	2f6f      	cmp	r7, #111	; 0x6f
 800305c:	bf0c      	ite	eq
 800305e:	2308      	moveq	r3, #8
 8003060:	230a      	movne	r3, #10
 8003062:	4852      	ldr	r0, [pc, #328]	; (80031ac <_printf_i+0x244>)
 8003064:	2100      	movs	r1, #0
 8003066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800306a:	6865      	ldr	r5, [r4, #4]
 800306c:	2d00      	cmp	r5, #0
 800306e:	bfa8      	it	ge
 8003070:	6821      	ldrge	r1, [r4, #0]
 8003072:	60a5      	str	r5, [r4, #8]
 8003074:	bfa4      	itt	ge
 8003076:	f021 0104 	bicge.w	r1, r1, #4
 800307a:	6021      	strge	r1, [r4, #0]
 800307c:	b90e      	cbnz	r6, 8003082 <_printf_i+0x11a>
 800307e:	2d00      	cmp	r5, #0
 8003080:	d04d      	beq.n	800311e <_printf_i+0x1b6>
 8003082:	4615      	mov	r5, r2
 8003084:	fbb6 f1f3 	udiv	r1, r6, r3
 8003088:	fb03 6711 	mls	r7, r3, r1, r6
 800308c:	5dc7      	ldrb	r7, [r0, r7]
 800308e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003092:	4637      	mov	r7, r6
 8003094:	42bb      	cmp	r3, r7
 8003096:	460e      	mov	r6, r1
 8003098:	d9f4      	bls.n	8003084 <_printf_i+0x11c>
 800309a:	2b08      	cmp	r3, #8
 800309c:	d10b      	bne.n	80030b6 <_printf_i+0x14e>
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	07de      	lsls	r6, r3, #31
 80030a2:	d508      	bpl.n	80030b6 <_printf_i+0x14e>
 80030a4:	6923      	ldr	r3, [r4, #16]
 80030a6:	6861      	ldr	r1, [r4, #4]
 80030a8:	4299      	cmp	r1, r3
 80030aa:	bfde      	ittt	le
 80030ac:	2330      	movle	r3, #48	; 0x30
 80030ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030b2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80030b6:	1b52      	subs	r2, r2, r5
 80030b8:	6122      	str	r2, [r4, #16]
 80030ba:	464b      	mov	r3, r9
 80030bc:	4621      	mov	r1, r4
 80030be:	4640      	mov	r0, r8
 80030c0:	f8cd a000 	str.w	sl, [sp]
 80030c4:	aa03      	add	r2, sp, #12
 80030c6:	f7ff fedf 	bl	8002e88 <_printf_common>
 80030ca:	3001      	adds	r0, #1
 80030cc:	d14c      	bne.n	8003168 <_printf_i+0x200>
 80030ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030d2:	b004      	add	sp, #16
 80030d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d8:	4834      	ldr	r0, [pc, #208]	; (80031ac <_printf_i+0x244>)
 80030da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80030de:	6829      	ldr	r1, [r5, #0]
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80030e6:	6029      	str	r1, [r5, #0]
 80030e8:	061d      	lsls	r5, r3, #24
 80030ea:	d514      	bpl.n	8003116 <_printf_i+0x1ae>
 80030ec:	07df      	lsls	r7, r3, #31
 80030ee:	bf44      	itt	mi
 80030f0:	f043 0320 	orrmi.w	r3, r3, #32
 80030f4:	6023      	strmi	r3, [r4, #0]
 80030f6:	b91e      	cbnz	r6, 8003100 <_printf_i+0x198>
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	f023 0320 	bic.w	r3, r3, #32
 80030fe:	6023      	str	r3, [r4, #0]
 8003100:	2310      	movs	r3, #16
 8003102:	e7af      	b.n	8003064 <_printf_i+0xfc>
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	f043 0320 	orr.w	r3, r3, #32
 800310a:	6023      	str	r3, [r4, #0]
 800310c:	2378      	movs	r3, #120	; 0x78
 800310e:	4828      	ldr	r0, [pc, #160]	; (80031b0 <_printf_i+0x248>)
 8003110:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003114:	e7e3      	b.n	80030de <_printf_i+0x176>
 8003116:	0659      	lsls	r1, r3, #25
 8003118:	bf48      	it	mi
 800311a:	b2b6      	uxthmi	r6, r6
 800311c:	e7e6      	b.n	80030ec <_printf_i+0x184>
 800311e:	4615      	mov	r5, r2
 8003120:	e7bb      	b.n	800309a <_printf_i+0x132>
 8003122:	682b      	ldr	r3, [r5, #0]
 8003124:	6826      	ldr	r6, [r4, #0]
 8003126:	1d18      	adds	r0, r3, #4
 8003128:	6961      	ldr	r1, [r4, #20]
 800312a:	6028      	str	r0, [r5, #0]
 800312c:	0635      	lsls	r5, r6, #24
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	d501      	bpl.n	8003136 <_printf_i+0x1ce>
 8003132:	6019      	str	r1, [r3, #0]
 8003134:	e002      	b.n	800313c <_printf_i+0x1d4>
 8003136:	0670      	lsls	r0, r6, #25
 8003138:	d5fb      	bpl.n	8003132 <_printf_i+0x1ca>
 800313a:	8019      	strh	r1, [r3, #0]
 800313c:	2300      	movs	r3, #0
 800313e:	4615      	mov	r5, r2
 8003140:	6123      	str	r3, [r4, #16]
 8003142:	e7ba      	b.n	80030ba <_printf_i+0x152>
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	2100      	movs	r1, #0
 8003148:	1d1a      	adds	r2, r3, #4
 800314a:	602a      	str	r2, [r5, #0]
 800314c:	681d      	ldr	r5, [r3, #0]
 800314e:	6862      	ldr	r2, [r4, #4]
 8003150:	4628      	mov	r0, r5
 8003152:	f000 f82f 	bl	80031b4 <memchr>
 8003156:	b108      	cbz	r0, 800315c <_printf_i+0x1f4>
 8003158:	1b40      	subs	r0, r0, r5
 800315a:	6060      	str	r0, [r4, #4]
 800315c:	6863      	ldr	r3, [r4, #4]
 800315e:	6123      	str	r3, [r4, #16]
 8003160:	2300      	movs	r3, #0
 8003162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003166:	e7a8      	b.n	80030ba <_printf_i+0x152>
 8003168:	462a      	mov	r2, r5
 800316a:	4649      	mov	r1, r9
 800316c:	4640      	mov	r0, r8
 800316e:	6923      	ldr	r3, [r4, #16]
 8003170:	47d0      	blx	sl
 8003172:	3001      	adds	r0, #1
 8003174:	d0ab      	beq.n	80030ce <_printf_i+0x166>
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	079b      	lsls	r3, r3, #30
 800317a:	d413      	bmi.n	80031a4 <_printf_i+0x23c>
 800317c:	68e0      	ldr	r0, [r4, #12]
 800317e:	9b03      	ldr	r3, [sp, #12]
 8003180:	4298      	cmp	r0, r3
 8003182:	bfb8      	it	lt
 8003184:	4618      	movlt	r0, r3
 8003186:	e7a4      	b.n	80030d2 <_printf_i+0x16a>
 8003188:	2301      	movs	r3, #1
 800318a:	4632      	mov	r2, r6
 800318c:	4649      	mov	r1, r9
 800318e:	4640      	mov	r0, r8
 8003190:	47d0      	blx	sl
 8003192:	3001      	adds	r0, #1
 8003194:	d09b      	beq.n	80030ce <_printf_i+0x166>
 8003196:	3501      	adds	r5, #1
 8003198:	68e3      	ldr	r3, [r4, #12]
 800319a:	9903      	ldr	r1, [sp, #12]
 800319c:	1a5b      	subs	r3, r3, r1
 800319e:	42ab      	cmp	r3, r5
 80031a0:	dcf2      	bgt.n	8003188 <_printf_i+0x220>
 80031a2:	e7eb      	b.n	800317c <_printf_i+0x214>
 80031a4:	2500      	movs	r5, #0
 80031a6:	f104 0619 	add.w	r6, r4, #25
 80031aa:	e7f5      	b.n	8003198 <_printf_i+0x230>
 80031ac:	08003509 	.word	0x08003509
 80031b0:	0800351a 	.word	0x0800351a

080031b4 <memchr>:
 80031b4:	4603      	mov	r3, r0
 80031b6:	b510      	push	{r4, lr}
 80031b8:	b2c9      	uxtb	r1, r1
 80031ba:	4402      	add	r2, r0
 80031bc:	4293      	cmp	r3, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	d101      	bne.n	80031c6 <memchr+0x12>
 80031c2:	2000      	movs	r0, #0
 80031c4:	e003      	b.n	80031ce <memchr+0x1a>
 80031c6:	7804      	ldrb	r4, [r0, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	428c      	cmp	r4, r1
 80031cc:	d1f6      	bne.n	80031bc <memchr+0x8>
 80031ce:	bd10      	pop	{r4, pc}

080031d0 <memcpy>:
 80031d0:	440a      	add	r2, r1
 80031d2:	4291      	cmp	r1, r2
 80031d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80031d8:	d100      	bne.n	80031dc <memcpy+0xc>
 80031da:	4770      	bx	lr
 80031dc:	b510      	push	{r4, lr}
 80031de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031e2:	4291      	cmp	r1, r2
 80031e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031e8:	d1f9      	bne.n	80031de <memcpy+0xe>
 80031ea:	bd10      	pop	{r4, pc}

080031ec <memmove>:
 80031ec:	4288      	cmp	r0, r1
 80031ee:	b510      	push	{r4, lr}
 80031f0:	eb01 0402 	add.w	r4, r1, r2
 80031f4:	d902      	bls.n	80031fc <memmove+0x10>
 80031f6:	4284      	cmp	r4, r0
 80031f8:	4623      	mov	r3, r4
 80031fa:	d807      	bhi.n	800320c <memmove+0x20>
 80031fc:	1e43      	subs	r3, r0, #1
 80031fe:	42a1      	cmp	r1, r4
 8003200:	d008      	beq.n	8003214 <memmove+0x28>
 8003202:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003206:	f803 2f01 	strb.w	r2, [r3, #1]!
 800320a:	e7f8      	b.n	80031fe <memmove+0x12>
 800320c:	4601      	mov	r1, r0
 800320e:	4402      	add	r2, r0
 8003210:	428a      	cmp	r2, r1
 8003212:	d100      	bne.n	8003216 <memmove+0x2a>
 8003214:	bd10      	pop	{r4, pc}
 8003216:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800321a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800321e:	e7f7      	b.n	8003210 <memmove+0x24>

08003220 <_free_r>:
 8003220:	b538      	push	{r3, r4, r5, lr}
 8003222:	4605      	mov	r5, r0
 8003224:	2900      	cmp	r1, #0
 8003226:	d040      	beq.n	80032aa <_free_r+0x8a>
 8003228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800322c:	1f0c      	subs	r4, r1, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	bfb8      	it	lt
 8003232:	18e4      	addlt	r4, r4, r3
 8003234:	f000 f910 	bl	8003458 <__malloc_lock>
 8003238:	4a1c      	ldr	r2, [pc, #112]	; (80032ac <_free_r+0x8c>)
 800323a:	6813      	ldr	r3, [r2, #0]
 800323c:	b933      	cbnz	r3, 800324c <_free_r+0x2c>
 800323e:	6063      	str	r3, [r4, #4]
 8003240:	6014      	str	r4, [r2, #0]
 8003242:	4628      	mov	r0, r5
 8003244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003248:	f000 b90c 	b.w	8003464 <__malloc_unlock>
 800324c:	42a3      	cmp	r3, r4
 800324e:	d908      	bls.n	8003262 <_free_r+0x42>
 8003250:	6820      	ldr	r0, [r4, #0]
 8003252:	1821      	adds	r1, r4, r0
 8003254:	428b      	cmp	r3, r1
 8003256:	bf01      	itttt	eq
 8003258:	6819      	ldreq	r1, [r3, #0]
 800325a:	685b      	ldreq	r3, [r3, #4]
 800325c:	1809      	addeq	r1, r1, r0
 800325e:	6021      	streq	r1, [r4, #0]
 8003260:	e7ed      	b.n	800323e <_free_r+0x1e>
 8003262:	461a      	mov	r2, r3
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	b10b      	cbz	r3, 800326c <_free_r+0x4c>
 8003268:	42a3      	cmp	r3, r4
 800326a:	d9fa      	bls.n	8003262 <_free_r+0x42>
 800326c:	6811      	ldr	r1, [r2, #0]
 800326e:	1850      	adds	r0, r2, r1
 8003270:	42a0      	cmp	r0, r4
 8003272:	d10b      	bne.n	800328c <_free_r+0x6c>
 8003274:	6820      	ldr	r0, [r4, #0]
 8003276:	4401      	add	r1, r0
 8003278:	1850      	adds	r0, r2, r1
 800327a:	4283      	cmp	r3, r0
 800327c:	6011      	str	r1, [r2, #0]
 800327e:	d1e0      	bne.n	8003242 <_free_r+0x22>
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4401      	add	r1, r0
 8003286:	6011      	str	r1, [r2, #0]
 8003288:	6053      	str	r3, [r2, #4]
 800328a:	e7da      	b.n	8003242 <_free_r+0x22>
 800328c:	d902      	bls.n	8003294 <_free_r+0x74>
 800328e:	230c      	movs	r3, #12
 8003290:	602b      	str	r3, [r5, #0]
 8003292:	e7d6      	b.n	8003242 <_free_r+0x22>
 8003294:	6820      	ldr	r0, [r4, #0]
 8003296:	1821      	adds	r1, r4, r0
 8003298:	428b      	cmp	r3, r1
 800329a:	bf01      	itttt	eq
 800329c:	6819      	ldreq	r1, [r3, #0]
 800329e:	685b      	ldreq	r3, [r3, #4]
 80032a0:	1809      	addeq	r1, r1, r0
 80032a2:	6021      	streq	r1, [r4, #0]
 80032a4:	6063      	str	r3, [r4, #4]
 80032a6:	6054      	str	r4, [r2, #4]
 80032a8:	e7cb      	b.n	8003242 <_free_r+0x22>
 80032aa:	bd38      	pop	{r3, r4, r5, pc}
 80032ac:	200000ec 	.word	0x200000ec

080032b0 <sbrk_aligned>:
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	4e0e      	ldr	r6, [pc, #56]	; (80032ec <sbrk_aligned+0x3c>)
 80032b4:	460c      	mov	r4, r1
 80032b6:	6831      	ldr	r1, [r6, #0]
 80032b8:	4605      	mov	r5, r0
 80032ba:	b911      	cbnz	r1, 80032c2 <sbrk_aligned+0x12>
 80032bc:	f000 f8bc 	bl	8003438 <_sbrk_r>
 80032c0:	6030      	str	r0, [r6, #0]
 80032c2:	4621      	mov	r1, r4
 80032c4:	4628      	mov	r0, r5
 80032c6:	f000 f8b7 	bl	8003438 <_sbrk_r>
 80032ca:	1c43      	adds	r3, r0, #1
 80032cc:	d00a      	beq.n	80032e4 <sbrk_aligned+0x34>
 80032ce:	1cc4      	adds	r4, r0, #3
 80032d0:	f024 0403 	bic.w	r4, r4, #3
 80032d4:	42a0      	cmp	r0, r4
 80032d6:	d007      	beq.n	80032e8 <sbrk_aligned+0x38>
 80032d8:	1a21      	subs	r1, r4, r0
 80032da:	4628      	mov	r0, r5
 80032dc:	f000 f8ac 	bl	8003438 <_sbrk_r>
 80032e0:	3001      	adds	r0, #1
 80032e2:	d101      	bne.n	80032e8 <sbrk_aligned+0x38>
 80032e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80032e8:	4620      	mov	r0, r4
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
 80032ec:	200000f0 	.word	0x200000f0

080032f0 <_malloc_r>:
 80032f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032f4:	1ccd      	adds	r5, r1, #3
 80032f6:	f025 0503 	bic.w	r5, r5, #3
 80032fa:	3508      	adds	r5, #8
 80032fc:	2d0c      	cmp	r5, #12
 80032fe:	bf38      	it	cc
 8003300:	250c      	movcc	r5, #12
 8003302:	2d00      	cmp	r5, #0
 8003304:	4607      	mov	r7, r0
 8003306:	db01      	blt.n	800330c <_malloc_r+0x1c>
 8003308:	42a9      	cmp	r1, r5
 800330a:	d905      	bls.n	8003318 <_malloc_r+0x28>
 800330c:	230c      	movs	r3, #12
 800330e:	2600      	movs	r6, #0
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	4630      	mov	r0, r6
 8003314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003318:	4e2e      	ldr	r6, [pc, #184]	; (80033d4 <_malloc_r+0xe4>)
 800331a:	f000 f89d 	bl	8003458 <__malloc_lock>
 800331e:	6833      	ldr	r3, [r6, #0]
 8003320:	461c      	mov	r4, r3
 8003322:	bb34      	cbnz	r4, 8003372 <_malloc_r+0x82>
 8003324:	4629      	mov	r1, r5
 8003326:	4638      	mov	r0, r7
 8003328:	f7ff ffc2 	bl	80032b0 <sbrk_aligned>
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	4604      	mov	r4, r0
 8003330:	d14d      	bne.n	80033ce <_malloc_r+0xde>
 8003332:	6834      	ldr	r4, [r6, #0]
 8003334:	4626      	mov	r6, r4
 8003336:	2e00      	cmp	r6, #0
 8003338:	d140      	bne.n	80033bc <_malloc_r+0xcc>
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	4631      	mov	r1, r6
 800333e:	4638      	mov	r0, r7
 8003340:	eb04 0803 	add.w	r8, r4, r3
 8003344:	f000 f878 	bl	8003438 <_sbrk_r>
 8003348:	4580      	cmp	r8, r0
 800334a:	d13a      	bne.n	80033c2 <_malloc_r+0xd2>
 800334c:	6821      	ldr	r1, [r4, #0]
 800334e:	3503      	adds	r5, #3
 8003350:	1a6d      	subs	r5, r5, r1
 8003352:	f025 0503 	bic.w	r5, r5, #3
 8003356:	3508      	adds	r5, #8
 8003358:	2d0c      	cmp	r5, #12
 800335a:	bf38      	it	cc
 800335c:	250c      	movcc	r5, #12
 800335e:	4638      	mov	r0, r7
 8003360:	4629      	mov	r1, r5
 8003362:	f7ff ffa5 	bl	80032b0 <sbrk_aligned>
 8003366:	3001      	adds	r0, #1
 8003368:	d02b      	beq.n	80033c2 <_malloc_r+0xd2>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	442b      	add	r3, r5
 800336e:	6023      	str	r3, [r4, #0]
 8003370:	e00e      	b.n	8003390 <_malloc_r+0xa0>
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	1b52      	subs	r2, r2, r5
 8003376:	d41e      	bmi.n	80033b6 <_malloc_r+0xc6>
 8003378:	2a0b      	cmp	r2, #11
 800337a:	d916      	bls.n	80033aa <_malloc_r+0xba>
 800337c:	1961      	adds	r1, r4, r5
 800337e:	42a3      	cmp	r3, r4
 8003380:	6025      	str	r5, [r4, #0]
 8003382:	bf18      	it	ne
 8003384:	6059      	strne	r1, [r3, #4]
 8003386:	6863      	ldr	r3, [r4, #4]
 8003388:	bf08      	it	eq
 800338a:	6031      	streq	r1, [r6, #0]
 800338c:	5162      	str	r2, [r4, r5]
 800338e:	604b      	str	r3, [r1, #4]
 8003390:	4638      	mov	r0, r7
 8003392:	f104 060b 	add.w	r6, r4, #11
 8003396:	f000 f865 	bl	8003464 <__malloc_unlock>
 800339a:	f026 0607 	bic.w	r6, r6, #7
 800339e:	1d23      	adds	r3, r4, #4
 80033a0:	1af2      	subs	r2, r6, r3
 80033a2:	d0b6      	beq.n	8003312 <_malloc_r+0x22>
 80033a4:	1b9b      	subs	r3, r3, r6
 80033a6:	50a3      	str	r3, [r4, r2]
 80033a8:	e7b3      	b.n	8003312 <_malloc_r+0x22>
 80033aa:	6862      	ldr	r2, [r4, #4]
 80033ac:	42a3      	cmp	r3, r4
 80033ae:	bf0c      	ite	eq
 80033b0:	6032      	streq	r2, [r6, #0]
 80033b2:	605a      	strne	r2, [r3, #4]
 80033b4:	e7ec      	b.n	8003390 <_malloc_r+0xa0>
 80033b6:	4623      	mov	r3, r4
 80033b8:	6864      	ldr	r4, [r4, #4]
 80033ba:	e7b2      	b.n	8003322 <_malloc_r+0x32>
 80033bc:	4634      	mov	r4, r6
 80033be:	6876      	ldr	r6, [r6, #4]
 80033c0:	e7b9      	b.n	8003336 <_malloc_r+0x46>
 80033c2:	230c      	movs	r3, #12
 80033c4:	4638      	mov	r0, r7
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	f000 f84c 	bl	8003464 <__malloc_unlock>
 80033cc:	e7a1      	b.n	8003312 <_malloc_r+0x22>
 80033ce:	6025      	str	r5, [r4, #0]
 80033d0:	e7de      	b.n	8003390 <_malloc_r+0xa0>
 80033d2:	bf00      	nop
 80033d4:	200000ec 	.word	0x200000ec

080033d8 <_realloc_r>:
 80033d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033dc:	4680      	mov	r8, r0
 80033de:	4614      	mov	r4, r2
 80033e0:	460e      	mov	r6, r1
 80033e2:	b921      	cbnz	r1, 80033ee <_realloc_r+0x16>
 80033e4:	4611      	mov	r1, r2
 80033e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033ea:	f7ff bf81 	b.w	80032f0 <_malloc_r>
 80033ee:	b92a      	cbnz	r2, 80033fc <_realloc_r+0x24>
 80033f0:	f7ff ff16 	bl	8003220 <_free_r>
 80033f4:	4625      	mov	r5, r4
 80033f6:	4628      	mov	r0, r5
 80033f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033fc:	f000 f838 	bl	8003470 <_malloc_usable_size_r>
 8003400:	4284      	cmp	r4, r0
 8003402:	4607      	mov	r7, r0
 8003404:	d802      	bhi.n	800340c <_realloc_r+0x34>
 8003406:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800340a:	d812      	bhi.n	8003432 <_realloc_r+0x5a>
 800340c:	4621      	mov	r1, r4
 800340e:	4640      	mov	r0, r8
 8003410:	f7ff ff6e 	bl	80032f0 <_malloc_r>
 8003414:	4605      	mov	r5, r0
 8003416:	2800      	cmp	r0, #0
 8003418:	d0ed      	beq.n	80033f6 <_realloc_r+0x1e>
 800341a:	42bc      	cmp	r4, r7
 800341c:	4622      	mov	r2, r4
 800341e:	4631      	mov	r1, r6
 8003420:	bf28      	it	cs
 8003422:	463a      	movcs	r2, r7
 8003424:	f7ff fed4 	bl	80031d0 <memcpy>
 8003428:	4631      	mov	r1, r6
 800342a:	4640      	mov	r0, r8
 800342c:	f7ff fef8 	bl	8003220 <_free_r>
 8003430:	e7e1      	b.n	80033f6 <_realloc_r+0x1e>
 8003432:	4635      	mov	r5, r6
 8003434:	e7df      	b.n	80033f6 <_realloc_r+0x1e>
	...

08003438 <_sbrk_r>:
 8003438:	b538      	push	{r3, r4, r5, lr}
 800343a:	2300      	movs	r3, #0
 800343c:	4d05      	ldr	r5, [pc, #20]	; (8003454 <_sbrk_r+0x1c>)
 800343e:	4604      	mov	r4, r0
 8003440:	4608      	mov	r0, r1
 8003442:	602b      	str	r3, [r5, #0]
 8003444:	f7fd fccc 	bl	8000de0 <_sbrk>
 8003448:	1c43      	adds	r3, r0, #1
 800344a:	d102      	bne.n	8003452 <_sbrk_r+0x1a>
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	b103      	cbz	r3, 8003452 <_sbrk_r+0x1a>
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	200000f4 	.word	0x200000f4

08003458 <__malloc_lock>:
 8003458:	4801      	ldr	r0, [pc, #4]	; (8003460 <__malloc_lock+0x8>)
 800345a:	f000 b811 	b.w	8003480 <__retarget_lock_acquire_recursive>
 800345e:	bf00      	nop
 8003460:	200000f8 	.word	0x200000f8

08003464 <__malloc_unlock>:
 8003464:	4801      	ldr	r0, [pc, #4]	; (800346c <__malloc_unlock+0x8>)
 8003466:	f000 b80c 	b.w	8003482 <__retarget_lock_release_recursive>
 800346a:	bf00      	nop
 800346c:	200000f8 	.word	0x200000f8

08003470 <_malloc_usable_size_r>:
 8003470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003474:	1f18      	subs	r0, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	bfbc      	itt	lt
 800347a:	580b      	ldrlt	r3, [r1, r0]
 800347c:	18c0      	addlt	r0, r0, r3
 800347e:	4770      	bx	lr

08003480 <__retarget_lock_acquire_recursive>:
 8003480:	4770      	bx	lr

08003482 <__retarget_lock_release_recursive>:
 8003482:	4770      	bx	lr

08003484 <_init>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	bf00      	nop
 8003488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348a:	bc08      	pop	{r3}
 800348c:	469e      	mov	lr, r3
 800348e:	4770      	bx	lr

08003490 <_fini>:
 8003490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003492:	bf00      	nop
 8003494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003496:	bc08      	pop	{r3}
 8003498:	469e      	mov	lr, r3
 800349a:	4770      	bx	lr
