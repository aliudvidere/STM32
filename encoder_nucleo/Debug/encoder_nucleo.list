
encoder_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002780  08002780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a8  080027a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027a8  080027a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027a8  080027a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027ac  080027ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000010c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000118  20000118  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d00b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002302  00000000  00000000  0002d047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  0002f350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b18  00000000  00000000  0002ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c5fe  00000000  00000000  00030a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efff  00000000  00000000  0004d066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a413e  00000000  00000000  0005c065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001001a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000304c  00000000  00000000  001001f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002768 	.word	0x08002768

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002768 	.word	0x08002768

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000316:	4a13      	ldr	r2, [pc, #76]	; (8000364 <LL_SYSCFG_SetEXTISource+0x58>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	3302      	adds	r3, #2
 800031e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	0c1b      	lsrs	r3, r3, #16
 8000326:	43db      	mvns	r3, r3
 8000328:	ea02 0103 	and.w	r1, r2, r3
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	fa93 f3a3 	rbit	r3, r3
 8000338:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	fab3 f383 	clz	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	fa03 f202 	lsl.w	r2, r3, r2
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <LL_SYSCFG_SetEXTISource+0x58>)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	430a      	orrs	r2, r1
 8000352:	3302      	adds	r3, #2
 8000354:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40010000 	.word	0x40010000

08000368 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	fa93 f3a3 	rbit	r3, r3
 8000382:	613b      	str	r3, [r7, #16]
  return result;
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	fab3 f383 	clz	r3, r3
 800038a:	b2db      	uxtb	r3, r3
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	2103      	movs	r1, #3
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
 8000394:	43db      	mvns	r3, r3
 8000396:	401a      	ands	r2, r3
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	fa93 f3a3 	rbit	r3, r3
 80003a2:	61bb      	str	r3, [r7, #24]
  return result;
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	fab3 f383 	clz	r3, r3
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	6879      	ldr	r1, [r7, #4]
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	431a      	orrs	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	601a      	str	r2, [r3, #0]
}
 80003ba:	bf00      	nop
 80003bc:	3724      	adds	r7, #36	; 0x24
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b089      	sub	sp, #36	; 0x24
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	fa93 f3a3 	rbit	r3, r3
 80003e0:	613b      	str	r3, [r7, #16]
  return result;
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	fab3 f383 	clz	r3, r3
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	2103      	movs	r1, #3
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43db      	mvns	r3, r3
 80003f4:	401a      	ands	r2, r3
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	fa93 f3a3 	rbit	r3, r3
 8000400:	61bb      	str	r3, [r7, #24]
  return result;
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	fab3 f383 	clz	r3, r3
 8000408:	b2db      	uxtb	r3, r3
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	6879      	ldr	r1, [r7, #4]
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	431a      	orrs	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	60da      	str	r2, [r3, #12]
}
 8000418:	bf00      	nop
 800041a:	3724      	adds	r7, #36	; 0x24
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	683a      	ldr	r2, [r7, #0]
 8000432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08a      	sub	sp, #40	; 0x28
 8000444:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
 8000460:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000462:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000466:	f7ff ff39 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800046a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800046e:	f7ff ff35 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000472:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000476:	f7ff ff31 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, RES_Pin|RESA1_Pin|BLK_Pin|DC_Pin);
 800047a:	211b      	movs	r1, #27
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f7ff ffd0 	bl	8000424 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = RES_Pin|RESA1_Pin|BLK_Pin|DC_Pin;
 8000484:	231b      	movs	r3, #27
 8000486:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000488:	2301      	movs	r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000494:	2302      	movs	r3, #2
 8000496:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4619      	mov	r1, r3
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a0:	f002 f8be 	bl	8002620 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE1);
 80004a4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80004a8:	2001      	movs	r0, #1
 80004aa:	f7ff ff2f 	bl	800030c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_1, LL_GPIO_PULL_UP);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2102      	movs	r1, #2
 80004b2:	4817      	ldr	r0, [pc, #92]	; (8000510 <MX_GPIO_Init+0xd0>)
 80004b4:	f7ff ff87 	bl	80003c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_1, LL_GPIO_MODE_INPUT);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2102      	movs	r1, #2
 80004bc:	4814      	ldr	r0, [pc, #80]	; (8000510 <MX_GPIO_Init+0xd0>)
 80004be:	f7ff ff53 	bl	8000368 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80004ca:	2301      	movs	r3, #1
 80004cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80004d0:	2300      	movs	r3, #0
 80004d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80004d6:	2302      	movs	r3, #2
 80004d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80004dc:	f107 031c 	add.w	r3, r7, #28
 80004e0:	4618      	mov	r0, r3
 80004e2:	f001 fea5 	bl	8002230 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80004e6:	f7ff fe6f 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2200      	movs	r2, #0
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff febf 	bl	8000274 <NVIC_EncodePriority>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4619      	mov	r1, r3
 80004fa:	2007      	movs	r0, #7
 80004fc:	f7ff fe90 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8000500:	2007      	movs	r0, #7
 8000502:	f7ff fe6f 	bl	80001e4 <__NVIC_EnableIRQ>

}
 8000506:	bf00      	nop
 8000508:	3728      	adds	r7, #40	; 0x28
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	48000400 	.word	0x48000400

08000514 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <LL_RCC_HSI_Enable+0x1c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <LL_RCC_HSI_Enable+0x1c>)
 800051e:	f043 0301 	orr.w	r3, r3, #1
 8000522:	6013      	str	r3, [r2, #0]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000

08000534 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <LL_RCC_HSI_IsReady+0x20>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f003 0302 	and.w	r3, r3, #2
 8000540:	2b02      	cmp	r3, #2
 8000542:	bf0c      	ite	eq
 8000544:	2301      	moveq	r3, #1
 8000546:	2300      	movne	r3, #0
 8000548:	b2db      	uxtb	r3, r3
}
 800054a:	4618      	mov	r0, r3
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000

08000558 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	00db      	lsls	r3, r3, #3
 800056c:	4904      	ldr	r1, [pc, #16]	; (8000580 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800056e:	4313      	orrs	r3, r2
 8000570:	600b      	str	r3, [r1, #0]
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <LL_RCC_SetSysClkSource+0x24>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	f023 0203 	bic.w	r2, r3, #3
 8000594:	4904      	ldr	r1, [pc, #16]	; (80005a8 <LL_RCC_SetSysClkSource+0x24>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	604b      	str	r3, [r1, #4]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	40021000 	.word	0x40021000

080005ac <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <LL_RCC_GetSysClkSource+0x18>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	f003 030c 	and.w	r3, r3, #12
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <LL_RCC_SetAHBPrescaler+0x24>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80005d8:	4904      	ldr	r1, [pc, #16]	; (80005ec <LL_RCC_SetAHBPrescaler+0x24>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4313      	orrs	r3, r2
 80005de:	604b      	str	r3, [r1, #4]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	40021000 	.word	0x40021000

080005f0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000600:	4904      	ldr	r1, [pc, #16]	; (8000614 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4313      	orrs	r3, r2
 8000606:	604b      	str	r3, [r1, #4]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000

08000618 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000628:	4904      	ldr	r1, [pc, #16]	; (800063c <LL_RCC_SetAPB2Prescaler+0x24>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4313      	orrs	r3, r2
 800062e:	604b      	str	r3, [r1, #4]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40021000 	.word	0x40021000

08000640 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <LL_FLASH_SetLatency+0x24>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f023 0207 	bic.w	r2, r3, #7
 8000650:	4904      	ldr	r1, [pc, #16]	; (8000664 <LL_FLASH_SetLatency+0x24>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4313      	orrs	r3, r2
 8000656:	600b      	str	r3, [r1, #0]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	40022000 	.word	0x40022000

08000668 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <LL_FLASH_GetLatency+0x18>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f003 0307 	and.w	r3, r3, #7
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40022000 	.word	0x40022000

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fd15 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f849 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f7ff fed5 	bl	8000440 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000696:	f000 fc71 	bl	8000f7c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800069a:	f000 f881 	bl	80007a0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t number;
  extern uint8_t flag_change;
  number = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	817b      	strh	r3, [r7, #10]
  flag_change = 0;
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <main+0x9c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
  ST7789_Init(130, 131);
 80006a8:	2183      	movs	r1, #131	; 0x83
 80006aa:	2082      	movs	r0, #130	; 0x82
 80006ac:	f000 f8f8 	bl	80008a0 <ST7789_Init>
  ST7789_MemAccessModeSet(3, 0, 0, 1);
 80006b0:	2301      	movs	r3, #1
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	2003      	movs	r0, #3
 80006b8:	f000 f9b2 	bl	8000a20 <ST7789_MemAccessModeSet>
  ST7789_InversionMode(0);
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 fa0d 	bl	8000adc <ST7789_InversionMode>
  ST7789_SetBL(100);
 80006c2:	2064      	movs	r0, #100	; 0x64
 80006c4:	f000 fb5a 	bl	8000d7c <ST7789_SetBL>
//  ST7789_DrawRectangleFilled(10, 10+7, 40, 20+7, pink);
//  ST7789_DrawCircleFilled(25, 10, 5, RED);
//  char str_numb [10];
//  snprintf(str_numb, sizeof(str_numb), "%i", number);
//  ST7789_String(56, 100, str_numb, BLACK, WHITE);
uint16_t *im = {119, 103, 103, 109, 145, 143, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 132, 126, 125, 124, 136, 139, 138, 140, 140, 140, 144, 140, 138, 138, 138, 137, 138, 138, 138, 136, 139, 135, 112, 255, 255, 254, 255, 255, 255, 255,
 80006c8:	2377      	movs	r3, #119	; 0x77
 80006ca:	607b      	str	r3, [r7, #4]
		254, 255, 148, 70, 62, 51, 38, 33, 40, 42, 63, 72, 81, 75, 51, 35, 32, 32, 32, 32, 28, 28, 46, 78, 80, 64, 32, 29, 45, 53, 71, 63, 79, 81, 75, 82, 161, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
		255, 255, 255, 200, 172, 66, 54, 50, 35, 32, 44, 66, 78, 82, 77, 43, 29, 32, 32, 34, 49, 38, 42, 77, 71, 39, 38, 59, 77, 69, 57, 51, 69, 67, 67, 90, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
		255, 255, 254, 255, 255, 163, 74, 84, 38, 30, 30, 39, 62, 85, 81, 56, 37, 32, 31, 38, 73, 39, 40, 60, 39, 36, 52, 87, 90, 76, 76, 68, 55, 55, 66, 95, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
		254, 254, 255, 255, 254, 255, 124, 76, 74, 51, 43, 25, 27, 73, 76, 81, 43, 32, 32, 38, 68, 48, 38, 32, 35, 50, 68, 73, 84, 84, 80, 79, 74, 82, 78, 66, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
		254, 255, 255, 255, 255, 255, 255, 182, 65, 90, 79, 49, 40, 35, 40, 62, 29, 32, 32, 32, 38, 60, 38, 33, 39, 72, 80, 85, 91, 88, 85, 75, 81, 74, 78, 72, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254		};
uint16_t num = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	82fb      	strh	r3, [r7, #22]
  for (int i =0; i<50;i++){
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	e01f      	b.n	8000716 <main+0x92>
	  for (int j = 0; j < 50; j++){
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	e016      	b.n	800070a <main+0x86>
		  ST7789_DrawPixel(i, j, RGB565(0,0,im[num]));
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	b218      	sxth	r0, r3
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	b219      	sxth	r1, r3
 80006e4:	8afb      	ldrh	r3, [r7, #22]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	4413      	add	r3, r2
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	10db      	asrs	r3, r3, #3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	f003 031f 	and.w	r3, r3, #31
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	461a      	mov	r2, r3
 80006fa:	f000 fb71 	bl	8000de0 <ST7789_DrawPixel>
		  num++;
 80006fe:	8afb      	ldrh	r3, [r7, #22]
 8000700:	3301      	adds	r3, #1
 8000702:	82fb      	strh	r3, [r7, #22]
	  for (int j = 0; j < 50; j++){
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	3301      	adds	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2b31      	cmp	r3, #49	; 0x31
 800070e:	dde5      	ble.n	80006dc <main+0x58>
  for (int i =0; i<50;i++){
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	3301      	adds	r3, #1
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	2b31      	cmp	r3, #49	; 0x31
 800071a:	dddc      	ble.n	80006d6 <main+0x52>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071c:	e7fe      	b.n	800071c <main+0x98>
 800071e:	bf00      	nop
 8000720:	2000008e 	.word	0x2000008e

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff ff89 	bl	8000640 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800072e:	bf00      	nop
 8000730:	f7ff ff9a 	bl	8000668 <LL_FLASH_GetLatency>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1fa      	bne.n	8000730 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800073a:	f7ff feeb 	bl	8000514 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800073e:	bf00      	nop
 8000740:	f7ff fef8 	bl	8000534 <LL_RCC_HSI_IsReady>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	d1fa      	bne.n	8000740 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800074a:	2010      	movs	r0, #16
 800074c:	f7ff ff04 	bl	8000558 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff39 	bl	80005c8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff ff4a 	bl	80005f0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff ff5b 	bl	8000618 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff ff0e 	bl	8000584 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000768:	bf00      	nop
 800076a:	f7ff ff1f 	bl	80005ac <LL_RCC_GetSysClkSource>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d1fa      	bne.n	800076a <SystemClock_Config+0x46>
  {

  }
  LL_SetSystemCoreClock(8000000);
 8000774:	4806      	ldr	r0, [pc, #24]	; (8000790 <SystemClock_Config+0x6c>)
 8000776:	f001 ffc3 	bl	8002700 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800077a:	2000      	movs	r0, #0
 800077c:	f000 fcb2 	bl	80010e4 <HAL_InitTick>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000786:	f000 f805 	bl	8000794 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	007a1200 	.word	0x007a1200

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	e7fe      	b.n	800079c <Error_Handler+0x8>
	...

080007a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_SPI1_Init+0x74>)
 80007a6:	4a1c      	ldr	r2, [pc, #112]	; (8000818 <MX_SPI1_Init+0x78>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_SPI1_Init+0x74>)
 80007ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_SPI1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_SPI1_Init+0x74>)
 80007ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_SPI1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_SPI1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_SPI1_Init+0x74>)
 80007ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_SPI1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_SPI1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_SPI1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_SPI1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_SPI1_Init+0x74>)
 80007ee:	2207      	movs	r2, #7
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_SPI1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_SPI1_Init+0x74>)
 80007fa:	2208      	movs	r2, #8
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_SPI1_Init+0x74>)
 8000800:	f001 f80e 	bl	8001820 <HAL_SPI_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800080a:	f7ff ffc3 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000028 	.word	0x20000028
 8000818:	40013000 	.word	0x40013000

0800081c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a17      	ldr	r2, [pc, #92]	; (8000898 <HAL_SPI_MspInit+0x7c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d128      	bne.n	8000890 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_SPI_MspInit+0x80>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a16      	ldr	r2, [pc, #88]	; (800089c <HAL_SPI_MspInit+0x80>)
 8000844:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_SPI_MspInit+0x80>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_SPI_MspInit+0x80>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <HAL_SPI_MspInit+0x80>)
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	6153      	str	r3, [r2, #20]
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_SPI_MspInit+0x80>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800086e:	23e0      	movs	r3, #224	; 0xe0
 8000870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800087e:	2305      	movs	r3, #5
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 fd84 	bl	8001398 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40013000 	.word	0x40013000
 800089c:	40021000 	.word	0x40021000

080008a0 <ST7789_Init>:
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
};

void ST7789_Init(uint8_t Width, uint8_t Height)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	460a      	mov	r2, r1
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	4613      	mov	r3, r2
 80008ae:	71bb      	strb	r3, [r7, #6]
  ST7789_Width = Width;
 80008b0:	4a18      	ldr	r2, [pc, #96]	; (8000914 <ST7789_Init+0x74>)
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	7013      	strb	r3, [r2, #0]
  ST7789_Height = Height;
 80008b6:	4a18      	ldr	r2, [pc, #96]	; (8000918 <ST7789_Init+0x78>)
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	7013      	strb	r3, [r2, #0]
  
  ST7789_HardReset(); 
 80008bc:	f000 f82e 	bl	800091c <ST7789_HardReset>
  ST7789_SoftReset();
 80008c0:	f000 f842 	bl	8000948 <ST7789_SoftReset>
  ST7789_SleepModeExit();
 80008c4:	f000 f88e 	bl	80009e4 <ST7789_SleepModeExit>

  ST7789_ColorModeSet(ST7789_ColorMode_65K | ST7789_ColorMode_16bit);
 80008c8:	2055      	movs	r0, #85	; 0x55
 80008ca:	f000 f896 	bl	80009fa <ST7789_ColorModeSet>
  HAL_Delay(10);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f000 fc58 	bl	8001184 <HAL_Delay>
  ST7789_MemAccessModeSet(4, 1, 1, 0);
 80008d4:	2300      	movs	r3, #0
 80008d6:	2201      	movs	r2, #1
 80008d8:	2101      	movs	r1, #1
 80008da:	2004      	movs	r0, #4
 80008dc:	f000 f8a0 	bl	8000a20 <ST7789_MemAccessModeSet>
  HAL_Delay(10);
 80008e0:	200a      	movs	r0, #10
 80008e2:	f000 fc4f 	bl	8001184 <HAL_Delay>
  ST7789_InversionMode(1);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 f8f8 	bl	8000adc <ST7789_InversionMode>
  HAL_Delay(10);
 80008ec:	200a      	movs	r0, #10
 80008ee:	f000 fc49 	bl	8001184 <HAL_Delay>
  ST7789_FillScreen(0);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f000 f906 	bl	8000b04 <ST7789_FillScreen>
  ST7789_SetBL(10);
 80008f8:	200a      	movs	r0, #10
 80008fa:	f000 fa3f 	bl	8000d7c <ST7789_SetBL>
  ST7789_DisplayPower(1);
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 fa5a 	bl	8000db8 <ST7789_DisplayPower>
  HAL_Delay(100);
 8000904:	2064      	movs	r0, #100	; 0x64
 8000906:	f000 fc3d 	bl	8001184 <HAL_Delay>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000008c 	.word	0x2000008c
 8000918:	2000008d 	.word	0x2000008d

0800091c <ST7789_HardReset>:

void ST7789_HardReset(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2101      	movs	r1, #1
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f000 fea8 	bl	800167c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800092c:	200a      	movs	r0, #10
 800092e:	f000 fc29 	bl	8001184 <HAL_Delay>
  HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	2101      	movs	r1, #1
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f000 fe9f 	bl	800167c <HAL_GPIO_WritePin>
  HAL_Delay(150);
 800093e:	2096      	movs	r0, #150	; 0x96
 8000940:	f000 fc20 	bl	8001184 <HAL_Delay>
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <ST7789_SoftReset>:

void ST7789_SoftReset(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  ST7789_SendCmd(ST7789_Cmd_SWRESET);
 800094c:	2001      	movs	r0, #1
 800094e:	f000 f805 	bl	800095c <ST7789_SendCmd>
  HAL_Delay(130);
 8000952:	2082      	movs	r0, #130	; 0x82
 8000954:	f000 fc16 	bl	8001184 <HAL_Delay>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <ST7789_SendCmd>:

void ST7789_SendCmd(uint8_t Cmd)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2110      	movs	r1, #16
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f000 fe85 	bl	800167c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
	if (READ_BIT(SPI1->CR1, SPI_CR1_SPE) != (SPI_CR1_SPE)) SET_BIT(SPI1->CR1, SPI_CR1_SPE);
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <ST7789_SendCmd+0x3c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097a:	2b40      	cmp	r3, #64	; 0x40
 800097c:	d005      	beq.n	800098a <ST7789_SendCmd+0x2e>
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <ST7789_SendCmd+0x3c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <ST7789_SendCmd+0x3c>)
 8000984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000988:	6013      	str	r3, [r2, #0]
	*((__IO uint8_t *)&SPI1->DR) = Cmd;
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <ST7789_SendCmd+0x40>)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	7013      	strb	r3, [r2, #0]
  //HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40013000 	.word	0x40013000
 800099c:	4001300c 	.word	0x4001300c

080009a0 <ST7789_SendData>:

void ST7789_SendData(uint8_t Data)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2110      	movs	r1, #16
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f000 fe63 	bl	800167c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
  if (READ_BIT(SPI1->CR1, SPI_CR1_SPE) != (SPI_CR1_SPE)) SET_BIT(SPI1->CR1, SPI_CR1_SPE);
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <ST7789_SendData+0x3c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009be:	2b40      	cmp	r3, #64	; 0x40
 80009c0:	d005      	beq.n	80009ce <ST7789_SendData+0x2e>
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <ST7789_SendData+0x3c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <ST7789_SendData+0x3c>)
 80009c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009cc:	6013      	str	r3, [r2, #0]
	*((__IO uint8_t *)&SPI1->DR) = Data;
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <ST7789_SendData+0x40>)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	7013      	strb	r3, [r2, #0]
  //HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40013000 	.word	0x40013000
 80009e0:	4001300c 	.word	0x4001300c

080009e4 <ST7789_SleepModeExit>:
	ST7789_SendCmd(ST7789_Cmd_SLPIN);
  HAL_Delay(500);
}

void ST7789_SleepModeExit( void )
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	ST7789_SendCmd(ST7789_Cmd_SLPOUT);
 80009e8:	2011      	movs	r0, #17
 80009ea:	f7ff ffb7 	bl	800095c <ST7789_SendCmd>
  HAL_Delay(500);
 80009ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009f2:	f000 fbc7 	bl	8001184 <HAL_Delay>
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}

080009fa <ST7789_ColorModeSet>:


void ST7789_ColorModeSet(uint8_t ColorMode)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	71fb      	strb	r3, [r7, #7]
  ST7789_SendCmd(ST7789_Cmd_COLMOD);
 8000a04:	203a      	movs	r0, #58	; 0x3a
 8000a06:	f7ff ffa9 	bl	800095c <ST7789_SendCmd>
  ST7789_SendData(ColorMode & 0x77);  
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff ffc4 	bl	80009a0 <ST7789_SendData>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <ST7789_MemAccessModeSet>:

void ST7789_MemAccessModeSet(uint8_t Rotation, uint8_t VertMirror, uint8_t HorizMirror, uint8_t IsBGR)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4604      	mov	r4, r0
 8000a28:	4608      	mov	r0, r1
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4623      	mov	r3, r4
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	4603      	mov	r3, r0
 8000a34:	71bb      	strb	r3, [r7, #6]
 8000a36:	460b      	mov	r3, r1
 8000a38:	717b      	strb	r3, [r7, #5]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	713b      	strb	r3, [r7, #4]
  uint8_t Value;
  Rotation &= 7; 
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 0307 	and.w	r3, r3, #7
 8000a44:	71fb      	strb	r3, [r7, #7]

  ST7789_SendCmd(ST7789_Cmd_MADCTL);
 8000a46:	2036      	movs	r0, #54	; 0x36
 8000a48:	f7ff ff88 	bl	800095c <ST7789_SendCmd>
  
  switch (Rotation)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b07      	cmp	r3, #7
 8000a50:	d82a      	bhi.n	8000aa8 <ST7789_MemAccessModeSet+0x88>
 8000a52:	a201      	add	r2, pc, #4	; (adr r2, 8000a58 <ST7789_MemAccessModeSet+0x38>)
 8000a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a58:	08000a79 	.word	0x08000a79
 8000a5c:	08000a7f 	.word	0x08000a7f
 8000a60:	08000a85 	.word	0x08000a85
 8000a64:	08000a8b 	.word	0x08000a8b
 8000a68:	08000a91 	.word	0x08000a91
 8000a6c:	08000a97 	.word	0x08000a97
 8000a70:	08000a9d 	.word	0x08000a9d
 8000a74:	08000aa3 	.word	0x08000aa3
  {
  case 0:
    Value = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8000a7c:	e014      	b.n	8000aa8 <ST7789_MemAccessModeSet+0x88>
  case 1:
    Value = ST7789_MADCTL_MX;
 8000a7e:	2340      	movs	r3, #64	; 0x40
 8000a80:	73fb      	strb	r3, [r7, #15]
    break;
 8000a82:	e011      	b.n	8000aa8 <ST7789_MemAccessModeSet+0x88>
  case 2:
    Value = ST7789_MADCTL_MY;
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	73fb      	strb	r3, [r7, #15]
    break;
 8000a88:	e00e      	b.n	8000aa8 <ST7789_MemAccessModeSet+0x88>
  case 3:
    Value = ST7789_MADCTL_MX | ST7789_MADCTL_MY;
 8000a8a:	23c0      	movs	r3, #192	; 0xc0
 8000a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8000a8e:	e00b      	b.n	8000aa8 <ST7789_MemAccessModeSet+0x88>
  case 4:
    Value = ST7789_MADCTL_MV;
 8000a90:	2320      	movs	r3, #32
 8000a92:	73fb      	strb	r3, [r7, #15]
    break;
 8000a94:	e008      	b.n	8000aa8 <ST7789_MemAccessModeSet+0x88>
  case 5:
    Value = ST7789_MADCTL_MV | ST7789_MADCTL_MX;
 8000a96:	2360      	movs	r3, #96	; 0x60
 8000a98:	73fb      	strb	r3, [r7, #15]
    break;
 8000a9a:	e005      	b.n	8000aa8 <ST7789_MemAccessModeSet+0x88>
  case 6:
    Value = ST7789_MADCTL_MV | ST7789_MADCTL_MY;
 8000a9c:	23a0      	movs	r3, #160	; 0xa0
 8000a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8000aa0:	e002      	b.n	8000aa8 <ST7789_MemAccessModeSet+0x88>
  case 7:
    Value = ST7789_MADCTL_MV | ST7789_MADCTL_MX | ST7789_MADCTL_MY;
 8000aa2:	23e0      	movs	r3, #224	; 0xe0
 8000aa4:	73fb      	strb	r3, [r7, #15]
    break;
 8000aa6:	bf00      	nop
  }
  
  if (VertMirror)
 8000aa8:	79bb      	ldrb	r3, [r7, #6]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <ST7789_MemAccessModeSet+0x92>
    Value = ST7789_MADCTL_ML;
 8000aae:	2310      	movs	r3, #16
 8000ab0:	73fb      	strb	r3, [r7, #15]
  if (HorizMirror)
 8000ab2:	797b      	ldrb	r3, [r7, #5]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <ST7789_MemAccessModeSet+0x9c>
    Value = ST7789_MADCTL_MH;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	73fb      	strb	r3, [r7, #15]
  
  if (IsBGR)
 8000abc:	793b      	ldrb	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <ST7789_MemAccessModeSet+0xaa>
    Value |= ST7789_MADCTL_BGR;
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	73fb      	strb	r3, [r7, #15]
  
  ST7789_SendData(Value);
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff67 	bl	80009a0 <ST7789_SendData>
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd90      	pop	{r4, r7, pc}
 8000ada:	bf00      	nop

08000adc <ST7789_InversionMode>:

void ST7789_InversionMode(uint8_t Mode)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  if (Mode)
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <ST7789_InversionMode+0x18>
    ST7789_SendCmd(ST7789_Cmd_INVON);
 8000aec:	2021      	movs	r0, #33	; 0x21
 8000aee:	f7ff ff35 	bl	800095c <ST7789_SendCmd>
  else
    ST7789_SendCmd(ST7789_Cmd_INVOFF);
}
 8000af2:	e002      	b.n	8000afa <ST7789_InversionMode+0x1e>
    ST7789_SendCmd(ST7789_Cmd_INVOFF);
 8000af4:	2020      	movs	r0, #32
 8000af6:	f7ff ff31 	bl	800095c <ST7789_SendCmd>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <ST7789_FillScreen>:

void ST7789_FillScreen(uint16_t color)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	80fb      	strh	r3, [r7, #6]
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <ST7789_FillScreen+0x2c>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b21a      	sxth	r2, r3
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <ST7789_FillScreen+0x30>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b219      	sxth	r1, r3
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 f808 	bl	8000b38 <ST7789_FillRect>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2000008c 	.word	0x2000008c
 8000b34:	2000008d 	.word	0x2000008d

08000b38 <ST7789_FillRect>:

void ST7789_FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4604      	mov	r4, r0
 8000b40:	4608      	mov	r0, r1
 8000b42:	4611      	mov	r1, r2
 8000b44:	461a      	mov	r2, r3
 8000b46:	4623      	mov	r3, r4
 8000b48:	80fb      	strh	r3, [r7, #6]
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80bb      	strh	r3, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	807b      	strh	r3, [r7, #2]
 8000b52:	4613      	mov	r3, r2
 8000b54:	803b      	strh	r3, [r7, #0]
  if ((x >= ST7789_Width) || (y >= ST7789_Height)) return;
 8000b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b5a:	4a2d      	ldr	r2, [pc, #180]	; (8000c10 <ST7789_FillRect+0xd8>)
 8000b5c:	7812      	ldrb	r2, [r2, #0]
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	da52      	bge.n	8000c08 <ST7789_FillRect+0xd0>
 8000b62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b66:	4a2b      	ldr	r2, [pc, #172]	; (8000c14 <ST7789_FillRect+0xdc>)
 8000b68:	7812      	ldrb	r2, [r2, #0]
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	da4c      	bge.n	8000c08 <ST7789_FillRect+0xd0>
  if ((x + w) > ST7789_Width) w = ST7789_Width - x;
 8000b6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a25      	ldr	r2, [pc, #148]	; (8000c10 <ST7789_FillRect+0xd8>)
 8000b7a:	7812      	ldrb	r2, [r2, #0]
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	dd06      	ble.n	8000b8e <ST7789_FillRect+0x56>
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <ST7789_FillRect+0xd8>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	807b      	strh	r3, [r7, #2]
  if ((y + h) > ST7789_Height) h = ST7789_Height - y;
 8000b8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b92:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a1e      	ldr	r2, [pc, #120]	; (8000c14 <ST7789_FillRect+0xdc>)
 8000b9a:	7812      	ldrb	r2, [r2, #0]
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	dd06      	ble.n	8000bae <ST7789_FillRect+0x76>
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <ST7789_FillRect+0xdc>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	88bb      	ldrh	r3, [r7, #4]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	803b      	strh	r3, [r7, #0]
  ST7789_SetWindow(x, y, x + w - 1, y + h - 1);
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	b2d8      	uxtb	r0, r3
 8000bb2:	88bb      	ldrh	r3, [r7, #4]
 8000bb4:	b2d9      	uxtb	r1, r3
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	b2dc      	uxtb	r4, r3
 8000bc6:	88bb      	ldrh	r3, [r7, #4]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	883b      	ldrh	r3, [r7, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4622      	mov	r2, r4
 8000bd8:	f000 f81e 	bl	8000c18 <ST7789_SetWindow>
  for (uint32_t i = 0; i < (h * w); i++) ST7789_RamWrite(&color, 1);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	e007      	b.n	8000bf2 <ST7789_FillRect+0xba>
 8000be2:	2101      	movs	r1, #1
 8000be4:	f107 0020 	add.w	r0, r7, #32
 8000be8:	f000 f83c 	bl	8000c64 <ST7789_RamWrite>
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bf6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000bfa:	fb02 f303 	mul.w	r3, r2, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d3ed      	bcc.n	8000be2 <ST7789_FillRect+0xaa>
 8000c06:	e000      	b.n	8000c0a <ST7789_FillRect+0xd2>
  if ((x >= ST7789_Width) || (y >= ST7789_Height)) return;
 8000c08:	bf00      	nop
}
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd90      	pop	{r4, r7, pc}
 8000c10:	2000008c 	.word	0x2000008c
 8000c14:	2000008d 	.word	0x2000008d

08000c18 <ST7789_SetWindow>:

void ST7789_SetWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4608      	mov	r0, r1
 8000c22:	4611      	mov	r1, r2
 8000c24:	461a      	mov	r2, r3
 8000c26:	4623      	mov	r3, r4
 8000c28:	71fb      	strb	r3, [r7, #7]
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71bb      	strb	r3, [r7, #6]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	717b      	strb	r3, [r7, #5]
 8000c32:	4613      	mov	r3, r2
 8000c34:	713b      	strb	r3, [r7, #4]
  ST7789_ColumnSet(x0, x1);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	797a      	ldrb	r2, [r7, #5]
 8000c3c:	b292      	uxth	r2, r2
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 f82f 	bl	8000ca4 <ST7789_ColumnSet>
  ST7789_RowSet(y0, y1);
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	793a      	ldrb	r2, [r7, #4]
 8000c4c:	b292      	uxth	r2, r2
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 f85d 	bl	8000d10 <ST7789_RowSet>
  ST7789_SendCmd(ST7789_Cmd_RAMWR);
 8000c56:	202c      	movs	r0, #44	; 0x2c
 8000c58:	f7ff fe80 	bl	800095c <ST7789_SendCmd>
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd90      	pop	{r4, r7, pc}

08000c64 <ST7789_RamWrite>:

void ST7789_RamWrite(uint16_t *pBuff, uint16_t Len)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]
  while (Len--)
 8000c70:	e00d      	b.n	8000c8e <ST7789_RamWrite+0x2a>
  {
    ST7789_SendData(*pBuff >> 8);  
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fe8f 	bl	80009a0 <ST7789_SendData>
    ST7789_SendData(*pBuff & 0xFF);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fe89 	bl	80009a0 <ST7789_SendData>
  while (Len--)
 8000c8e:	887b      	ldrh	r3, [r7, #2]
 8000c90:	1e5a      	subs	r2, r3, #1
 8000c92:	807a      	strh	r2, [r7, #2]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1ec      	bne.n	8000c72 <ST7789_RamWrite+0xe>
  }  
}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <ST7789_ColumnSet>:

static void ST7789_ColumnSet(uint16_t ColumnStart, uint16_t ColumnEnd)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	460a      	mov	r2, r1
 8000cae:	80fb      	strh	r3, [r7, #6]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	80bb      	strh	r3, [r7, #4]
  if (ColumnStart > ColumnEnd)
 8000cb4:	88fa      	ldrh	r2, [r7, #6]
 8000cb6:	88bb      	ldrh	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d821      	bhi.n	8000d00 <ST7789_ColumnSet+0x5c>
    return;
  if (ColumnEnd > ST7789_Width)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <ST7789_ColumnSet+0x68>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	88ba      	ldrh	r2, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d81d      	bhi.n	8000d04 <ST7789_ColumnSet+0x60>
    return;
  
  ColumnStart += ST7789_X_Start;
  ColumnEnd += ST7789_X_Start;
  
  ST7789_SendCmd(ST7789_Cmd_CASET);
 8000cc8:	202a      	movs	r0, #42	; 0x2a
 8000cca:	f7ff fe47 	bl	800095c <ST7789_SendCmd>
  ST7789_SendData(ColumnStart >> 8);  
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fe62 	bl	80009a0 <ST7789_SendData>
  ST7789_SendData(ColumnStart & 0xFF);  
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fe5d 	bl	80009a0 <ST7789_SendData>
  ST7789_SendData(ColumnEnd >> 8);  
 8000ce6:	88bb      	ldrh	r3, [r7, #4]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fe56 	bl	80009a0 <ST7789_SendData>
  ST7789_SendData(ColumnEnd & 0xFF);  
 8000cf4:	88bb      	ldrh	r3, [r7, #4]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe51 	bl	80009a0 <ST7789_SendData>
 8000cfe:	e002      	b.n	8000d06 <ST7789_ColumnSet+0x62>
    return;
 8000d00:	bf00      	nop
 8000d02:	e000      	b.n	8000d06 <ST7789_ColumnSet+0x62>
    return;
 8000d04:	bf00      	nop
}
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2000008c 	.word	0x2000008c

08000d10 <ST7789_RowSet>:

static void ST7789_RowSet(uint16_t RowStart, uint16_t RowEnd)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	460a      	mov	r2, r1
 8000d1a:	80fb      	strh	r3, [r7, #6]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	80bb      	strh	r3, [r7, #4]
  if (RowStart > RowEnd)
 8000d20:	88fa      	ldrh	r2, [r7, #6]
 8000d22:	88bb      	ldrh	r3, [r7, #4]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d821      	bhi.n	8000d6c <ST7789_RowSet+0x5c>
    return;
  if (RowEnd > ST7789_Height)
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <ST7789_RowSet+0x68>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	88ba      	ldrh	r2, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d81d      	bhi.n	8000d70 <ST7789_RowSet+0x60>
    return;
  
  RowStart += ST7789_Y_Start;
  RowEnd += ST7789_Y_Start;
  
  ST7789_SendCmd(ST7789_Cmd_RASET);
 8000d34:	202b      	movs	r0, #43	; 0x2b
 8000d36:	f7ff fe11 	bl	800095c <ST7789_SendCmd>
  ST7789_SendData(RowStart >> 8);  
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fe2c 	bl	80009a0 <ST7789_SendData>
  ST7789_SendData(RowStart & 0xFF);  
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fe27 	bl	80009a0 <ST7789_SendData>
  ST7789_SendData(RowEnd >> 8);  
 8000d52:	88bb      	ldrh	r3, [r7, #4]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fe20 	bl	80009a0 <ST7789_SendData>
  ST7789_SendData(RowEnd & 0xFF);  
 8000d60:	88bb      	ldrh	r3, [r7, #4]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fe1b 	bl	80009a0 <ST7789_SendData>
 8000d6a:	e002      	b.n	8000d72 <ST7789_RowSet+0x62>
    return;
 8000d6c:	bf00      	nop
 8000d6e:	e000      	b.n	8000d72 <ST7789_RowSet+0x62>
    return;
 8000d70:	bf00      	nop
}
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000008d 	.word	0x2000008d

08000d7c <ST7789_SetBL>:

void ST7789_SetBL(uint8_t Value)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if (Value > 100)
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b64      	cmp	r3, #100	; 0x64
 8000d8a:	d901      	bls.n	8000d90 <ST7789_SetBL+0x14>
    Value = 100;
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	71fb      	strb	r3, [r7, #7]
  
#if (ST77xx_BLK_PWM_Used)
  //tmr2_PWM_set(ST77xx_PWM_TMR2_Chan, Value);
#else
  if (Value)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d006      	beq.n	8000da4 <ST7789_SetBL+0x28>
		HAL_GPIO_WritePin(BLK_GPIO_Port, BLK_Pin, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2108      	movs	r1, #8
 8000d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9e:	f000 fc6d 	bl	800167c <HAL_GPIO_WritePin>
  else
		HAL_GPIO_WritePin(BLK_GPIO_Port, BLK_Pin, GPIO_PIN_RESET);
#endif
}
 8000da2:	e005      	b.n	8000db0 <ST7789_SetBL+0x34>
		HAL_GPIO_WritePin(BLK_GPIO_Port, BLK_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2108      	movs	r1, #8
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dac:	f000 fc66 	bl	800167c <HAL_GPIO_WritePin>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <ST7789_DisplayPower>:

void ST7789_DisplayPower(uint8_t On)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if (On)
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <ST7789_DisplayPower+0x18>
    ST7789_SendCmd(ST7789_Cmd_DISPON);
 8000dc8:	2029      	movs	r0, #41	; 0x29
 8000dca:	f7ff fdc7 	bl	800095c <ST7789_SendCmd>
  else
    ST7789_SendCmd(ST7789_Cmd_DISPOFF);
}
 8000dce:	e002      	b.n	8000dd6 <ST7789_DisplayPower+0x1e>
    ST7789_SendCmd(ST7789_Cmd_DISPOFF);
 8000dd0:	2028      	movs	r0, #40	; 0x28
 8000dd2:	f7ff fdc3 	bl	800095c <ST7789_SendCmd>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <ST7789_DrawPixel>:
    }
  }
}

void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	80fb      	strh	r3, [r7, #6]
 8000dea:	460b      	mov	r3, r1
 8000dec:	80bb      	strh	r3, [r7, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	807b      	strh	r3, [r7, #2]
  if ((x < 0) ||(x >= ST7789_Width) || (y < 0) || (y >= ST7789_Height))
 8000df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db1f      	blt.n	8000e3a <ST7789_DrawPixel+0x5a>
 8000dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dfe:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <ST7789_DrawPixel+0x64>)
 8000e00:	7812      	ldrb	r2, [r2, #0]
 8000e02:	4293      	cmp	r3, r2
 8000e04:	da19      	bge.n	8000e3a <ST7789_DrawPixel+0x5a>
 8000e06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db15      	blt.n	8000e3a <ST7789_DrawPixel+0x5a>
 8000e0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e12:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <ST7789_DrawPixel+0x68>)
 8000e14:	7812      	ldrb	r2, [r2, #0]
 8000e16:	4293      	cmp	r3, r2
 8000e18:	da0f      	bge.n	8000e3a <ST7789_DrawPixel+0x5a>
    return;

  ST7789_SetWindow(x, y, x, y);
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	b2d8      	uxtb	r0, r3
 8000e1e:	88bb      	ldrh	r3, [r7, #4]
 8000e20:	b2d9      	uxtb	r1, r3
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	88bb      	ldrh	r3, [r7, #4]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f7ff fef5 	bl	8000c18 <ST7789_SetWindow>
  ST7789_RamWrite(&color, 1);
 8000e2e:	1cbb      	adds	r3, r7, #2
 8000e30:	2101      	movs	r1, #1
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff16 	bl	8000c64 <ST7789_RamWrite>
 8000e38:	e000      	b.n	8000e3c <ST7789_DrawPixel+0x5c>
    return;
 8000e3a:	bf00      	nop
}
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000008c 	.word	0x2000008c
 8000e48:	2000008d 	.word	0x2000008d

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_MspInit+0x44>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_MspInit+0x44>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6193      	str	r3, [r2, #24]
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_MspInit+0x44>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_MspInit+0x44>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_MspInit+0x44>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_MspInit+0x44>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000

08000e94 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000e9e:	695a      	ldr	r2, [r3, #20]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	bf0c      	ite	eq
 8000eaa:	2301      	moveq	r3, #1
 8000eac:	2300      	movne	r3, #0
 8000eae:	b2db      	uxtb	r3, r3
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40010400 	.word	0x40010400

08000ec0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6153      	str	r3, [r2, #20]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40010400 	.word	0x40010400

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2c:	f000 f90a 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	flag_change = 1;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <EXTI1_IRQHandler+0x20>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f7ff ffa8 	bl	8000e94 <LL_EXTI_IsActiveFlag_0_31>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d002      	beq.n	8000f50 <EXTI1_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f7ff ffb8 	bl	8000ec0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2000008e 	.word	0x2000008e

08000f58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <SystemInit+0x20>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <SystemInit+0x20>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_USART2_UART_Init+0x58>)
 8000f82:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <MX_USART2_UART_Init+0x5c>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_USART2_UART_Init+0x58>)
 8000f88:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000f8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_USART2_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_USART2_UART_Init+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_USART2_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_USART2_UART_Init+0x58>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_USART2_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_USART2_UART_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_USART2_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_USART2_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_USART2_UART_Init+0x58>)
 8000fc0:	f000 fcd1 	bl	8001966 <HAL_UART_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fca:	f7ff fbe3 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000090 	.word	0x20000090
 8000fd8:	40004400 	.word	0x40004400

08000fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a18      	ldr	r2, [pc, #96]	; (800105c <HAL_UART_MspInit+0x80>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d129      	bne.n	8001052 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_UART_MspInit+0x84>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <HAL_UART_MspInit+0x84>)
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_UART_MspInit+0x84>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_UART_MspInit+0x84>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a11      	ldr	r2, [pc, #68]	; (8001060 <HAL_UART_MspInit+0x84>)
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_UART_MspInit+0x84>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800102e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001040:	2307      	movs	r3, #7
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104e:	f000 f9a3 	bl	8001398 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40004400 	.word	0x40004400
 8001060:	40021000 	.word	0x40021000

08001064 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800109c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800106a:	490e      	ldr	r1, [pc, #56]	; (80010a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <LoopForever+0xe>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001080:	4c0b      	ldr	r4, [pc, #44]	; (80010b0 <LoopForever+0x16>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800108e:	f7ff ff63 	bl	8000f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001092:	f001 fb45 	bl	8002720 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001096:	f7ff faf5 	bl	8000684 <main>

0800109a <LoopForever>:

LoopForever:
    b LoopForever
 800109a:	e7fe      	b.n	800109a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800109c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010a8:	080027b0 	.word	0x080027b0
  ldr r2, =_sbss
 80010ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010b0:	20000118 	.word	0x20000118

080010b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC1_2_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_Init+0x28>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_Init+0x28>)
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f931 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 f808 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff feba 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40022000 	.word	0x40022000

080010e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f93b 	bl	800137e <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001120:	f000 f911 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000000 	.word	0x20000000
 800113c:	20000008 	.word	0x20000008
 8001140:	20000004 	.word	0x20000004

08001144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008
 8001168:	20000114 	.word	0x20000114

0800116c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000114 	.word	0x20000114

08001184 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffde 	bl	800116c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008

080011cc <__NVIC_SetPriorityGrouping>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_SetPriority>:
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff47 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff5c 	bl	8001214 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffb0 	bl	80012ec <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a6:	e14e      	b.n	8001646 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2101      	movs	r1, #1
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8140 	beq.w	8001640 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d005      	beq.n	80013d8 <HAL_GPIO_Init+0x40>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d130      	bne.n	800143a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800140e:	2201      	movs	r2, #1
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 0201 	and.w	r2, r3, #1
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	2b03      	cmp	r3, #3
 8001444:	d017      	beq.n	8001476 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d123      	bne.n	80014ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	6939      	ldr	r1, [r7, #16]
 80014c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0203 	and.w	r2, r3, #3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 809a 	beq.w	8001640 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150c:	4b55      	ldr	r3, [pc, #340]	; (8001664 <HAL_GPIO_Init+0x2cc>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a54      	ldr	r2, [pc, #336]	; (8001664 <HAL_GPIO_Init+0x2cc>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b52      	ldr	r3, [pc, #328]	; (8001664 <HAL_GPIO_Init+0x2cc>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001524:	4a50      	ldr	r2, [pc, #320]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800154e:	d013      	beq.n	8001578 <HAL_GPIO_Init+0x1e0>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a46      	ldr	r2, [pc, #280]	; (800166c <HAL_GPIO_Init+0x2d4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d00d      	beq.n	8001574 <HAL_GPIO_Init+0x1dc>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a45      	ldr	r2, [pc, #276]	; (8001670 <HAL_GPIO_Init+0x2d8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d007      	beq.n	8001570 <HAL_GPIO_Init+0x1d8>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a44      	ldr	r2, [pc, #272]	; (8001674 <HAL_GPIO_Init+0x2dc>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d101      	bne.n	800156c <HAL_GPIO_Init+0x1d4>
 8001568:	2303      	movs	r3, #3
 800156a:	e006      	b.n	800157a <HAL_GPIO_Init+0x1e2>
 800156c:	2305      	movs	r3, #5
 800156e:	e004      	b.n	800157a <HAL_GPIO_Init+0x1e2>
 8001570:	2302      	movs	r3, #2
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x1e2>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_GPIO_Init+0x1e2>
 8001578:	2300      	movs	r3, #0
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	f002 0203 	and.w	r2, r2, #3
 8001580:	0092      	lsls	r2, r2, #2
 8001582:	4093      	lsls	r3, r2
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800158a:	4937      	ldr	r1, [pc, #220]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001598:	4b37      	ldr	r3, [pc, #220]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015bc:	4a2e      	ldr	r2, [pc, #184]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015c2:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015e6:	4a24      	ldr	r2, [pc, #144]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001610:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f aea9 	bne.w	80013a8 <HAL_GPIO_Init+0x10>
  }
}
 8001656:	bf00      	nop
 8001658:	bf00      	nop
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000
 800166c:	48000400 	.word	0x48000400
 8001670:	48000800 	.word	0x48000800
 8001674:	48000c00 	.word	0x48000c00
 8001678:	40010400 	.word	0x40010400

0800167c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
 8001688:	4613      	mov	r3, r2
 800168a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800168c:	787b      	ldrb	r3, [r7, #1]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001698:	e002      	b.n	80016a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b08b      	sub	sp, #44	; 0x2c
 80016b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80016c6:	4b29      	ldr	r3, [pc, #164]	; (800176c <HAL_RCC_GetSysClockFreq+0xc0>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d002      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x30>
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d003      	beq.n	80016e2 <HAL_RCC_GetSysClockFreq+0x36>
 80016da:	e03c      	b.n	8001756 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <HAL_RCC_GetSysClockFreq+0xc4>)
 80016de:	623b      	str	r3, [r7, #32]
      break;
 80016e0:	e03c      	b.n	800175c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80016e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80016ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	fa92 f2a2 	rbit	r2, r2
 80016f4:	607a      	str	r2, [r7, #4]
  return result;
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	fab2 f282 	clz	r2, r2
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	40d3      	lsrs	r3, r2
 8001700:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001702:	5cd3      	ldrb	r3, [r2, r3]
 8001704:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	220f      	movs	r2, #15
 8001710:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	fa92 f2a2 	rbit	r2, r2
 8001718:	60fa      	str	r2, [r7, #12]
  return result;
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	fab2 f282 	clz	r2, r2
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	40d3      	lsrs	r3, r2
 8001724:	4a14      	ldr	r2, [pc, #80]	; (8001778 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	fbb2 f2f3 	udiv	r2, r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
 8001744:	e004      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	4a0c      	ldr	r2, [pc, #48]	; (800177c <HAL_RCC_GetSysClockFreq+0xd0>)
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	623b      	str	r3, [r7, #32]
      break;
 8001754:	e002      	b.n	800175c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001758:	623b      	str	r3, [r7, #32]
      break;
 800175a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800175c:	6a3b      	ldr	r3, [r7, #32]
}
 800175e:	4618      	mov	r0, r3
 8001760:	372c      	adds	r7, #44	; 0x2c
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	007a1200 	.word	0x007a1200
 8001774:	08002788 	.word	0x08002788
 8001778:	08002798 	.word	0x08002798
 800177c:	003d0900 	.word	0x003d0900

08001780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_RCC_GetHCLKFreq+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000000 	.word	0x20000000

08001798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800179e:	f7ff ffef 	bl	8001780 <HAL_RCC_GetHCLKFreq>
 80017a2:	4601      	mov	r1, r0
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	fa92 f2a2 	rbit	r2, r2
 80017b8:	603a      	str	r2, [r7, #0]
  return result;
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	fab2 f282 	clz	r2, r2
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	40d3      	lsrs	r3, r2
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80017c6:	5cd3      	ldrb	r3, [r2, r3]
 80017c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	08002780 	.word	0x08002780

080017dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80017e2:	f7ff ffcd 	bl	8001780 <HAL_RCC_GetHCLKFreq>
 80017e6:	4601      	mov	r1, r0
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80017f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80017f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	fa92 f2a2 	rbit	r2, r2
 80017fc:	603a      	str	r2, [r7, #0]
  return result;
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	fab2 f282 	clz	r2, r2
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	40d3      	lsrs	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_RCC_GetPCLK2Freq+0x40>)
 800180a:	5cd3      	ldrb	r3, [r2, r3]
 800180c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	08002780 	.word	0x08002780

08001820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e095      	b.n	800195e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	2b00      	cmp	r3, #0
 8001838:	d108      	bne.n	800184c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001842:	d009      	beq.n	8001858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
 800184a:	e005      	b.n	8001858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe ffd2 	bl	800081c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800188e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001898:	d902      	bls.n	80018a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	e002      	b.n	80018a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80018a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80018ae:	d007      	beq.n	80018c0 <HAL_SPI_Init+0xa0>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80018b8:	d002      	beq.n	80018c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	431a      	orrs	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001902:	ea42 0103 	orr.w	r1, r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	0c1b      	lsrs	r3, r3, #16
 800191c:	f003 0204 	and.w	r2, r3, #4
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800193c:	ea42 0103 	orr.w	r1, r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e040      	b.n	80019fa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800197c:	2b00      	cmp	r3, #0
 800197e:	d106      	bne.n	800198e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fb27 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2224      	movs	r2, #36	; 0x24
 8001992:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f82d 	bl	8001a04 <UART_SetConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e022      	b.n	80019fa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f957 	bl	8001c70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0201 	orr.w	r2, r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f9de 	bl	8001db4 <UART_CheckIdleState>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4b8a      	ldr	r3, [pc, #552]	; (8001c58 <UART_SetConfig+0x254>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6812      	ldr	r2, [r2, #0]
 8001a36:	6979      	ldr	r1, [r7, #20]
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a78      	ldr	r2, [pc, #480]	; (8001c5c <UART_SetConfig+0x258>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d120      	bne.n	8001ac2 <UART_SetConfig+0xbe>
 8001a80:	4b77      	ldr	r3, [pc, #476]	; (8001c60 <UART_SetConfig+0x25c>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d817      	bhi.n	8001abc <UART_SetConfig+0xb8>
 8001a8c:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <UART_SetConfig+0x90>)
 8001a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a92:	bf00      	nop
 8001a94:	08001aa5 	.word	0x08001aa5
 8001a98:	08001ab1 	.word	0x08001ab1
 8001a9c:	08001ab7 	.word	0x08001ab7
 8001aa0:	08001aab 	.word	0x08001aab
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	77fb      	strb	r3, [r7, #31]
 8001aa8:	e01d      	b.n	8001ae6 <UART_SetConfig+0xe2>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	77fb      	strb	r3, [r7, #31]
 8001aae:	e01a      	b.n	8001ae6 <UART_SetConfig+0xe2>
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	77fb      	strb	r3, [r7, #31]
 8001ab4:	e017      	b.n	8001ae6 <UART_SetConfig+0xe2>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	77fb      	strb	r3, [r7, #31]
 8001aba:	e014      	b.n	8001ae6 <UART_SetConfig+0xe2>
 8001abc:	2310      	movs	r3, #16
 8001abe:	77fb      	strb	r3, [r7, #31]
 8001ac0:	e011      	b.n	8001ae6 <UART_SetConfig+0xe2>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a67      	ldr	r2, [pc, #412]	; (8001c64 <UART_SetConfig+0x260>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d102      	bne.n	8001ad2 <UART_SetConfig+0xce>
 8001acc:	2300      	movs	r3, #0
 8001ace:	77fb      	strb	r3, [r7, #31]
 8001ad0:	e009      	b.n	8001ae6 <UART_SetConfig+0xe2>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a64      	ldr	r2, [pc, #400]	; (8001c68 <UART_SetConfig+0x264>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d102      	bne.n	8001ae2 <UART_SetConfig+0xde>
 8001adc:	2300      	movs	r3, #0
 8001ade:	77fb      	strb	r3, [r7, #31]
 8001ae0:	e001      	b.n	8001ae6 <UART_SetConfig+0xe2>
 8001ae2:	2310      	movs	r3, #16
 8001ae4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aee:	d15b      	bne.n	8001ba8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8001af0:	7ffb      	ldrb	r3, [r7, #31]
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d827      	bhi.n	8001b46 <UART_SetConfig+0x142>
 8001af6:	a201      	add	r2, pc, #4	; (adr r2, 8001afc <UART_SetConfig+0xf8>)
 8001af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afc:	08001b21 	.word	0x08001b21
 8001b00:	08001b29 	.word	0x08001b29
 8001b04:	08001b31 	.word	0x08001b31
 8001b08:	08001b47 	.word	0x08001b47
 8001b0c:	08001b37 	.word	0x08001b37
 8001b10:	08001b47 	.word	0x08001b47
 8001b14:	08001b47 	.word	0x08001b47
 8001b18:	08001b47 	.word	0x08001b47
 8001b1c:	08001b3f 	.word	0x08001b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b20:	f7ff fe3a 	bl	8001798 <HAL_RCC_GetPCLK1Freq>
 8001b24:	61b8      	str	r0, [r7, #24]
        break;
 8001b26:	e013      	b.n	8001b50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001b28:	f7ff fe58 	bl	80017dc <HAL_RCC_GetPCLK2Freq>
 8001b2c:	61b8      	str	r0, [r7, #24]
        break;
 8001b2e:	e00f      	b.n	8001b50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001b30:	4b4e      	ldr	r3, [pc, #312]	; (8001c6c <UART_SetConfig+0x268>)
 8001b32:	61bb      	str	r3, [r7, #24]
        break;
 8001b34:	e00c      	b.n	8001b50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001b36:	f7ff fdb9 	bl	80016ac <HAL_RCC_GetSysClockFreq>
 8001b3a:	61b8      	str	r0, [r7, #24]
        break;
 8001b3c:	e008      	b.n	8001b50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b42:	61bb      	str	r3, [r7, #24]
        break;
 8001b44:	e004      	b.n	8001b50 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	77bb      	strb	r3, [r7, #30]
        break;
 8001b4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d074      	beq.n	8001c40 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	005a      	lsls	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	085b      	lsrs	r3, r3, #1
 8001b60:	441a      	add	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b0f      	cmp	r3, #15
 8001b72:	d916      	bls.n	8001ba2 <UART_SetConfig+0x19e>
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7a:	d212      	bcs.n	8001ba2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	f023 030f 	bic.w	r3, r3, #15
 8001b84:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	085b      	lsrs	r3, r3, #1
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	89fb      	ldrh	r3, [r7, #14]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	89fa      	ldrh	r2, [r7, #14]
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	e04e      	b.n	8001c40 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	77bb      	strb	r3, [r7, #30]
 8001ba6:	e04b      	b.n	8001c40 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001ba8:	7ffb      	ldrb	r3, [r7, #31]
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d827      	bhi.n	8001bfe <UART_SetConfig+0x1fa>
 8001bae:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <UART_SetConfig+0x1b0>)
 8001bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb4:	08001bd9 	.word	0x08001bd9
 8001bb8:	08001be1 	.word	0x08001be1
 8001bbc:	08001be9 	.word	0x08001be9
 8001bc0:	08001bff 	.word	0x08001bff
 8001bc4:	08001bef 	.word	0x08001bef
 8001bc8:	08001bff 	.word	0x08001bff
 8001bcc:	08001bff 	.word	0x08001bff
 8001bd0:	08001bff 	.word	0x08001bff
 8001bd4:	08001bf7 	.word	0x08001bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001bd8:	f7ff fdde 	bl	8001798 <HAL_RCC_GetPCLK1Freq>
 8001bdc:	61b8      	str	r0, [r7, #24]
        break;
 8001bde:	e013      	b.n	8001c08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001be0:	f7ff fdfc 	bl	80017dc <HAL_RCC_GetPCLK2Freq>
 8001be4:	61b8      	str	r0, [r7, #24]
        break;
 8001be6:	e00f      	b.n	8001c08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <UART_SetConfig+0x268>)
 8001bea:	61bb      	str	r3, [r7, #24]
        break;
 8001bec:	e00c      	b.n	8001c08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001bee:	f7ff fd5d 	bl	80016ac <HAL_RCC_GetSysClockFreq>
 8001bf2:	61b8      	str	r0, [r7, #24]
        break;
 8001bf4:	e008      	b.n	8001c08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bfa:	61bb      	str	r3, [r7, #24]
        break;
 8001bfc:	e004      	b.n	8001c08 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	77bb      	strb	r3, [r7, #30]
        break;
 8001c06:	bf00      	nop
    }

    if (pclk != 0U)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d018      	beq.n	8001c40 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	085a      	lsrs	r2, r3, #1
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	441a      	add	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	d908      	bls.n	8001c3c <UART_SetConfig+0x238>
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d204      	bcs.n	8001c3c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	e001      	b.n	8001c40 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001c4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	efff69f3 	.word	0xefff69f3
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40004400 	.word	0x40004400
 8001c68:	40004800 	.word	0x40004800
 8001c6c:	007a1200 	.word	0x007a1200

08001c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00a      	beq.n	8001c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00a      	beq.n	8001cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00a      	beq.n	8001cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00a      	beq.n	8001d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00a      	beq.n	8001d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	f003 0320 	and.w	r3, r3, #32
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00a      	beq.n	8001d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01a      	beq.n	8001d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d6e:	d10a      	bne.n	8001d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00a      	beq.n	8001da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	605a      	str	r2, [r3, #4]
  }
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001dc4:	f7ff f9d2 	bl	800116c <HAL_GetTick>
 8001dc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d10e      	bne.n	8001df6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f82d 	bl	8001e46 <UART_WaitOnFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e023      	b.n	8001e3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d10e      	bne.n	8001e22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f817 	bl	8001e46 <UART_WaitOnFlagUntilTimeout>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e00d      	b.n	8001e3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2220      	movs	r2, #32
 8001e26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b09c      	sub	sp, #112	; 0x70
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	4613      	mov	r3, r2
 8001e54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e56:	e0a5      	b.n	8001fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e5e:	f000 80a1 	beq.w	8001fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e62:	f7ff f983 	bl	800116c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d302      	bcc.n	8001e78 <UART_WaitOnFlagUntilTimeout+0x32>
 8001e72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d13e      	bne.n	8001ef6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e80:	e853 3f00 	ldrex	r3, [r3]
 8001e84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8001e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e8c:	667b      	str	r3, [r7, #100]	; 0x64
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001e9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e9e:	e841 2300 	strex	r3, r2, [r1]
 8001ea2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1e6      	bne.n	8001e78 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3308      	adds	r3, #8
 8001eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb4:	e853 3f00 	ldrex	r3, [r3]
 8001eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3308      	adds	r3, #8
 8001ec8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001eca:	64ba      	str	r2, [r7, #72]	; 0x48
 8001ecc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ece:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ed2:	e841 2300 	strex	r3, r2, [r1]
 8001ed6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8001ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1e5      	bne.n	8001eaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e067      	b.n	8001fc6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d04f      	beq.n	8001fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f12:	d147      	bne.n	8001fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	e853 3f00 	ldrex	r3, [r3]
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f44:	e841 2300 	strex	r3, r2, [r1]
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1e6      	bne.n	8001f1e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	3308      	adds	r3, #8
 8001f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	e853 3f00 	ldrex	r3, [r3]
 8001f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f70:	623a      	str	r2, [r7, #32]
 8001f72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f74:	69f9      	ldr	r1, [r7, #28]
 8001f76:	6a3a      	ldr	r2, [r7, #32]
 8001f78:	e841 2300 	strex	r3, r2, [r1]
 8001f7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1e5      	bne.n	8001f50 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e010      	b.n	8001fc6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4013      	ands	r3, r2
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	f43f af4a 	beq.w	8001e58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3770      	adds	r7, #112	; 0x70
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <LL_EXTI_EnableIT_0_31>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <LL_EXTI_EnableIT_0_31+0x20>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4904      	ldr	r1, [pc, #16]	; (8001ff0 <LL_EXTI_EnableIT_0_31+0x20>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40010400 	.word	0x40010400

08001ff4 <LL_EXTI_EnableIT_32_63>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <LL_EXTI_EnableIT_32_63+0x20>)
 8001ffe:	6a1a      	ldr	r2, [r3, #32]
 8002000:	4904      	ldr	r1, [pc, #16]	; (8002014 <LL_EXTI_EnableIT_32_63+0x20>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4313      	orrs	r3, r2
 8002006:	620b      	str	r3, [r1, #32]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40010400 	.word	0x40010400

08002018 <LL_EXTI_DisableIT_0_31>:
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <LL_EXTI_DisableIT_0_31+0x24>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	43db      	mvns	r3, r3
 8002028:	4904      	ldr	r1, [pc, #16]	; (800203c <LL_EXTI_DisableIT_0_31+0x24>)
 800202a:	4013      	ands	r3, r2
 800202c:	600b      	str	r3, [r1, #0]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40010400 	.word	0x40010400

08002040 <LL_EXTI_DisableIT_32_63>:
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <LL_EXTI_DisableIT_32_63+0x24>)
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	43db      	mvns	r3, r3
 8002050:	4904      	ldr	r1, [pc, #16]	; (8002064 <LL_EXTI_DisableIT_32_63+0x24>)
 8002052:	4013      	ands	r3, r2
 8002054:	620b      	str	r3, [r1, #32]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40010400 	.word	0x40010400

08002068 <LL_EXTI_EnableEvent_0_31>:
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4904      	ldr	r1, [pc, #16]	; (8002088 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40010400 	.word	0x40010400

0800208c <LL_EXTI_EnableEvent_32_63>:
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <LL_EXTI_EnableEvent_32_63+0x20>)
 8002096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002098:	4904      	ldr	r1, [pc, #16]	; (80020ac <LL_EXTI_EnableEvent_32_63+0x20>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4313      	orrs	r3, r2
 800209e:	624b      	str	r3, [r1, #36]	; 0x24
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40010400 	.word	0x40010400

080020b0 <LL_EXTI_DisableEvent_0_31>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	43db      	mvns	r3, r3
 80020c0:	4904      	ldr	r1, [pc, #16]	; (80020d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40010400 	.word	0x40010400

080020d8 <LL_EXTI_DisableEvent_32_63>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <LL_EXTI_DisableEvent_32_63+0x24>)
 80020e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	4904      	ldr	r1, [pc, #16]	; (80020fc <LL_EXTI_DisableEvent_32_63+0x24>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	624b      	str	r3, [r1, #36]	; 0x24
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40010400 	.word	0x40010400

08002100 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	4904      	ldr	r1, [pc, #16]	; (8002120 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4313      	orrs	r3, r2
 8002112:	608b      	str	r3, [r1, #8]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40010400 	.word	0x40010400

08002124 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800212e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002130:	4904      	ldr	r1, [pc, #16]	; (8002144 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40010400 	.word	0x40010400

08002148 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	43db      	mvns	r3, r3
 8002158:	4904      	ldr	r1, [pc, #16]	; (800216c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800215a:	4013      	ands	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40010400 	.word	0x40010400

08002170 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800217a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	43db      	mvns	r3, r3
 8002180:	4904      	ldr	r1, [pc, #16]	; (8002194 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002182:	4013      	ands	r3, r2
 8002184:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40010400 	.word	0x40010400

08002198 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	4904      	ldr	r1, [pc, #16]	; (80021b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60cb      	str	r3, [r1, #12]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40010400 	.word	0x40010400

080021bc <LL_EXTI_EnableFallingTrig_32_63>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80021c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c8:	4904      	ldr	r1, [pc, #16]	; (80021dc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40010400 	.word	0x40010400

080021e0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	4904      	ldr	r1, [pc, #16]	; (8002204 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	60cb      	str	r3, [r1, #12]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40010400 	.word	0x40010400

08002208 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	43db      	mvns	r3, r3
 8002218:	4904      	ldr	r1, [pc, #16]	; (800222c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800221a:	4013      	ands	r3, r2
 800221c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40010400 	.word	0x40010400

08002230 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7a1b      	ldrb	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80cd 	beq.w	80023e0 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d061      	beq.n	8002312 <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	7a5b      	ldrb	r3, [r3, #9]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d01c      	beq.n	8002290 <LL_EXTI_Init+0x60>
 8002256:	2b02      	cmp	r3, #2
 8002258:	dc25      	bgt.n	80022a6 <LL_EXTI_Init+0x76>
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <LL_EXTI_Init+0x34>
 800225e:	2b01      	cmp	r3, #1
 8002260:	d00b      	beq.n	800227a <LL_EXTI_Init+0x4a>
 8002262:	e020      	b.n	80022a6 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff21 	bl	80020b0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff feac 	bl	8001fd0 <LL_EXTI_EnableIT_0_31>
          break;
 8002278:	e018      	b.n	80022ac <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff feca 	bl	8002018 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff feed 	bl	8002068 <LL_EXTI_EnableEvent_0_31>
          break;
 800228e:	e00d      	b.n	80022ac <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fe9b 	bl	8001fd0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fee2 	bl	8002068 <LL_EXTI_EnableEvent_0_31>
          break;
 80022a4:	e002      	b.n	80022ac <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
          break;
 80022aa:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7a9b      	ldrb	r3, [r3, #10]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d02e      	beq.n	8002312 <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7a9b      	ldrb	r3, [r3, #10]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d01c      	beq.n	80022f6 <LL_EXTI_Init+0xc6>
 80022bc:	2b03      	cmp	r3, #3
 80022be:	dc25      	bgt.n	800230c <LL_EXTI_Init+0xdc>
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d002      	beq.n	80022ca <LL_EXTI_Init+0x9a>
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d00b      	beq.n	80022e0 <LL_EXTI_Init+0xb0>
 80022c8:	e020      	b.n	800230c <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff86 	bl	80021e0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff11 	bl	8002100 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80022de:	e019      	b.n	8002314 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff2f 	bl	8002148 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff52 	bl	8002198 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80022f4:	e00e      	b.n	8002314 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff00 	bl	8002100 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff47 	bl	8002198 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800230a:	e003      	b.n	8002314 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
            break;
 8002310:	e000      	b.n	8002314 <LL_EXTI_Init+0xe4>
        }
      }
 8002312:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d076      	beq.n	800240a <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7a5b      	ldrb	r3, [r3, #9]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d01c      	beq.n	800235e <LL_EXTI_Init+0x12e>
 8002324:	2b02      	cmp	r3, #2
 8002326:	dc25      	bgt.n	8002374 <LL_EXTI_Init+0x144>
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <LL_EXTI_Init+0x102>
 800232c:	2b01      	cmp	r3, #1
 800232e:	d00b      	beq.n	8002348 <LL_EXTI_Init+0x118>
 8002330:	e020      	b.n	8002374 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fece 	bl	80020d8 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fe57 	bl	8001ff4 <LL_EXTI_EnableIT_32_63>
          break;
 8002346:	e018      	b.n	800237a <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fe77 	bl	8002040 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fe98 	bl	800208c <LL_EXTI_EnableEvent_32_63>
          break;
 800235c:	e00d      	b.n	800237a <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fe46 	bl	8001ff4 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fe8d 	bl	800208c <LL_EXTI_EnableEvent_32_63>
          break;
 8002372:	e002      	b.n	800237a <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
          break;
 8002378:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7a9b      	ldrb	r3, [r3, #10]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d043      	beq.n	800240a <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7a9b      	ldrb	r3, [r3, #10]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d01c      	beq.n	80023c4 <LL_EXTI_Init+0x194>
 800238a:	2b03      	cmp	r3, #3
 800238c:	dc25      	bgt.n	80023da <LL_EXTI_Init+0x1aa>
 800238e:	2b01      	cmp	r3, #1
 8002390:	d002      	beq.n	8002398 <LL_EXTI_Init+0x168>
 8002392:	2b02      	cmp	r3, #2
 8002394:	d00b      	beq.n	80023ae <LL_EXTI_Init+0x17e>
 8002396:	e020      	b.n	80023da <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff33 	bl	8002208 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff febc 	bl	8002124 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80023ac:	e02e      	b.n	800240c <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fedc 	bl	8002170 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fefd 	bl	80021bc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80023c2:	e023      	b.n	800240c <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff feab 	bl	8002124 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fef2 	bl	80021bc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80023d8:	e018      	b.n	800240c <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
            break;
 80023de:	e015      	b.n	800240c <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fe17 	bl	8002018 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fe5e 	bl	80020b0 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fe21 	bl	8002040 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fe68 	bl	80020d8 <LL_EXTI_DisableEvent_32_63>
 8002408:	e000      	b.n	800240c <LL_EXTI_Init+0x1dc>
      }
 800240a:	bf00      	nop
#endif
  }
  return status;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <LL_GPIO_SetPinMode>:
{
 8002416:	b480      	push	{r7}
 8002418:	b089      	sub	sp, #36	; 0x24
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	613b      	str	r3, [r7, #16]
  return result;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2103      	movs	r1, #3
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	401a      	ands	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	61bb      	str	r3, [r7, #24]
  return result;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	431a      	orrs	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	601a      	str	r2, [r3, #0]
}
 8002468:	bf00      	nop
 800246a:	3724      	adds	r7, #36	; 0x24
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_GPIO_SetPinOutputType>:
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	43db      	mvns	r3, r3
 8002488:	401a      	ands	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	431a      	orrs	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	605a      	str	r2, [r3, #4]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_GPIO_SetPinSpeed>:
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	613b      	str	r3, [r7, #16]
  return result;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2103      	movs	r1, #3
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	401a      	ands	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	61bb      	str	r3, [r7, #24]
  return result;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	609a      	str	r2, [r3, #8]
}
 80024f6:	bf00      	nop
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_GPIO_SetPinPull>:
{
 8002502:	b480      	push	{r7}
 8002504:	b089      	sub	sp, #36	; 0x24
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	613b      	str	r3, [r7, #16]
  return result;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2103      	movs	r1, #3
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	401a      	ands	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	61bb      	str	r3, [r7, #24]
  return result;
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	431a      	orrs	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	60da      	str	r2, [r3, #12]
}
 8002554:	bf00      	nop
 8002556:	3724      	adds	r7, #36	; 0x24
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <LL_GPIO_SetAFPin_0_7>:
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a1a      	ldr	r2, [r3, #32]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	613b      	str	r3, [r7, #16]
  return result;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	210f      	movs	r1, #15
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	401a      	ands	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	61bb      	str	r3, [r7, #24]
  return result;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	431a      	orrs	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	621a      	str	r2, [r3, #32]
}
 80025b2:	bf00      	nop
 80025b4:	3724      	adds	r7, #36	; 0x24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <LL_GPIO_SetAFPin_8_15>:
{
 80025be:	b480      	push	{r7}
 80025c0:	b089      	sub	sp, #36	; 0x24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	613b      	str	r3, [r7, #16]
  return result;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	210f      	movs	r1, #15
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	401a      	ands	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	61bb      	str	r3, [r7, #24]
  return result;
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	431a      	orrs	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002614:	bf00      	nop
 8002616:	3724      	adds	r7, #36	; 0x24
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	613b      	str	r3, [r7, #16]
  return result;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002642:	e051      	b.n	80026e8 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2101      	movs	r1, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d043      	beq.n	80026e2 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d003      	beq.n	800266a <LL_GPIO_Init+0x4a>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d10e      	bne.n	8002688 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	461a      	mov	r2, r3
 8002670:	69b9      	ldr	r1, [r7, #24]
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ff16 	bl	80024a4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6819      	ldr	r1, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	461a      	mov	r2, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fef6 	bl	8002474 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	461a      	mov	r2, r3
 800268e:	69b9      	ldr	r1, [r7, #24]
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff ff36 	bl	8002502 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d11a      	bne.n	80026d4 <LL_GPIO_Init+0xb4>
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	60bb      	str	r3, [r7, #8]
  return result;
 80026aa:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b07      	cmp	r3, #7
 80026b4:	d807      	bhi.n	80026c6 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	461a      	mov	r2, r3
 80026bc:	69b9      	ldr	r1, [r7, #24]
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff ff4e 	bl	8002560 <LL_GPIO_SetAFPin_0_7>
 80026c4:	e006      	b.n	80026d4 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	461a      	mov	r2, r3
 80026cc:	69b9      	ldr	r1, [r7, #24]
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ff75 	bl	80025be <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	461a      	mov	r2, r3
 80026da:	69b9      	ldr	r1, [r7, #24]
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff fe9a 	bl	8002416 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	fa22 f303 	lsr.w	r3, r2, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1a6      	bne.n	8002644 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3720      	adds	r7, #32
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <LL_SetSystemCoreClock+0x1c>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6013      	str	r3, [r2, #0]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000000 	.word	0x20000000

08002720 <__libc_init_array>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	4d0d      	ldr	r5, [pc, #52]	; (8002758 <__libc_init_array+0x38>)
 8002724:	4c0d      	ldr	r4, [pc, #52]	; (800275c <__libc_init_array+0x3c>)
 8002726:	1b64      	subs	r4, r4, r5
 8002728:	10a4      	asrs	r4, r4, #2
 800272a:	2600      	movs	r6, #0
 800272c:	42a6      	cmp	r6, r4
 800272e:	d109      	bne.n	8002744 <__libc_init_array+0x24>
 8002730:	4d0b      	ldr	r5, [pc, #44]	; (8002760 <__libc_init_array+0x40>)
 8002732:	4c0c      	ldr	r4, [pc, #48]	; (8002764 <__libc_init_array+0x44>)
 8002734:	f000 f818 	bl	8002768 <_init>
 8002738:	1b64      	subs	r4, r4, r5
 800273a:	10a4      	asrs	r4, r4, #2
 800273c:	2600      	movs	r6, #0
 800273e:	42a6      	cmp	r6, r4
 8002740:	d105      	bne.n	800274e <__libc_init_array+0x2e>
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	f855 3b04 	ldr.w	r3, [r5], #4
 8002748:	4798      	blx	r3
 800274a:	3601      	adds	r6, #1
 800274c:	e7ee      	b.n	800272c <__libc_init_array+0xc>
 800274e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002752:	4798      	blx	r3
 8002754:	3601      	adds	r6, #1
 8002756:	e7f2      	b.n	800273e <__libc_init_array+0x1e>
 8002758:	080027a8 	.word	0x080027a8
 800275c:	080027a8 	.word	0x080027a8
 8002760:	080027a8 	.word	0x080027a8
 8002764:	080027ac 	.word	0x080027ac

08002768 <_init>:
 8002768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276a:	bf00      	nop
 800276c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276e:	bc08      	pop	{r3}
 8002770:	469e      	mov	lr, r3
 8002772:	4770      	bx	lr

08002774 <_fini>:
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	bf00      	nop
 8002778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277a:	bc08      	pop	{r3}
 800277c:	469e      	mov	lr, r3
 800277e:	4770      	bx	lr
