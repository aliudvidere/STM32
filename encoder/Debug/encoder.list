
encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002acc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c08  08002c08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c08  08002c08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c08  08002c08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c08  08002c08  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c0c  08002c0c  00012c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002c1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002c1c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b3d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f8  00000000  00000000  00029b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002bf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002cb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d20  00000000  00000000  0002d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c507  00000000  00000000  00046388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008904f  00000000  00000000  0005288f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db8de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f68  00000000  00000000  000db930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bc0 	.word	0x08002bc0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002bc0 	.word	0x08002bc0

0800014c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000156:	699a      	ldr	r2, [r3, #24]
 8000158:	4907      	ldr	r1, [pc, #28]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4313      	orrs	r3, r2
 800015e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000162:	699a      	ldr	r2, [r3, #24]
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4013      	ands	r3, r2
 8000168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800016a:	68fb      	ldr	r3, [r7, #12]
}
 800016c:	bf00      	nop
 800016e:	3714      	adds	r7, #20
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	40021000 	.word	0x40021000

0800017c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000180:	2020      	movs	r0, #32
 8000182:	f7ff ffe3 	bl	800014c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000186:	2004      	movs	r0, #4
 8000188:	f7ff ffe0 	bl	800014c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800018c:	2008      	movs	r0, #8
 800018e:	f7ff ffdd 	bl	800014c <LL_APB2_GRP1_EnableClock>

}
 8000192:	bf00      	nop
 8000194:	bd80      	pop	{r7, pc}
	...

08000198 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <LL_RCC_HSE_Enable+0x18>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a03      	ldr	r2, [pc, #12]	; (80001b0 <LL_RCC_HSE_Enable+0x18>)
 80001a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001a6:	6013      	str	r3, [r2, #0]
}
 80001a8:	bf00      	nop
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	40021000 	.word	0x40021000

080001b4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80001b8:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <LL_RCC_HSE_IsReady+0x20>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80001c4:	bf0c      	ite	eq
 80001c6:	2301      	moveq	r3, #1
 80001c8:	2300      	movne	r3, #0
 80001ca:	b2db      	uxtb	r3, r3
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	40021000 	.word	0x40021000

080001d8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <LL_RCC_SetSysClkSource+0x24>)
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	f023 0203 	bic.w	r2, r3, #3
 80001e8:	4904      	ldr	r1, [pc, #16]	; (80001fc <LL_RCC_SetSysClkSource+0x24>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4313      	orrs	r3, r2
 80001ee:	604b      	str	r3, [r1, #4]
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000

08000200 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000204:	4b03      	ldr	r3, [pc, #12]	; (8000214 <LL_RCC_GetSysClkSource+0x14>)
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	f003 030c 	and.w	r3, r3, #12
}
 800020c:	4618      	mov	r0, r3
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	40021000 	.word	0x40021000

08000218 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <LL_RCC_SetAHBPrescaler+0x24>)
 8000222:	685b      	ldr	r3, [r3, #4]
 8000224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000228:	4904      	ldr	r1, [pc, #16]	; (800023c <LL_RCC_SetAHBPrescaler+0x24>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4313      	orrs	r3, r2
 800022e:	604b      	str	r3, [r1, #4]
}
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40021000 	.word	0x40021000

08000240 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <LL_RCC_SetAPB1Prescaler+0x24>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000250:	4904      	ldr	r1, [pc, #16]	; (8000264 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4313      	orrs	r3, r2
 8000256:	604b      	str	r3, [r1, #4]
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40021000 	.word	0x40021000

08000268 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000278:	4904      	ldr	r1, [pc, #16]	; (800028c <LL_RCC_SetAPB2Prescaler+0x24>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4313      	orrs	r3, r2
 800027e:	604b      	str	r3, [r1, #4]
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000

08000290 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <LL_RCC_PLL_Enable+0x18>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a03      	ldr	r2, [pc, #12]	; (80002a8 <LL_RCC_PLL_Enable+0x18>)
 800029a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800029e:	6013      	str	r3, [r2, #0]
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	40021000 	.word	0x40021000

080002ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <LL_RCC_PLL_IsReady+0x20>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80002bc:	bf0c      	ite	eq
 80002be:	2301      	moveq	r3, #1
 80002c0:	2300      	movne	r3, #0
 80002c2:	b2db      	uxtb	r3, r3
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	40021000 	.word	0x40021000

080002d0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80002da:	4b08      	ldr	r3, [pc, #32]	; (80002fc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	430b      	orrs	r3, r1
 80002ec:	4903      	ldr	r1, [pc, #12]	; (80002fc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80002ee:	4313      	orrs	r3, r2
 80002f0:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40021000 	.word	0x40021000

08000300 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <LL_FLASH_SetLatency+0x24>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f023 0207 	bic.w	r2, r3, #7
 8000310:	4904      	ldr	r1, [pc, #16]	; (8000324 <LL_FLASH_SetLatency+0x24>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4313      	orrs	r3, r2
 8000316:	600b      	str	r3, [r1, #0]
}
 8000318:	bf00      	nop
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40022000 	.word	0x40022000

08000328 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <LL_FLASH_GetLatency+0x14>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f003 0307 	and.w	r3, r3, #7
}
 8000334:	4618      	mov	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	40022000 	.word	0x40022000

08000340 <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800034c:	4618      	mov	r0, r3
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
	...

08000358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035e:	f001 f879 	bl	8001454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000362:	f000 f9a5 	bl	80006b0 <SystemClock_Config>
//  GPIOA->CRH |= GPIO_CRH_CNF10_1;
//  GPIOA->CRH &= (~(GPIO_CRH_MODE10));
//  GPIOA->BSRR |= GPIO_ODR_ODR10;
//  USART1->CR1 = USART_CR1_UE;
//  USART1->BRR = 7500;
  USART1->CR1 |= USART_CR1_TE | USART_CR1_RE ; // разрешаем приемник и передатчик
 8000366:	4bac      	ldr	r3, [pc, #688]	; (8000618 <main+0x2c0>)
 8000368:	68db      	ldr	r3, [r3, #12]
 800036a:	4aab      	ldr	r2, [pc, #684]	; (8000618 <main+0x2c0>)
 800036c:	f043 030c 	orr.w	r3, r3, #12
 8000370:	60d3      	str	r3, [r2, #12]

  USART2->CR1 |= USART_CR1_TE | USART_CR1_RE ; // разрешаем приемник и передатчик
 8000372:	4baa      	ldr	r3, [pc, #680]	; (800061c <main+0x2c4>)
 8000374:	68db      	ldr	r3, [r3, #12]
 8000376:	4aa9      	ldr	r2, [pc, #676]	; (800061c <main+0x2c4>)
 8000378:	f043 030c 	orr.w	r3, r3, #12
 800037c:	60d3      	str	r3, [r2, #12]


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037e:	f7ff fefd 	bl	800017c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000382:	f000 ff79 	bl	8001278 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000386:	f000 fcd1 	bl	8000d2c <MX_TIM1_Init>
  MX_TIM2_Init();
 800038a:	f000 fd59 	bl	8000e40 <MX_TIM2_Init>
  MX_TIM3_Init();
 800038e:	f000 fde9 	bl	8000f64 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000392:	f000 ff47 	bl	8001224 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CR1 |= 1;
 8000396:	4ba2      	ldr	r3, [pc, #648]	; (8000620 <main+0x2c8>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4aa1      	ldr	r2, [pc, #644]	; (8000620 <main+0x2c8>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6013      	str	r3, [r2, #0]
  TIM2->CR1 |= 1;
 80003a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6013      	str	r3, [r2, #0]
  TIM3->CR1 |= 1;
 80003b2:	4b9c      	ldr	r3, [pc, #624]	; (8000624 <main+0x2cc>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a9b      	ldr	r2, [pc, #620]	; (8000624 <main+0x2cc>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6013      	str	r3, [r2, #0]

  TIM1->DIER |= 1;
 80003be:	4b98      	ldr	r3, [pc, #608]	; (8000620 <main+0x2c8>)
 80003c0:	68db      	ldr	r3, [r3, #12]
 80003c2:	4a97      	ldr	r2, [pc, #604]	; (8000620 <main+0x2c8>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	60d3      	str	r3, [r2, #12]
  TIM2->DIER |= 1;
 80003ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	60d3      	str	r3, [r2, #12]
  TIM3->DIER |= 1;
 80003da:	4b92      	ldr	r3, [pc, #584]	; (8000624 <main+0x2cc>)
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	4a91      	ldr	r2, [pc, #580]	; (8000624 <main+0x2cc>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	60d3      	str	r3, [r2, #12]

  uint32_t data = 2000000000;
 80003e6:	4b90      	ldr	r3, [pc, #576]	; (8000628 <main+0x2d0>)
 80003e8:	60fb      	str	r3, [r7, #12]

  uint32_t data1 = 2000000000;
 80003ea:	4b8f      	ldr	r3, [pc, #572]	; (8000628 <main+0x2d0>)
 80003ec:	60bb      	str	r3, [r7, #8]
  uint32_t data2 = 2000000000;
 80003ee:	4b8e      	ldr	r3, [pc, #568]	; (8000628 <main+0x2d0>)
 80003f0:	607b      	str	r3, [r7, #4]

  extern int8_t tim1;
  extern int8_t tim2;
  extern int8_t tim3;

  tim1 = 0;
 80003f2:	4b8e      	ldr	r3, [pc, #568]	; (800062c <main+0x2d4>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	701a      	strb	r2, [r3, #0]
  tim2 = 0;
 80003f8:	4b8d      	ldr	r3, [pc, #564]	; (8000630 <main+0x2d8>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
  tim3 = 0;
 80003fe:	4b8d      	ldr	r3, [pc, #564]	; (8000634 <main+0x2dc>)
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
//  int8_t tim3 = 0;

  uint16_t REVOLUTION = 65535;
 8000404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000408:	807b      	strh	r3, [r7, #2]
  {

	  uint8_t flag;
	   // отослать данное назад

	  while ((USART2->SR & USART_SR_RXNE) == 0) {} // Ждем пустого регистра
 800040a:	bf00      	nop
 800040c:	4b83      	ldr	r3, [pc, #524]	; (800061c <main+0x2c4>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f003 0320 	and.w	r3, r3, #32
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f9      	beq.n	800040c <main+0xb4>
      	  	 flag = USART2->DR;
 8000418:	4b80      	ldr	r3, [pc, #512]	; (800061c <main+0x2c4>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	707b      	strb	r3, [r7, #1]
      switch (flag){
 800041e:	787b      	ldrb	r3, [r7, #1]
 8000420:	2b16      	cmp	r3, #22
 8000422:	f200 8099 	bhi.w	8000558 <main+0x200>
 8000426:	a201      	add	r2, pc, #4	; (adr r2, 800042c <main+0xd4>)
 8000428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042c:	08000489 	.word	0x08000489
 8000430:	080004a7 	.word	0x080004a7
 8000434:	080004c7 	.word	0x080004c7
 8000438:	08000559 	.word	0x08000559
 800043c:	08000559 	.word	0x08000559
 8000440:	08000559 	.word	0x08000559
 8000444:	08000559 	.word	0x08000559
 8000448:	08000559 	.word	0x08000559
 800044c:	08000559 	.word	0x08000559
 8000450:	08000559 	.word	0x08000559
 8000454:	08000521 	.word	0x08000521
 8000458:	08000535 	.word	0x08000535
 800045c:	0800054b 	.word	0x0800054b
 8000460:	08000559 	.word	0x08000559
 8000464:	08000559 	.word	0x08000559
 8000468:	08000559 	.word	0x08000559
 800046c:	08000559 	.word	0x08000559
 8000470:	08000559 	.word	0x08000559
 8000474:	08000559 	.word	0x08000559
 8000478:	08000559 	.word	0x08000559
 800047c:	08000559 	.word	0x08000559
 8000480:	08000559 	.word	0x08000559
 8000484:	080004e5 	.word	0x080004e5
    	  case 0 :
    		  data = 2000000000 + (uint32_t)LL_TIM_GetCounter(TIM1) + REVOLUTION * tim1;
 8000488:	4865      	ldr	r0, [pc, #404]	; (8000620 <main+0x2c8>)
 800048a:	f7ff ff59 	bl	8000340 <LL_TIM_GetCounter>
 800048e:	4602      	mov	r2, r0
 8000490:	887b      	ldrh	r3, [r7, #2]
 8000492:	4966      	ldr	r1, [pc, #408]	; (800062c <main+0x2d4>)
 8000494:	f991 1000 	ldrsb.w	r1, [r1]
 8000498:	fb01 f303 	mul.w	r3, r1, r3
 800049c:	441a      	add	r2, r3
 800049e:	4b62      	ldr	r3, [pc, #392]	; (8000628 <main+0x2d0>)
 80004a0:	4413      	add	r3, r2
 80004a2:	60fb      	str	r3, [r7, #12]
    		  break;
 80004a4:	e058      	b.n	8000558 <main+0x200>
    	  case 1 :
    		  data = 2000000000 + (uint32_t)LL_TIM_GetCounter(TIM2) + REVOLUTION * tim2;
 80004a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004aa:	f7ff ff49 	bl	8000340 <LL_TIM_GetCounter>
 80004ae:	4602      	mov	r2, r0
 80004b0:	887b      	ldrh	r3, [r7, #2]
 80004b2:	495f      	ldr	r1, [pc, #380]	; (8000630 <main+0x2d8>)
 80004b4:	f991 1000 	ldrsb.w	r1, [r1]
 80004b8:	fb01 f303 	mul.w	r3, r1, r3
 80004bc:	441a      	add	r2, r3
 80004be:	4b5a      	ldr	r3, [pc, #360]	; (8000628 <main+0x2d0>)
 80004c0:	4413      	add	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]
    	      break;
 80004c4:	e048      	b.n	8000558 <main+0x200>
    	  case 2 :
			  data = 2000000000 + (uint32_t)LL_TIM_GetCounter(TIM3) + REVOLUTION * tim3;
 80004c6:	4857      	ldr	r0, [pc, #348]	; (8000624 <main+0x2cc>)
 80004c8:	f7ff ff3a 	bl	8000340 <LL_TIM_GetCounter>
 80004cc:	4602      	mov	r2, r0
 80004ce:	887b      	ldrh	r3, [r7, #2]
 80004d0:	4958      	ldr	r1, [pc, #352]	; (8000634 <main+0x2dc>)
 80004d2:	f991 1000 	ldrsb.w	r1, [r1]
 80004d6:	fb01 f303 	mul.w	r3, r1, r3
 80004da:	441a      	add	r2, r3
 80004dc:	4b52      	ldr	r3, [pc, #328]	; (8000628 <main+0x2d0>)
 80004de:	4413      	add	r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]
			  break;
 80004e2:	e039      	b.n	8000558 <main+0x200>
    	  case 22 :
			  data1 = 2000000000 + (uint32_t)LL_TIM_GetCounter(TIM1) + REVOLUTION * tim1;
 80004e4:	484e      	ldr	r0, [pc, #312]	; (8000620 <main+0x2c8>)
 80004e6:	f7ff ff2b 	bl	8000340 <LL_TIM_GetCounter>
 80004ea:	4602      	mov	r2, r0
 80004ec:	887b      	ldrh	r3, [r7, #2]
 80004ee:	494f      	ldr	r1, [pc, #316]	; (800062c <main+0x2d4>)
 80004f0:	f991 1000 	ldrsb.w	r1, [r1]
 80004f4:	fb01 f303 	mul.w	r3, r1, r3
 80004f8:	441a      	add	r2, r3
 80004fa:	4b4b      	ldr	r3, [pc, #300]	; (8000628 <main+0x2d0>)
 80004fc:	4413      	add	r3, r2
 80004fe:	60bb      	str	r3, [r7, #8]
			  data2 = 2000000000 + (uint32_t)LL_TIM_GetCounter(TIM2) + REVOLUTION * tim2;
 8000500:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000504:	f7ff ff1c 	bl	8000340 <LL_TIM_GetCounter>
 8000508:	4602      	mov	r2, r0
 800050a:	887b      	ldrh	r3, [r7, #2]
 800050c:	4948      	ldr	r1, [pc, #288]	; (8000630 <main+0x2d8>)
 800050e:	f991 1000 	ldrsb.w	r1, [r1]
 8000512:	fb01 f303 	mul.w	r3, r1, r3
 8000516:	441a      	add	r2, r3
 8000518:	4b43      	ldr	r3, [pc, #268]	; (8000628 <main+0x2d0>)
 800051a:	4413      	add	r3, r2
 800051c:	607b      	str	r3, [r7, #4]
			  break;
 800051e:	e01b      	b.n	8000558 <main+0x200>
    	  case 10 :
			  TIM1->CNT = 32000;
 8000520:	4b3f      	ldr	r3, [pc, #252]	; (8000620 <main+0x2c8>)
 8000522:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000526:	625a      	str	r2, [r3, #36]	; 0x24
			  tim1 = 0;
 8000528:	4b40      	ldr	r3, [pc, #256]	; (800062c <main+0x2d4>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
			  data = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
			  break;
 8000532:	e011      	b.n	8000558 <main+0x200>
		  case 11 :
			  TIM2->CNT = 32000;
 8000534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000538:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800053c:	625a      	str	r2, [r3, #36]	; 0x24
			  tim2 = 0;
 800053e:	4b3c      	ldr	r3, [pc, #240]	; (8000630 <main+0x2d8>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
			  data = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
			  break;
 8000548:	e006      	b.n	8000558 <main+0x200>
		  case 12 :
			  TIM3->CNT = 32000;
 800054a:	4b36      	ldr	r3, [pc, #216]	; (8000624 <main+0x2cc>)
 800054c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
			  data = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
			  break;
 8000556:	bf00      	nop

      }
      if (flag == 22){
 8000558:	787b      	ldrb	r3, [r7, #1]
 800055a:	2b16      	cmp	r3, #22
 800055c:	d16c      	bne.n	8000638 <main+0x2e0>
    	  while ((USART2->SR & USART_SR_TXE) == 0) {} // Ждем пустого регистра
 800055e:	bf00      	nop
 8000560:	4b2e      	ldr	r3, [pc, #184]	; (800061c <main+0x2c4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0f9      	beq.n	8000560 <main+0x208>
    	  	        USART2->DR = data1 & 0xFF;
 800056c:	4a2b      	ldr	r2, [pc, #172]	; (800061c <main+0x2c4>)
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	6053      	str	r3, [r2, #4]
		  while ((USART2->SR & USART_SR_TXE) == 0) {} // Ждем пустого регистра
 8000574:	bf00      	nop
 8000576:	4b29      	ldr	r3, [pc, #164]	; (800061c <main+0x2c4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <main+0x21e>
				USART2->DR = (data1>>8) & 0xFF;
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	0a1b      	lsrs	r3, r3, #8
 8000586:	4a25      	ldr	r2, [pc, #148]	; (800061c <main+0x2c4>)
 8000588:	b2db      	uxtb	r3, r3
 800058a:	6053      	str	r3, [r2, #4]
		  while ((USART2->SR & USART_SR_TXE) == 0) {} // Ждем пустого регистра
 800058c:	bf00      	nop
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <main+0x2c4>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f9      	beq.n	800058e <main+0x236>
				USART2->DR = (data1>>16) & 0xFF;
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	0c1b      	lsrs	r3, r3, #16
 800059e:	4a1f      	ldr	r2, [pc, #124]	; (800061c <main+0x2c4>)
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	6053      	str	r3, [r2, #4]
		  while ((USART2->SR & USART_SR_TXE) == 0) {} // Ждем пустого регистра
 80005a4:	bf00      	nop
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <main+0x2c4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <main+0x24e>
				USART2->DR = (data1>>24) & 0xFF;
 80005b2:	4a1a      	ldr	r2, [pc, #104]	; (800061c <main+0x2c4>)
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	0e1b      	lsrs	r3, r3, #24
 80005b8:	6053      	str	r3, [r2, #4]
		  while ((USART2->SR & USART_SR_TXE) == 0) {} // Ждем пустого регистра
 80005ba:	bf00      	nop
 80005bc:	4b17      	ldr	r3, [pc, #92]	; (800061c <main+0x2c4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0f9      	beq.n	80005bc <main+0x264>
				USART2->DR = data2 & 0xFF;
 80005c8:	4a14      	ldr	r2, [pc, #80]	; (800061c <main+0x2c4>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	6053      	str	r3, [r2, #4]
		  while ((USART2->SR & USART_SR_TXE) == 0) {} // Ждем пустого регистра
 80005d0:	bf00      	nop
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <main+0x2c4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f9      	beq.n	80005d2 <main+0x27a>
				USART2->DR = (data2>>8) & 0xFF;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <main+0x2c4>)
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	6053      	str	r3, [r2, #4]
		  while ((USART2->SR & USART_SR_TXE) == 0) {} // Ждем пустого регистра
 80005e8:	bf00      	nop
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <main+0x2c4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f9      	beq.n	80005ea <main+0x292>
				USART2->DR = (data2>>16) & 0xFF;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	0c1b      	lsrs	r3, r3, #16
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <main+0x2c4>)
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	6053      	str	r3, [r2, #4]
		  while ((USART2->SR & USART_SR_TXE) == 0) {} // Ждем пустого регистра
 8000600:	bf00      	nop
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <main+0x2c4>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f9      	beq.n	8000602 <main+0x2aa>
				USART2->DR = (data2>>24) & 0xFF;
 800060e:	4a03      	ldr	r2, [pc, #12]	; (800061c <main+0x2c4>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	0e1b      	lsrs	r3, r3, #24
 8000614:	6053      	str	r3, [r2, #4]
		  continue;
 8000616:	e047      	b.n	80006a8 <main+0x350>
 8000618:	40013800 	.word	0x40013800
 800061c:	40004400 	.word	0x40004400
 8000620:	40012c00 	.word	0x40012c00
 8000624:	40000400 	.word	0x40000400
 8000628:	77359400 	.word	0x77359400
 800062c:	20000028 	.word	0x20000028
 8000630:	20000029 	.word	0x20000029
 8000634:	2000002a 	.word	0x2000002a

      }
      while ((USART2->SR & USART_SR_TXE) == 0) {} // Ждем пустого регистра
 8000638:	bf00      	nop
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <main+0x354>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f9      	beq.n	800063a <main+0x2e2>
      	  	  USART2->DR = flag;
 8000646:	4a19      	ldr	r2, [pc, #100]	; (80006ac <main+0x354>)
 8000648:	787b      	ldrb	r3, [r7, #1]
 800064a:	6053      	str	r3, [r2, #4]
	  while ((USART2->SR & USART_SR_TXE) == 0) {} // Ждем пустого регистра
 800064c:	bf00      	nop
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <main+0x354>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0f9      	beq.n	800064e <main+0x2f6>
	        USART2->DR = data & 0xFF;
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <main+0x354>)
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	6053      	str	r3, [r2, #4]
	  while ((USART2->SR & USART_SR_TXE) == 0) {} // Ждем пустого регистра
 8000662:	bf00      	nop
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <main+0x354>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f9      	beq.n	8000664 <main+0x30c>
	        USART2->DR = (data>>8) & 0xFF;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <main+0x354>)
 8000676:	b2db      	uxtb	r3, r3
 8000678:	6053      	str	r3, [r2, #4]
	  while ((USART2->SR & USART_SR_TXE) == 0) {} // Ждем пустого регистра
 800067a:	bf00      	nop
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <main+0x354>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f9      	beq.n	800067c <main+0x324>
	        USART2->DR = (data>>16) & 0xFF;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	0c1b      	lsrs	r3, r3, #16
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <main+0x354>)
 800068e:	b2db      	uxtb	r3, r3
 8000690:	6053      	str	r3, [r2, #4]
	  while ((USART2->SR & USART_SR_TXE) == 0) {} // Ждем пустого регистра
 8000692:	bf00      	nop
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <main+0x354>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0f9      	beq.n	8000694 <main+0x33c>
	        USART2->DR = (data>>24) & 0xFF;
 80006a0:	4a02      	ldr	r2, [pc, #8]	; (80006ac <main+0x354>)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	0e1b      	lsrs	r3, r3, #24
 80006a6:	6053      	str	r3, [r2, #4]
  {
 80006a8:	e6af      	b.n	800040a <main+0xb2>
 80006aa:	bf00      	nop
 80006ac:	40004400 	.word	0x40004400

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80006b4:	2002      	movs	r0, #2
 80006b6:	f7ff fe23 	bl	8000300 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80006ba:	bf00      	nop
 80006bc:	f7ff fe34 	bl	8000328 <LL_FLASH_GetLatency>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	d1fa      	bne.n	80006bc <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 80006c6:	f7ff fd67 	bl	8000198 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80006ca:	bf00      	nop
 80006cc:	f7ff fd72 	bl	80001b4 <LL_RCC_HSE_IsReady>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d1fa      	bne.n	80006cc <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_2, LL_RCC_PLL_MUL_9);
 80006d6:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80006da:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80006de:	f7ff fdf7 	bl	80002d0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80006e2:	f7ff fdd5 	bl	8000290 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80006e6:	bf00      	nop
 80006e8:	f7ff fde0 	bl	80002ac <LL_RCC_PLL_IsReady>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d1fa      	bne.n	80006e8 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f7ff fd90 	bl	8000218 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80006f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80006fc:	f7ff fda0 	bl	8000240 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff fdb1 	bl	8000268 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000706:	2002      	movs	r0, #2
 8000708:	f7ff fd66 	bl	80001d8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800070c:	bf00      	nop
 800070e:	f7ff fd77 	bl	8000200 <LL_RCC_GetSysClkSource>
 8000712:	4603      	mov	r3, r0
 8000714:	2b08      	cmp	r3, #8
 8000716:	d1fa      	bne.n	800070e <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8000718:	4806      	ldr	r0, [pc, #24]	; (8000734 <SystemClock_Config+0x84>)
 800071a:	f002 fa1f 	bl	8002b5c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800071e:	200f      	movs	r0, #15
 8000720:	f000 feae 	bl	8001480 <HAL_InitTick>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800072a:	f000 f805 	bl	8000738 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	044aa200 	.word	0x044aa200

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	e7fe      	b.n	8000740 <Error_Handler+0x8>
	...

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_MspInit+0x5c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <HAL_MspInit+0x5c>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_MspInit+0x5c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x5c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <HAL_MspInit+0x5c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x5c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_MspInit+0x60>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_MspInit+0x60>)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ee:	f000 fe77 	bl	80014e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	TIM1->SR &= ~ 1;
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <TIM1_UP_IRQHandler+0x54>)
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	4a12      	ldr	r2, [pc, #72]	; (800084c <TIM1_UP_IRQHandler+0x54>)
 8000802:	f023 0301 	bic.w	r3, r3, #1
 8000806:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM1_UP_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

	if (TIM1->CNT == 0)
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <TIM1_UP_IRQHandler+0x54>)
 800080a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080c:	2b00      	cmp	r3, #0
 800080e:	d109      	bne.n	8000824 <TIM1_UP_IRQHandler+0x2c>
		tim1++;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <TIM1_UP_IRQHandler+0x58>)
 8000812:	f993 3000 	ldrsb.w	r3, [r3]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	3301      	adds	r3, #1
 800081a:	b2db      	uxtb	r3, r3
 800081c:	b25a      	sxtb	r2, r3
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <TIM1_UP_IRQHandler+0x58>)
 8000820:	701a      	strb	r2, [r3, #0]
//	if ((TIM1->CR1 & (1<<4)) >> 4 == 0)
//			tim1--;
//	else
//			tim1++;
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000822:	e00e      	b.n	8000842 <TIM1_UP_IRQHandler+0x4a>
	else if (TIM1->CNT == 65535)
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <TIM1_UP_IRQHandler+0x54>)
 8000826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800082c:	4293      	cmp	r3, r2
 800082e:	d108      	bne.n	8000842 <TIM1_UP_IRQHandler+0x4a>
		tim1--;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <TIM1_UP_IRQHandler+0x58>)
 8000832:	f993 3000 	ldrsb.w	r3, [r3]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	3b01      	subs	r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	b25a      	sxtb	r2, r3
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <TIM1_UP_IRQHandler+0x58>)
 8000840:	701a      	strb	r2, [r3, #0]
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40012c00 	.word	0x40012c00
 8000850:	20000028 	.word	0x20000028

08000854 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	TIM2->SR &= ~1;
 8000858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800085c:	691b      	ldr	r3, [r3, #16]
 800085e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000862:	f023 0301 	bic.w	r3, r3, #1
 8000866:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

	if (TIM2->CNT == 0)
 8000868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800086c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086e:	2b00      	cmp	r3, #0
 8000870:	d109      	bne.n	8000886 <TIM2_IRQHandler+0x32>
		tim2++;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <TIM2_IRQHandler+0x5c>)
 8000874:	f993 3000 	ldrsb.w	r3, [r3]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	3301      	adds	r3, #1
 800087c:	b2db      	uxtb	r3, r3
 800087e:	b25a      	sxtb	r2, r3
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <TIM2_IRQHandler+0x5c>)
 8000882:	701a      	strb	r2, [r3, #0]
//	if ((TIM2->CR1 & (1<<4)) >> 4 == 0)
//			tim2--;
//	else
//			tim2++;
  /* USER CODE END TIM2_IRQn 1 */
}
 8000884:	e00f      	b.n	80008a6 <TIM2_IRQHandler+0x52>
	else if (TIM2->CNT == 65535)
 8000886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800088a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000890:	4293      	cmp	r3, r2
 8000892:	d108      	bne.n	80008a6 <TIM2_IRQHandler+0x52>
		tim2--;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <TIM2_IRQHandler+0x5c>)
 8000896:	f993 3000 	ldrsb.w	r3, [r3]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	3b01      	subs	r3, #1
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	b25a      	sxtb	r2, r3
 80008a2:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <TIM2_IRQHandler+0x5c>)
 80008a4:	701a      	strb	r2, [r3, #0]
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000029 	.word	0x20000029

080008b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <USART1_IRQHandler+0x10>)
 80008c6:	f001 f9df 	bl	8001c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000002c 	.word	0x2000002c

080008d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <__NVIC_GetPriorityGrouping+0x18>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	f003 0307 	and.w	r3, r3, #7
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	db0b      	blt.n	8000932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f003 021f 	and.w	r2, r3, #31
 8000920:	4906      	ldr	r1, [pc, #24]	; (800093c <__NVIC_EnableIRQ+0x34>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	095b      	lsrs	r3, r3, #5
 8000928:	2001      	movs	r0, #1
 800092a:	fa00 f202 	lsl.w	r2, r0, r2
 800092e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	e000e100 	.word	0xe000e100

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db0a      	blt.n	800096a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	490c      	ldr	r1, [pc, #48]	; (800098c <__NVIC_SetPriority+0x4c>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	0112      	lsls	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	440b      	add	r3, r1
 8000964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000968:	e00a      	b.n	8000980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4908      	ldr	r1, [pc, #32]	; (8000990 <__NVIC_SetPriority+0x50>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	3b04      	subs	r3, #4
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	440b      	add	r3, r1
 800097e:	761a      	strb	r2, [r3, #24]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f1c3 0307 	rsb	r3, r3, #7
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	bf28      	it	cs
 80009b2:	2304      	movcs	r3, #4
 80009b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3304      	adds	r3, #4
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d902      	bls.n	80009c4 <NVIC_EncodePriority+0x30>
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3b03      	subs	r3, #3
 80009c2:	e000      	b.n	80009c6 <NVIC_EncodePriority+0x32>
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43da      	mvns	r2, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	401a      	ands	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43d9      	mvns	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	4313      	orrs	r3, r2
         );
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3724      	adds	r7, #36	; 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <LL_APB1_GRP1_EnableClock>:
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a02:	69da      	ldr	r2, [r3, #28]
 8000a04:	4907      	ldr	r1, [pc, #28]	; (8000a24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a0e:	69da      	ldr	r2, [r3, #28]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4013      	ands	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000

08000a28 <LL_APB2_GRP1_EnableClock>:
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a32:	699a      	ldr	r2, [r3, #24]
 8000a34:	4907      	ldr	r1, [pc, #28]	; (8000a54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a3e:	699a      	ldr	r2, [r3, #24]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4013      	ands	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <LL_TIM_DisableARRPreload>:
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
	...

08000a78 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d01c      	beq.n	8000ac4 <LL_TIM_IC_SetActiveInput+0x4c>
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d017      	beq.n	8000ac0 <LL_TIM_IC_SetActiveInput+0x48>
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	2b10      	cmp	r3, #16
 8000a94:	d012      	beq.n	8000abc <LL_TIM_IC_SetActiveInput+0x44>
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	2b40      	cmp	r3, #64	; 0x40
 8000a9a:	d00d      	beq.n	8000ab8 <LL_TIM_IC_SetActiveInput+0x40>
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aa2:	d007      	beq.n	8000ab4 <LL_TIM_IC_SetActiveInput+0x3c>
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aaa:	d101      	bne.n	8000ab0 <LL_TIM_IC_SetActiveInput+0x38>
 8000aac:	2305      	movs	r3, #5
 8000aae:	e00a      	b.n	8000ac6 <LL_TIM_IC_SetActiveInput+0x4e>
 8000ab0:	2306      	movs	r3, #6
 8000ab2:	e008      	b.n	8000ac6 <LL_TIM_IC_SetActiveInput+0x4e>
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	e006      	b.n	8000ac6 <LL_TIM_IC_SetActiveInput+0x4e>
 8000ab8:	2303      	movs	r3, #3
 8000aba:	e004      	b.n	8000ac6 <LL_TIM_IC_SetActiveInput+0x4e>
 8000abc:	2302      	movs	r3, #2
 8000abe:	e002      	b.n	8000ac6 <LL_TIM_IC_SetActiveInput+0x4e>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e000      	b.n	8000ac6 <LL_TIM_IC_SetActiveInput+0x4e>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3318      	adds	r3, #24
 8000acc:	4619      	mov	r1, r3
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <LL_TIM_IC_SetActiveInput+0x90>)
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	440b      	add	r3, r1
 8000ad6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	7dfb      	ldrb	r3, [r7, #23]
 8000ade:	490b      	ldr	r1, [pc, #44]	; (8000b0c <LL_TIM_IC_SetActiveInput+0x94>)
 8000ae0:	5ccb      	ldrb	r3, [r1, r3]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	408b      	lsls	r3, r1
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	401a      	ands	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	0c1b      	lsrs	r3, r3, #16
 8000af0:	7df9      	ldrb	r1, [r7, #23]
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <LL_TIM_IC_SetActiveInput+0x94>)
 8000af4:	5c41      	ldrb	r1, [r0, r1]
 8000af6:	408b      	lsls	r3, r1
 8000af8:	431a      	orrs	r2, r3
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	371c      	adds	r7, #28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	08002bf0 	.word	0x08002bf0
 8000b0c:	08002bf8 	.word	0x08002bf8

08000b10 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b087      	sub	sp, #28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d01c      	beq.n	8000b5c <LL_TIM_IC_SetPrescaler+0x4c>
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d017      	beq.n	8000b58 <LL_TIM_IC_SetPrescaler+0x48>
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	2b10      	cmp	r3, #16
 8000b2c:	d012      	beq.n	8000b54 <LL_TIM_IC_SetPrescaler+0x44>
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	2b40      	cmp	r3, #64	; 0x40
 8000b32:	d00d      	beq.n	8000b50 <LL_TIM_IC_SetPrescaler+0x40>
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b3a:	d007      	beq.n	8000b4c <LL_TIM_IC_SetPrescaler+0x3c>
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b42:	d101      	bne.n	8000b48 <LL_TIM_IC_SetPrescaler+0x38>
 8000b44:	2305      	movs	r3, #5
 8000b46:	e00a      	b.n	8000b5e <LL_TIM_IC_SetPrescaler+0x4e>
 8000b48:	2306      	movs	r3, #6
 8000b4a:	e008      	b.n	8000b5e <LL_TIM_IC_SetPrescaler+0x4e>
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	e006      	b.n	8000b5e <LL_TIM_IC_SetPrescaler+0x4e>
 8000b50:	2303      	movs	r3, #3
 8000b52:	e004      	b.n	8000b5e <LL_TIM_IC_SetPrescaler+0x4e>
 8000b54:	2302      	movs	r3, #2
 8000b56:	e002      	b.n	8000b5e <LL_TIM_IC_SetPrescaler+0x4e>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <LL_TIM_IC_SetPrescaler+0x4e>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3318      	adds	r3, #24
 8000b64:	4619      	mov	r1, r3
 8000b66:	7dfb      	ldrb	r3, [r7, #23]
 8000b68:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <LL_TIM_IC_SetPrescaler+0x90>)
 8000b6a:	5cd3      	ldrb	r3, [r2, r3]
 8000b6c:	440b      	add	r3, r1
 8000b6e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	7dfb      	ldrb	r3, [r7, #23]
 8000b76:	490b      	ldr	r1, [pc, #44]	; (8000ba4 <LL_TIM_IC_SetPrescaler+0x94>)
 8000b78:	5ccb      	ldrb	r3, [r1, r3]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	408b      	lsls	r3, r1
 8000b80:	43db      	mvns	r3, r3
 8000b82:	401a      	ands	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	0c1b      	lsrs	r3, r3, #16
 8000b88:	7df9      	ldrb	r1, [r7, #23]
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <LL_TIM_IC_SetPrescaler+0x94>)
 8000b8c:	5c41      	ldrb	r1, [r0, r1]
 8000b8e:	408b      	lsls	r3, r1
 8000b90:	431a      	orrs	r2, r3
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	601a      	str	r2, [r3, #0]
}
 8000b96:	bf00      	nop
 8000b98:	371c      	adds	r7, #28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	08002bf0 	.word	0x08002bf0
 8000ba4:	08002bf8 	.word	0x08002bf8

08000ba8 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d01c      	beq.n	8000bf4 <LL_TIM_IC_SetFilter+0x4c>
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d017      	beq.n	8000bf0 <LL_TIM_IC_SetFilter+0x48>
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	2b10      	cmp	r3, #16
 8000bc4:	d012      	beq.n	8000bec <LL_TIM_IC_SetFilter+0x44>
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	2b40      	cmp	r3, #64	; 0x40
 8000bca:	d00d      	beq.n	8000be8 <LL_TIM_IC_SetFilter+0x40>
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd2:	d007      	beq.n	8000be4 <LL_TIM_IC_SetFilter+0x3c>
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bda:	d101      	bne.n	8000be0 <LL_TIM_IC_SetFilter+0x38>
 8000bdc:	2305      	movs	r3, #5
 8000bde:	e00a      	b.n	8000bf6 <LL_TIM_IC_SetFilter+0x4e>
 8000be0:	2306      	movs	r3, #6
 8000be2:	e008      	b.n	8000bf6 <LL_TIM_IC_SetFilter+0x4e>
 8000be4:	2304      	movs	r3, #4
 8000be6:	e006      	b.n	8000bf6 <LL_TIM_IC_SetFilter+0x4e>
 8000be8:	2303      	movs	r3, #3
 8000bea:	e004      	b.n	8000bf6 <LL_TIM_IC_SetFilter+0x4e>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e002      	b.n	8000bf6 <LL_TIM_IC_SetFilter+0x4e>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <LL_TIM_IC_SetFilter+0x4e>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <LL_TIM_IC_SetFilter+0x90>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	440b      	add	r3, r1
 8000c06:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	490b      	ldr	r1, [pc, #44]	; (8000c3c <LL_TIM_IC_SetFilter+0x94>)
 8000c10:	5ccb      	ldrb	r3, [r1, r3]
 8000c12:	4619      	mov	r1, r3
 8000c14:	23f0      	movs	r3, #240	; 0xf0
 8000c16:	408b      	lsls	r3, r1
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	0c1b      	lsrs	r3, r3, #16
 8000c20:	7df9      	ldrb	r1, [r7, #23]
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <LL_TIM_IC_SetFilter+0x94>)
 8000c24:	5c41      	ldrb	r1, [r0, r1]
 8000c26:	408b      	lsls	r3, r1
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	601a      	str	r2, [r3, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	371c      	adds	r7, #28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	08002bf0 	.word	0x08002bf0
 8000c3c:	08002bf8 	.word	0x08002bf8

08000c40 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d01c      	beq.n	8000c8c <LL_TIM_IC_SetPolarity+0x4c>
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d017      	beq.n	8000c88 <LL_TIM_IC_SetPolarity+0x48>
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	2b10      	cmp	r3, #16
 8000c5c:	d012      	beq.n	8000c84 <LL_TIM_IC_SetPolarity+0x44>
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	2b40      	cmp	r3, #64	; 0x40
 8000c62:	d00d      	beq.n	8000c80 <LL_TIM_IC_SetPolarity+0x40>
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c6a:	d007      	beq.n	8000c7c <LL_TIM_IC_SetPolarity+0x3c>
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c72:	d101      	bne.n	8000c78 <LL_TIM_IC_SetPolarity+0x38>
 8000c74:	2305      	movs	r3, #5
 8000c76:	e00a      	b.n	8000c8e <LL_TIM_IC_SetPolarity+0x4e>
 8000c78:	2306      	movs	r3, #6
 8000c7a:	e008      	b.n	8000c8e <LL_TIM_IC_SetPolarity+0x4e>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	e006      	b.n	8000c8e <LL_TIM_IC_SetPolarity+0x4e>
 8000c80:	2303      	movs	r3, #3
 8000c82:	e004      	b.n	8000c8e <LL_TIM_IC_SetPolarity+0x4e>
 8000c84:	2302      	movs	r3, #2
 8000c86:	e002      	b.n	8000c8e <LL_TIM_IC_SetPolarity+0x4e>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <LL_TIM_IC_SetPolarity+0x4e>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	6a1a      	ldr	r2, [r3, #32]
 8000c94:	7dfb      	ldrb	r3, [r7, #23]
 8000c96:	490a      	ldr	r1, [pc, #40]	; (8000cc0 <LL_TIM_IC_SetPolarity+0x80>)
 8000c98:	5ccb      	ldrb	r3, [r1, r3]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	408b      	lsls	r3, r1
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	7dfb      	ldrb	r3, [r7, #23]
 8000ca6:	4906      	ldr	r1, [pc, #24]	; (8000cc0 <LL_TIM_IC_SetPolarity+0x80>)
 8000ca8:	5ccb      	ldrb	r3, [r1, r3]
 8000caa:	4619      	mov	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	408b      	lsls	r3, r1
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8000cb6:	bf00      	nop
 8000cb8:	371c      	adds	r7, #28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	08002c00 	.word	0x08002c00

08000cc4 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f023 0207 	bic.w	r2, r3, #7
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	605a      	str	r2, [r3, #4]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
	...

08000d2c <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	463b      	mov	r3, r7
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000d50:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d54:	f7ff fe68 	bl	8000a28 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000d58:	2004      	movs	r0, #4
 8000d5a:	f7ff fe65 	bl	8000a28 <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA9   ------> TIM1_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000d5e:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <MX_TIM1_Init+0x108>)
 8000d60:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000d62:	2304      	movs	r3, #4
 8000d64:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	463b      	mov	r3, r7
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4833      	ldr	r0, [pc, #204]	; (8000e38 <MX_TIM1_Init+0x10c>)
 8000d6c:	f001 fbf2 	bl	8002554 <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d70:	f7ff fdbc 	bl	80008ec <__NVIC_GetPriorityGrouping>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fe0a 	bl	8000994 <NVIC_EncodePriority>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4619      	mov	r1, r3
 8000d84:	2019      	movs	r0, #25
 8000d86:	f7ff fddb 	bl	8000940 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d8a:	2019      	movs	r0, #25
 8000d8c:	f7ff fdbc 	bl	8000908 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  LL_TIM_SetEncoderMode(TIM1, LL_TIM_ENCODERMODE_X2_TI1);
 8000d90:	2101      	movs	r1, #1
 8000d92:	482a      	ldr	r0, [pc, #168]	; (8000e3c <MX_TIM1_Init+0x110>)
 8000d94:	f7ff ff96 	bl	8000cc4 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8000d98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4827      	ldr	r0, [pc, #156]	; (8000e3c <MX_TIM1_Init+0x110>)
 8000da0:	f7ff fe6a 	bl	8000a78 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2101      	movs	r1, #1
 8000da8:	4824      	ldr	r0, [pc, #144]	; (8000e3c <MX_TIM1_Init+0x110>)
 8000daa:	f7ff feb1 	bl	8000b10 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2101      	movs	r1, #1
 8000db2:	4822      	ldr	r0, [pc, #136]	; (8000e3c <MX_TIM1_Init+0x110>)
 8000db4:	f7ff fef8 	bl	8000ba8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2101      	movs	r1, #1
 8000dbc:	481f      	ldr	r0, [pc, #124]	; (8000e3c <MX_TIM1_Init+0x110>)
 8000dbe:	f7ff ff3f 	bl	8000c40 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8000dc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	481c      	ldr	r0, [pc, #112]	; (8000e3c <MX_TIM1_Init+0x110>)
 8000dca:	f7ff fe55 	bl	8000a78 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	481a      	ldr	r0, [pc, #104]	; (8000e3c <MX_TIM1_Init+0x110>)
 8000dd4:	f7ff fe9c 	bl	8000b10 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2110      	movs	r1, #16
 8000ddc:	4817      	ldr	r0, [pc, #92]	; (8000e3c <MX_TIM1_Init+0x110>)
 8000dde:	f7ff fee3 	bl	8000ba8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2110      	movs	r1, #16
 8000de6:	4815      	ldr	r0, [pc, #84]	; (8000e3c <MX_TIM1_Init+0x110>)
 8000de8:	f7ff ff2a 	bl	8000c40 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8000df4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000df8:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.RepetitionCounter = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	480c      	ldr	r0, [pc, #48]	; (8000e3c <MX_TIM1_Init+0x110>)
 8000e0a:	f001 fd53 	bl	80028b4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000e0e:	480b      	ldr	r0, [pc, #44]	; (8000e3c <MX_TIM1_Init+0x110>)
 8000e10:	f7ff fe22 	bl	8000a58 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000e14:	2100      	movs	r1, #0
 8000e16:	4809      	ldr	r0, [pc, #36]	; (8000e3c <MX_TIM1_Init+0x110>)
 8000e18:	f7ff ff66 	bl	8000ce8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000e1c:	4807      	ldr	r0, [pc, #28]	; (8000e3c <MX_TIM1_Init+0x110>)
 8000e1e:	f7ff ff75 	bl	8000d0c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->CNT = 32000;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_TIM1_Init+0x110>)
 8000e24:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM1_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	04030003 	.word	0x04030003
 8000e38:	40010800 	.word	0x40010800
 8000e3c:	40012c00 	.word	0x40012c00

08000e40 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff fdc7 	bl	80009f8 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000e6a:	2004      	movs	r0, #4
 8000e6c:	f7ff fddc 	bl	8000a28 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA0-WKUP   ------> TIM2_CH1
  PA1   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000e70:	f240 3303 	movw	r3, #771	; 0x303
 8000e74:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000e76:	2304      	movs	r3, #4
 8000e78:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4838      	ldr	r0, [pc, #224]	; (8000f60 <MX_TIM2_Init+0x120>)
 8000e80:	f001 fb68 	bl	8002554 <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e84:	f7ff fd32 	bl	80008ec <__NVIC_GetPriorityGrouping>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fd80 	bl	8000994 <NVIC_EncodePriority>
 8000e94:	4603      	mov	r3, r0
 8000e96:	4619      	mov	r1, r3
 8000e98:	201c      	movs	r0, #28
 8000e9a:	f7ff fd51 	bl	8000940 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000e9e:	201c      	movs	r0, #28
 8000ea0:	f7ff fd32 	bl	8000908 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X2_TI1);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eaa:	f7ff ff0b 	bl	8000cc4 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8000eae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eb8:	f7ff fdde 	bl	8000a78 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ec4:	f7ff fe24 	bl	8000b10 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2101      	movs	r1, #1
 8000ecc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ed0:	f7ff fe6a 	bl	8000ba8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000edc:	f7ff feb0 	bl	8000c40 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8000ee0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eea:	f7ff fdc5 	bl	8000a78 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ef6:	f7ff fe0b 	bl	8000b10 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2110      	movs	r1, #16
 8000efe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f02:	f7ff fe51 	bl	8000ba8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2110      	movs	r1, #16
 8000f0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f0e:	f7ff fe97 	bl	8000c40 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8000f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f1e:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f2e:	f001 fcc1 	bl	80028b4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000f32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f36:	f7ff fd8f 	bl	8000a58 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f40:	f7ff fed2 	bl	8000ce8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000f44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f48:	f7ff fee0 	bl	8000d0c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->CNT = 32000;
 8000f4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f50:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM2_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	; 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40010800 	.word	0x40010800

08000f64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f7ff fd35 	bl	80009f8 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000f8e:	2004      	movs	r0, #4
 8000f90:	f7ff fd4a 	bl	8000a28 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PA6   ------> TIM3_CH1
  PA7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000f94:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8000f98:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4831      	ldr	r0, [pc, #196]	; (8001068 <MX_TIM3_Init+0x104>)
 8000fa4:	f001 fad6 	bl	8002554 <LL_GPIO_Init>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fa8:	f7ff fca0 	bl	80008ec <__NVIC_GetPriorityGrouping>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fcee 	bl	8000994 <NVIC_EncodePriority>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4619      	mov	r1, r3
 8000fbc:	201d      	movs	r0, #29
 8000fbe:	f7ff fcbf 	bl	8000940 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8000fc2:	201d      	movs	r0, #29
 8000fc4:	f7ff fca0 	bl	8000908 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4828      	ldr	r0, [pc, #160]	; (800106c <MX_TIM3_Init+0x108>)
 8000fcc:	f7ff fe7a 	bl	8000cc4 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8000fd0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4825      	ldr	r0, [pc, #148]	; (800106c <MX_TIM3_Init+0x108>)
 8000fd8:	f7ff fd4e 	bl	8000a78 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4822      	ldr	r0, [pc, #136]	; (800106c <MX_TIM3_Init+0x108>)
 8000fe2:	f7ff fd95 	bl	8000b10 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4820      	ldr	r0, [pc, #128]	; (800106c <MX_TIM3_Init+0x108>)
 8000fec:	f7ff fddc 	bl	8000ba8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	481d      	ldr	r0, [pc, #116]	; (800106c <MX_TIM3_Init+0x108>)
 8000ff6:	f7ff fe23 	bl	8000c40 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8000ffa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ffe:	2110      	movs	r1, #16
 8001000:	481a      	ldr	r0, [pc, #104]	; (800106c <MX_TIM3_Init+0x108>)
 8001002:	f7ff fd39 	bl	8000a78 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001006:	2200      	movs	r2, #0
 8001008:	2110      	movs	r1, #16
 800100a:	4818      	ldr	r0, [pc, #96]	; (800106c <MX_TIM3_Init+0x108>)
 800100c:	f7ff fd80 	bl	8000b10 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001010:	2200      	movs	r2, #0
 8001012:	2110      	movs	r1, #16
 8001014:	4815      	ldr	r0, [pc, #84]	; (800106c <MX_TIM3_Init+0x108>)
 8001016:	f7ff fdc7 	bl	8000ba8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800101a:	2200      	movs	r2, #0
 800101c:	2110      	movs	r1, #16
 800101e:	4813      	ldr	r0, [pc, #76]	; (800106c <MX_TIM3_Init+0x108>)
 8001020:	f7ff fe0e 	bl	8000c40 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 800102c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001030:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	480b      	ldr	r0, [pc, #44]	; (800106c <MX_TIM3_Init+0x108>)
 800103e:	f001 fc39 	bl	80028b4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <MX_TIM3_Init+0x108>)
 8001044:	f7ff fd08 	bl	8000a58 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001048:	2100      	movs	r1, #0
 800104a:	4808      	ldr	r0, [pc, #32]	; (800106c <MX_TIM3_Init+0x108>)
 800104c:	f7ff fe4c 	bl	8000ce8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001050:	4806      	ldr	r0, [pc, #24]	; (800106c <MX_TIM3_Init+0x108>)
 8001052:	f7ff fe5b 	bl	8000d0c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->CNT = 32000;
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <MX_TIM3_Init+0x108>)
 8001058:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM3_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40010800 	.word	0x40010800
 800106c:	40000400 	.word	0x40000400

08001070 <__NVIC_GetPriorityGrouping>:
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4906      	ldr	r1, [pc, #24]	; (80010c0 <__NVIC_EnableIRQ+0x34>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <LL_APB1_GRP1_EnableClock>:
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001186:	69da      	ldr	r2, [r3, #28]
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4313      	orrs	r3, r2
 800118e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001192:	69da      	ldr	r2, [r3, #28]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4013      	ands	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000

080011ac <LL_APB2_GRP1_EnableClock>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011b6:	699a      	ldr	r2, [r3, #24]
 80011b8:	4907      	ldr	r1, [pc, #28]	; (80011d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4313      	orrs	r3, r2
 80011be:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011c2:	699a      	ldr	r2, [r3, #24]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4013      	ands	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	60da      	str	r2, [r3, #12]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	615a      	str	r2, [r3, #20]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <MX_USART1_UART_Init+0x50>)
 800122c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800125c:	f000 fcc6 	bl	8001bec <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001266:	f7ff fa67 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000002c 	.word	0x2000002c
 8001274:	40013800 	.word	0x40013800

08001278 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	; 0x30
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]
 800128e:	615a      	str	r2, [r3, #20]
 8001290:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	463b      	mov	r3, r7
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80012a0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012a4:	f7ff ff6a 	bl	800117c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80012a8:	2004      	movs	r0, #4
 80012aa:	f7ff ff7f 	bl	80011ac <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80012ae:	f240 4304 	movw	r3, #1028	; 0x404
 80012b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012b4:	2309      	movs	r3, #9
 80012b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	463b      	mov	r3, r7
 80012c2:	4619      	mov	r1, r3
 80012c4:	481d      	ldr	r0, [pc, #116]	; (800133c <MX_USART2_UART_Init+0xc4>)
 80012c6:	f001 f945 	bl	8002554 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80012ca:	f640 0308 	movw	r3, #2056	; 0x808
 80012ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80012d0:	2304      	movs	r3, #4
 80012d2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	463b      	mov	r3, r7
 80012d6:	4619      	mov	r1, r3
 80012d8:	4818      	ldr	r0, [pc, #96]	; (800133c <MX_USART2_UART_Init+0xc4>)
 80012da:	f001 f93b 	bl	8002554 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012de:	f7ff fec7 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff15 	bl	8001118 <NVIC_EncodePriority>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4619      	mov	r1, r3
 80012f2:	2026      	movs	r0, #38	; 0x26
 80012f4:	f7ff fee6 	bl	80010c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80012f8:	2026      	movs	r0, #38	; 0x26
 80012fa:	f7ff fec7 	bl	800108c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80012fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001302:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001310:	230c      	movs	r3, #12
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4807      	ldr	r0, [pc, #28]	; (8001340 <MX_USART2_UART_Init+0xc8>)
 8001324:	f001 fbba 	bl	8002a9c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_USART2_UART_Init+0xc8>)
 800132a:	f7ff ff66 	bl	80011fa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800132e:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_USART2_UART_Init+0xc8>)
 8001330:	f7ff ff54 	bl	80011dc <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3730      	adds	r7, #48	; 0x30
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40010800 	.word	0x40010800
 8001340:	40004400 	.word	0x40004400

08001344 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a26      	ldr	r2, [pc, #152]	; (80013f8 <HAL_UART_MspInit+0xb4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d145      	bne.n	80013f0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001364:	4b25      	ldr	r3, [pc, #148]	; (80013fc <HAL_UART_MspInit+0xb8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a24      	ldr	r2, [pc, #144]	; (80013fc <HAL_UART_MspInit+0xb8>)
 800136a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b22      	ldr	r3, [pc, #136]	; (80013fc <HAL_UART_MspInit+0xb8>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HAL_UART_MspInit+0xb8>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a1e      	ldr	r2, [pc, #120]	; (80013fc <HAL_UART_MspInit+0xb8>)
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <HAL_UART_MspInit+0xb8>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001394:	2340      	movs	r3, #64	; 0x40
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4816      	ldr	r0, [pc, #88]	; (8001400 <HAL_UART_MspInit+0xbc>)
 80013a8:	f000 fa6a 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4810      	ldr	r0, [pc, #64]	; (8001400 <HAL_UART_MspInit+0xbc>)
 80013c0:	f000 fa5e 	bl	8001880 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_UART_MspInit+0xc0>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_UART_MspInit+0xc0>)
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2025      	movs	r0, #37	; 0x25
 80013e6:	f000 f964 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013ea:	2025      	movs	r0, #37	; 0x25
 80013ec:	f000 f97d 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	; 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40013800 	.word	0x40013800
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010c00 	.word	0x40010c00
 8001404:	40010000 	.word	0x40010000

08001408 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	; (8001440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	; (800144c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800142e:	f7ff fa57 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001432:	f001 fba1 	bl	8002b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001436:	f7fe ff8f 	bl	8000358 <main>
  bx lr
 800143a:	4770      	bx	lr
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001444:	08002c10 	.word	0x08002c10
  ldr r2, =_sbss
 8001448:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800144c:	20000074 	.word	0x20000074

08001450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC1_2_IRQHandler>
	...

08001454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_Init+0x28>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a07      	ldr	r2, [pc, #28]	; (800147c <HAL_Init+0x28>)
 800145e:	f043 0310 	orr.w	r3, r3, #16
 8001462:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001464:	2003      	movs	r0, #3
 8001466:	f000 f919 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800146a:	200f      	movs	r0, #15
 800146c:	f000 f808 	bl	8001480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001470:	f7ff f968 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40022000 	.word	0x40022000

08001480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_InitTick+0x54>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_InitTick+0x58>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001496:	fbb3 f3f1 	udiv	r3, r3, r1
 800149a:	fbb2 f3f3 	udiv	r3, r2, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f931 	bl	8001706 <HAL_SYSTICK_Config>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00e      	b.n	80014cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	d80a      	bhi.n	80014ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b4:	2200      	movs	r2, #0
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014bc:	f000 f8f9 	bl	80016b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c0:	4a06      	ldr	r2, [pc, #24]	; (80014dc <HAL_InitTick+0x5c>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e000      	b.n	80014cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000008 	.word	0x20000008
 80014dc:	20000004 	.word	0x20000004

080014e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_IncTick+0x1c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_IncTick+0x20>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a03      	ldr	r2, [pc, #12]	; (8001500 <HAL_IncTick+0x20>)
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000070 	.word	0x20000070

08001504 <__NVIC_SetPriorityGrouping>:
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001520:	4013      	ands	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800152c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_GetPriorityGrouping>:
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <__NVIC_GetPriorityGrouping+0x18>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	f003 0307 	and.w	r3, r3, #7
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_EnableIRQ>:
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	db0b      	blt.n	8001592 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	4906      	ldr	r1, [pc, #24]	; (800159c <__NVIC_EnableIRQ+0x34>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	2001      	movs	r0, #1
 800158a:	fa00 f202 	lsl.w	r2, r0, r2
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800167c:	f7ff ff90 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff2d 	bl	8001504 <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff42 	bl	800154c <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff90 	bl	80015f4 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5f 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff35 	bl	8001568 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffa2 	bl	8001658 <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800171e:	b480      	push	{r7}
 8001720:	b085      	sub	sp, #20
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001730:	2b02      	cmp	r3, #2
 8001732:	d008      	beq.n	8001746 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2204      	movs	r2, #4
 8001738:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e020      	b.n	8001788 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 020e 	bic.w	r2, r2, #14
 8001754:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0201 	bic.w	r2, r2, #1
 8001764:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f202 	lsl.w	r2, r1, r2
 8001774:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001786:	7bfb      	ldrb	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
	...

08001794 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d005      	beq.n	80017b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2204      	movs	r2, #4
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e051      	b.n	800185a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 020e 	bic.w	r2, r2, #14
 80017c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0201 	bic.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a22      	ldr	r2, [pc, #136]	; (8001864 <HAL_DMA_Abort_IT+0xd0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d029      	beq.n	8001834 <HAL_DMA_Abort_IT+0xa0>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a20      	ldr	r2, [pc, #128]	; (8001868 <HAL_DMA_Abort_IT+0xd4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d022      	beq.n	8001830 <HAL_DMA_Abort_IT+0x9c>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1f      	ldr	r2, [pc, #124]	; (800186c <HAL_DMA_Abort_IT+0xd8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d01a      	beq.n	800182a <HAL_DMA_Abort_IT+0x96>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <HAL_DMA_Abort_IT+0xdc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d012      	beq.n	8001824 <HAL_DMA_Abort_IT+0x90>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <HAL_DMA_Abort_IT+0xe0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d00a      	beq.n	800181e <HAL_DMA_Abort_IT+0x8a>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1a      	ldr	r2, [pc, #104]	; (8001878 <HAL_DMA_Abort_IT+0xe4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d102      	bne.n	8001818 <HAL_DMA_Abort_IT+0x84>
 8001812:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001816:	e00e      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 8001818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800181c:	e00b      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 800181e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001822:	e008      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 8001824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001828:	e005      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 800182a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182e:	e002      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 8001830:	2310      	movs	r3, #16
 8001832:	e000      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 8001834:	2301      	movs	r3, #1
 8001836:	4a11      	ldr	r2, [pc, #68]	; (800187c <HAL_DMA_Abort_IT+0xe8>)
 8001838:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
    } 
  }
  return status;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40020008 	.word	0x40020008
 8001868:	4002001c 	.word	0x4002001c
 800186c:	40020030 	.word	0x40020030
 8001870:	40020044 	.word	0x40020044
 8001874:	40020058 	.word	0x40020058
 8001878:	4002006c 	.word	0x4002006c
 800187c:	40020000 	.word	0x40020000

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b08b      	sub	sp, #44	; 0x2c
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	e169      	b.n	8001b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001894:	2201      	movs	r2, #1
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f040 8158 	bne.w	8001b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4a9a      	ldr	r2, [pc, #616]	; (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d05e      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018bc:	4a98      	ldr	r2, [pc, #608]	; (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d875      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018c2:	4a98      	ldr	r2, [pc, #608]	; (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d058      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018c8:	4a96      	ldr	r2, [pc, #600]	; (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d86f      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018ce:	4a96      	ldr	r2, [pc, #600]	; (8001b28 <HAL_GPIO_Init+0x2a8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d052      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018d4:	4a94      	ldr	r2, [pc, #592]	; (8001b28 <HAL_GPIO_Init+0x2a8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d869      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018da:	4a94      	ldr	r2, [pc, #592]	; (8001b2c <HAL_GPIO_Init+0x2ac>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d04c      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018e0:	4a92      	ldr	r2, [pc, #584]	; (8001b2c <HAL_GPIO_Init+0x2ac>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d863      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018e6:	4a92      	ldr	r2, [pc, #584]	; (8001b30 <HAL_GPIO_Init+0x2b0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d046      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018ec:	4a90      	ldr	r2, [pc, #576]	; (8001b30 <HAL_GPIO_Init+0x2b0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d85d      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018f2:	2b12      	cmp	r3, #18
 80018f4:	d82a      	bhi.n	800194c <HAL_GPIO_Init+0xcc>
 80018f6:	2b12      	cmp	r3, #18
 80018f8:	d859      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018fa:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <HAL_GPIO_Init+0x80>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	0800197b 	.word	0x0800197b
 8001904:	08001955 	.word	0x08001955
 8001908:	08001967 	.word	0x08001967
 800190c:	080019a9 	.word	0x080019a9
 8001910:	080019af 	.word	0x080019af
 8001914:	080019af 	.word	0x080019af
 8001918:	080019af 	.word	0x080019af
 800191c:	080019af 	.word	0x080019af
 8001920:	080019af 	.word	0x080019af
 8001924:	080019af 	.word	0x080019af
 8001928:	080019af 	.word	0x080019af
 800192c:	080019af 	.word	0x080019af
 8001930:	080019af 	.word	0x080019af
 8001934:	080019af 	.word	0x080019af
 8001938:	080019af 	.word	0x080019af
 800193c:	080019af 	.word	0x080019af
 8001940:	080019af 	.word	0x080019af
 8001944:	0800195d 	.word	0x0800195d
 8001948:	08001971 	.word	0x08001971
 800194c:	4a79      	ldr	r2, [pc, #484]	; (8001b34 <HAL_GPIO_Init+0x2b4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001952:	e02c      	b.n	80019ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e029      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	3304      	adds	r3, #4
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e024      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	3308      	adds	r3, #8
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e01f      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	330c      	adds	r3, #12
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e01a      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001982:	2304      	movs	r3, #4
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e013      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001990:	2308      	movs	r3, #8
 8001992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	611a      	str	r2, [r3, #16]
          break;
 800199a:	e009      	b.n	80019b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	615a      	str	r2, [r3, #20]
          break;
 80019a6:	e003      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
          break;
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          break;
 80019ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	d801      	bhi.n	80019ba <HAL_GPIO_Init+0x13a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	e001      	b.n	80019be <HAL_GPIO_Init+0x13e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3304      	adds	r3, #4
 80019be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2bff      	cmp	r3, #255	; 0xff
 80019c4:	d802      	bhi.n	80019cc <HAL_GPIO_Init+0x14c>
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x152>
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	3b08      	subs	r3, #8
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	210f      	movs	r1, #15
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	401a      	ands	r2, r3
 80019e4:	6a39      	ldr	r1, [r7, #32]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	431a      	orrs	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80b1 	beq.w	8001b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a00:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a4c      	ldr	r2, [pc, #304]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a18:	4a48      	ldr	r2, [pc, #288]	; (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a40      	ldr	r2, [pc, #256]	; (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d013      	beq.n	8001a6c <HAL_GPIO_Init+0x1ec>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a3f      	ldr	r2, [pc, #252]	; (8001b44 <HAL_GPIO_Init+0x2c4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00d      	beq.n	8001a68 <HAL_GPIO_Init+0x1e8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3e      	ldr	r2, [pc, #248]	; (8001b48 <HAL_GPIO_Init+0x2c8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_Init+0x1e4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3d      	ldr	r2, [pc, #244]	; (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_GPIO_Init+0x1e0>
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e006      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a60:	2304      	movs	r3, #4
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	4093      	lsls	r3, r2
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a7e:	492f      	ldr	r1, [pc, #188]	; (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	492c      	ldr	r1, [pc, #176]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4928      	ldr	r1, [pc, #160]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4922      	ldr	r1, [pc, #136]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	491e      	ldr	r1, [pc, #120]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	4918      	ldr	r1, [pc, #96]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4914      	ldr	r1, [pc, #80]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d021      	beq.n	8001b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	490e      	ldr	r1, [pc, #56]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
 8001b1c:	e021      	b.n	8001b62 <HAL_GPIO_Init+0x2e2>
 8001b1e:	bf00      	nop
 8001b20:	10320000 	.word	0x10320000
 8001b24:	10310000 	.word	0x10310000
 8001b28:	10220000 	.word	0x10220000
 8001b2c:	10210000 	.word	0x10210000
 8001b30:	10120000 	.word	0x10120000
 8001b34:	10110000 	.word	0x10110000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40010800 	.word	0x40010800
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	40011400 	.word	0x40011400
 8001b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4909      	ldr	r1, [pc, #36]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	3301      	adds	r3, #1
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f47f ae8e 	bne.w	8001894 <HAL_GPIO_Init+0x14>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	372c      	adds	r7, #44	; 0x2c
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40010400 	.word	0x40010400

08001b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b8c:	4b02      	ldr	r3, [pc, #8]	; (8001b98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	20000000 	.word	0x20000000

08001b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ba0:	f7ff fff2 	bl	8001b88 <HAL_RCC_GetHCLKFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	0a1b      	lsrs	r3, r3, #8
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4903      	ldr	r1, [pc, #12]	; (8001bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	08002be8 	.word	0x08002be8

08001bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_RCC_GetHCLKFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	0adb      	lsrs	r3, r3, #11
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	4903      	ldr	r1, [pc, #12]	; (8001be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000
 8001be8:	08002be8 	.word	0x08002be8

08001bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e03f      	b.n	8001c7e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fb96 	bl	8001344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2224      	movs	r2, #36	; 0x24
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 fb49 	bl	80022c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10d      	bne.n	8001cda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_UART_IRQHandler+0x52>
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fa4f 	bl	8002176 <UART_Receive_IT>
      return;
 8001cd8:	e17b      	b.n	8001fd2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80b1 	beq.w	8001e44 <HAL_UART_IRQHandler+0x1bc>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <HAL_UART_IRQHandler+0x70>
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80a6 	beq.w	8001e44 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00a      	beq.n	8001d18 <HAL_UART_IRQHandler+0x90>
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00a      	beq.n	8001d38 <HAL_UART_IRQHandler+0xb0>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f043 0202 	orr.w	r2, r3, #2
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <HAL_UART_IRQHandler+0xd0>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f043 0204 	orr.w	r2, r3, #4
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00f      	beq.n	8001d82 <HAL_UART_IRQHandler+0xfa>
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d104      	bne.n	8001d76 <HAL_UART_IRQHandler+0xee>
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f043 0208 	orr.w	r2, r3, #8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 811e 	beq.w	8001fc8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <HAL_UART_IRQHandler+0x11e>
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f9e8 	bl	8002176 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf14      	ite	ne
 8001db4:	2301      	movne	r3, #1
 8001db6:	2300      	moveq	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <HAL_UART_IRQHandler+0x146>
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d031      	beq.n	8001e32 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f92a 	bl	8002028 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d023      	beq.n	8001e2a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001df0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d013      	beq.n	8001e22 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfe:	4a76      	ldr	r2, [pc, #472]	; (8001fd8 <HAL_UART_IRQHandler+0x350>)
 8001e00:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fcc4 	bl	8001794 <HAL_DMA_Abort_IT>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d016      	beq.n	8001e40 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e20:	e00e      	b.n	8001e40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8ec 	bl	8002000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e28:	e00a      	b.n	8001e40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8e8 	bl	8002000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e30:	e006      	b.n	8001e40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8e4 	bl	8002000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001e3e:	e0c3      	b.n	8001fc8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e40:	bf00      	nop
    return;
 8001e42:	e0c1      	b.n	8001fc8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	f040 80a1 	bne.w	8001f90 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 809b 	beq.w	8001f90 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8095 	beq.w	8001f90 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d04e      	beq.n	8001f28 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001e94:	8a3b      	ldrh	r3, [r7, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8098 	beq.w	8001fcc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001ea0:	8a3a      	ldrh	r2, [r7, #16]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	f080 8092 	bcs.w	8001fcc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	8a3a      	ldrh	r2, [r7, #16]
 8001eac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d02b      	beq.n	8001f10 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ec6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ee6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0210 	bic.w	r2, r2, #16
 8001f04:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fc07 	bl	800171e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f876 	bl	8002012 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001f26:	e051      	b.n	8001fcc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d047      	beq.n	8001fd0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001f40:	8a7b      	ldrh	r3, [r7, #18]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d044      	beq.n	8001fd0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f54:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0210 	bic.w	r2, r2, #16
 8001f82:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001f84:	8a7b      	ldrh	r3, [r7, #18]
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f842 	bl	8002012 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001f8e:	e01f      	b.n	8001fd0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_UART_IRQHandler+0x324>
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f87f 	bl	80020a8 <UART_Transmit_IT>
    return;
 8001faa:	e012      	b.n	8001fd2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00d      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x34a>
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f8c0 	bl	8002146 <UART_EndTransmit_IT>
    return;
 8001fc6:	e004      	b.n	8001fd2 <HAL_UART_IRQHandler+0x34a>
    return;
 8001fc8:	bf00      	nop
 8001fca:	e002      	b.n	8001fd2 <HAL_UART_IRQHandler+0x34a>
      return;
 8001fcc:	bf00      	nop
 8001fce:	e000      	b.n	8001fd2 <HAL_UART_IRQHandler+0x34a>
      return;
 8001fd0:	bf00      	nop
  }
}
 8001fd2:	3728      	adds	r7, #40	; 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	08002081 	.word	0x08002081

08001fdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800203e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	2b01      	cmp	r3, #1
 8002056:	d107      	bne.n	8002068 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0210 	bic.w	r2, r2, #16
 8002066:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f7ff ffb0 	bl	8002000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b21      	cmp	r3, #33	; 0x21
 80020ba:	d13e      	bne.n	800213a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c4:	d114      	bne.n	80020f0 <UART_Transmit_IT+0x48>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d110      	bne.n	80020f0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	1c9a      	adds	r2, r3, #2
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	621a      	str	r2, [r3, #32]
 80020ee:	e008      	b.n	8002102 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	1c59      	adds	r1, r3, #1
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6211      	str	r1, [r2, #32]
 80020fa:	781a      	ldrb	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29b      	uxth	r3, r3
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	4619      	mov	r1, r3
 8002110:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10f      	bne.n	8002136 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002124:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002134:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	e000      	b.n	800213c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800213a:	2302      	movs	r3, #2
  }
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800215c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ff38 	bl	8001fdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b22      	cmp	r3, #34	; 0x22
 8002188:	f040 8099 	bne.w	80022be <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002194:	d117      	bne.n	80021c6 <UART_Receive_IT+0x50>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d113      	bne.n	80021c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	1c9a      	adds	r2, r3, #2
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
 80021c4:	e026      	b.n	8002214 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d8:	d007      	beq.n	80021ea <UART_Receive_IT+0x74>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10a      	bne.n	80021f8 <UART_Receive_IT+0x82>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e008      	b.n	800220a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002204:	b2da      	uxtb	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	b29b      	uxth	r3, r3
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4619      	mov	r1, r3
 8002222:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002224:	2b00      	cmp	r3, #0
 8002226:	d148      	bne.n	80022ba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0220 	bic.w	r2, r2, #32
 8002236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	2b01      	cmp	r3, #1
 8002266:	d123      	bne.n	80022b0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0210 	bic.w	r2, r2, #16
 800227c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b10      	cmp	r3, #16
 800228a:	d10a      	bne.n	80022a2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022a6:	4619      	mov	r1, r3
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff feb2 	bl	8002012 <HAL_UARTEx_RxEventCallback>
 80022ae:	e002      	b.n	80022b6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff fe9c 	bl	8001fee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e002      	b.n	80022c0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e000      	b.n	80022c0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80022be:	2302      	movs	r3, #2
  }
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002302:	f023 030c 	bic.w	r3, r3, #12
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	430b      	orrs	r3, r1
 800230e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a2c      	ldr	r2, [pc, #176]	; (80023dc <UART_SetConfig+0x114>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d103      	bne.n	8002338 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002330:	f7ff fc48 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	e002      	b.n	800233e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002338:	f7ff fc30 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 800233c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	009a      	lsls	r2, r3, #2
 8002348:	441a      	add	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <UART_SetConfig+0x118>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	0119      	lsls	r1, r3, #4
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	009a      	lsls	r2, r3, #2
 8002368:	441a      	add	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	fbb2 f2f3 	udiv	r2, r2, r3
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <UART_SetConfig+0x118>)
 8002376:	fba3 0302 	umull	r0, r3, r3, r2
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2064      	movs	r0, #100	; 0x64
 800237e:	fb00 f303 	mul.w	r3, r0, r3
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	3332      	adds	r3, #50	; 0x32
 8002388:	4a15      	ldr	r2, [pc, #84]	; (80023e0 <UART_SetConfig+0x118>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002394:	4419      	add	r1, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	009a      	lsls	r2, r3, #2
 80023a0:	441a      	add	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <UART_SetConfig+0x118>)
 80023ae:	fba3 0302 	umull	r0, r3, r3, r2
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2064      	movs	r0, #100	; 0x64
 80023b6:	fb00 f303 	mul.w	r3, r0, r3
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	3332      	adds	r3, #50	; 0x32
 80023c0:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <UART_SetConfig+0x118>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	f003 020f 	and.w	r2, r3, #15
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	440a      	add	r2, r1
 80023d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40013800 	.word	0x40013800
 80023e0:	51eb851f 	.word	0x51eb851f

080023e4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80023e4:	b490      	push	{r4, r7}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	0e1b      	lsrs	r3, r3, #24
 80023f8:	4413      	add	r3, r2
 80023fa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80023fc:	6822      	ldr	r2, [r4, #0]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	210f      	movs	r1, #15
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	401a      	ands	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	61bb      	str	r3, [r7, #24]
  return result;
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	4313      	orrs	r3, r2
 800243c:	6023      	str	r3, [r4, #0]
}
 800243e:	bf00      	nop
 8002440:	3720      	adds	r7, #32
 8002442:	46bd      	mov	sp, r7
 8002444:	bc90      	pop	{r4, r7}
 8002446:	4770      	bx	lr

08002448 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002448:	b490      	push	{r4, r7}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	461a      	mov	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	0e1b      	lsrs	r3, r3, #24
 800245c:	4413      	add	r3, r2
 800245e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002460:	6822      	ldr	r2, [r4, #0]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	613b      	str	r3, [r7, #16]
  return result;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	2103      	movs	r1, #3
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	401a      	ands	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	61bb      	str	r3, [r7, #24]
  return result;
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	4313      	orrs	r3, r2
 80024a0:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 80024a2:	bf00      	nop
 80024a4:	3720      	adds	r7, #32
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc90      	pop	{r4, r7}
 80024aa:	4770      	bx	lr

080024ac <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 80024ac:	b490      	push	{r4, r7}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	461a      	mov	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	0e1b      	lsrs	r3, r3, #24
 80024c0:	4413      	add	r3, r2
 80024c2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80024c4:	6822      	ldr	r2, [r4, #0]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	613b      	str	r3, [r7, #16]
  return result;
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	2104      	movs	r1, #4
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	401a      	ands	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	61bb      	str	r3, [r7, #24]
  return result;
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	4313      	orrs	r3, r2
 8002504:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8002506:	bf00      	nop
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bc90      	pop	{r4, r7}
 800250e:	4770      	bx	lr

08002510 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	43db      	mvns	r3, r3
 8002526:	401a      	ands	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	613b      	str	r3, [r7, #16]
  return result;
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	4619      	mov	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	408b      	lsls	r3, r1
 8002544:	431a      	orrs	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	60da      	str	r2, [r3, #12]
}
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	60fb      	str	r3, [r7, #12]
  return result;
 8002574:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800257e:	e044      	b.n	800260a <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	409a      	lsls	r2, r3
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d03a      	beq.n	8002604 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	2b07      	cmp	r3, #7
 8002592:	d806      	bhi.n	80025a2 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002594:	f240 1201 	movw	r2, #257	; 0x101
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	e008      	b.n	80025b4 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3b08      	subs	r3, #8
 80025a6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025b2:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d106      	bne.n	80025ca <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	461a      	mov	r2, r3
 80025c2:	69b9      	ldr	r1, [r7, #24]
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ffa3 	bl	8002510 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	461a      	mov	r2, r3
 80025d0:	69b9      	ldr	r1, [r7, #24]
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ff06 	bl	80023e4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d003      	beq.n	80025e8 <LL_GPIO_Init+0x94>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	d10d      	bne.n	8002604 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	461a      	mov	r2, r3
 80025ee:	69b9      	ldr	r1, [r7, #24]
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff ff29 	bl	8002448 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	461a      	mov	r2, r3
 80025fc:	69b9      	ldr	r1, [r7, #24]
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ff54 	bl	80024ac <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	3301      	adds	r3, #1
 8002608:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1b4      	bne.n	8002580 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <LL_RCC_GetSysClkSource>:
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <LL_RCC_GetSysClkSource+0x14>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 030c 	and.w	r3, r3, #12
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	40021000 	.word	0x40021000

08002638 <LL_RCC_GetAHBPrescaler>:
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <LL_RCC_GetAHBPrescaler+0x14>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	40021000 	.word	0x40021000

08002650 <LL_RCC_GetAPB1Prescaler>:
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	40021000 	.word	0x40021000

08002668 <LL_RCC_GetAPB2Prescaler>:
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <LL_RCC_GetAPB2Prescaler+0x14>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	40021000 	.word	0x40021000

08002680 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <LL_RCC_PLL_GetMainSource+0x14>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	40021000 	.word	0x40021000

08002698 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <LL_RCC_PLL_GetMultiplicator+0x14>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40021000 	.word	0x40021000

080026b0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <LL_RCC_PLL_GetPrediv+0x18>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	0c5b      	lsrs	r3, r3, #17
 80026ba:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000

080026cc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80026d4:	f000 f820 	bl	8002718 <RCC_GetSystemClockFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f840 	bl	8002768 <RCC_GetHCLKClockFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f84e 	bl	8002794 <RCC_GetPCLK1ClockFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f85a 	bl	80027bc <RCC_GetPCLK2ClockFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60da      	str	r2, [r3, #12]
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002722:	f7ff ff7d 	bl	8002620 <LL_RCC_GetSysClkSource>
 8002726:	4603      	mov	r3, r0
 8002728:	2b08      	cmp	r3, #8
 800272a:	d00c      	beq.n	8002746 <RCC_GetSystemClockFreq+0x2e>
 800272c:	2b08      	cmp	r3, #8
 800272e:	d80e      	bhi.n	800274e <RCC_GetSystemClockFreq+0x36>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <RCC_GetSystemClockFreq+0x22>
 8002734:	2b04      	cmp	r3, #4
 8002736:	d003      	beq.n	8002740 <RCC_GetSystemClockFreq+0x28>
 8002738:	e009      	b.n	800274e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <RCC_GetSystemClockFreq+0x48>)
 800273c:	607b      	str	r3, [r7, #4]
      break;
 800273e:	e009      	b.n	8002754 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <RCC_GetSystemClockFreq+0x4c>)
 8002742:	607b      	str	r3, [r7, #4]
      break;
 8002744:	e006      	b.n	8002754 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002746:	f000 f84d 	bl	80027e4 <RCC_PLL_GetFreqDomain_SYS>
 800274a:	6078      	str	r0, [r7, #4]
      break;
 800274c:	e002      	b.n	8002754 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800274e:	4b04      	ldr	r3, [pc, #16]	; (8002760 <RCC_GetSystemClockFreq+0x48>)
 8002750:	607b      	str	r3, [r7, #4]
      break;
 8002752:	bf00      	nop
  }

  return frequency;
 8002754:	687b      	ldr	r3, [r7, #4]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	007a1200 	.word	0x007a1200
 8002764:	00f42400 	.word	0x00f42400

08002768 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002770:	f7ff ff62 	bl	8002638 <LL_RCC_GetAHBPrescaler>
 8002774:	4603      	mov	r3, r0
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <RCC_GetHCLKClockFreq+0x28>)
 800277e:	5cd3      	ldrb	r3, [r2, r3]
 8002780:	461a      	mov	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	40d3      	lsrs	r3, r2
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	08002bd8 	.word	0x08002bd8

08002794 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800279c:	f7ff ff58 	bl	8002650 <LL_RCC_GetAPB1Prescaler>
 80027a0:	4603      	mov	r3, r0
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <RCC_GetPCLK1ClockFreq+0x24>)
 80027a6:	5cd3      	ldrb	r3, [r2, r3]
 80027a8:	461a      	mov	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	40d3      	lsrs	r3, r2
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	08002be8 	.word	0x08002be8

080027bc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80027c4:	f7ff ff50 	bl	8002668 <LL_RCC_GetAPB2Prescaler>
 80027c8:	4603      	mov	r3, r0
 80027ca:	0adb      	lsrs	r3, r3, #11
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <RCC_GetPCLK2ClockFreq+0x24>)
 80027ce:	5cd3      	ldrb	r3, [r2, r3]
 80027d0:	461a      	mov	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	40d3      	lsrs	r3, r2
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	08002be8 	.word	0x08002be8

080027e4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	2300      	movs	r3, #0
 80027f0:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80027f2:	f7ff ff45 	bl	8002680 <LL_RCC_PLL_GetMainSource>
 80027f6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d004      	beq.n	8002808 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002804:	d003      	beq.n	800280e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002806:	e00b      	b.n	8002820 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800280a:	607b      	str	r3, [r7, #4]
      break;
 800280c:	e00b      	b.n	8002826 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800280e:	f7ff ff4f 	bl	80026b0 <LL_RCC_PLL_GetPrediv>
 8002812:	4603      	mov	r3, r0
 8002814:	3301      	adds	r3, #1
 8002816:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	607b      	str	r3, [r7, #4]
      break;
 800281e:	e002      	b.n	8002826 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002822:	607b      	str	r3, [r7, #4]
      break;
 8002824:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002826:	f7ff ff37 	bl	8002698 <LL_RCC_PLL_GetMultiplicator>
 800282a:	4603      	mov	r3, r0
 800282c:	0c9b      	lsrs	r3, r3, #18
 800282e:	3302      	adds	r3, #2
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	fb02 f303 	mul.w	r3, r2, r3
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	003d0900 	.word	0x003d0900
 8002844:	00f42400 	.word	0x00f42400

08002848 <LL_TIM_SetPrescaler>:
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <LL_TIM_SetAutoReload>:
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <LL_TIM_SetRepetitionCounter>:
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f043 0201 	orr.w	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	615a      	str	r2, [r3, #20]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a27      	ldr	r2, [pc, #156]	; (8002964 <LL_TIM_Init+0xb0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00b      	beq.n	80028e4 <LL_TIM_Init+0x30>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d2:	d007      	beq.n	80028e4 <LL_TIM_Init+0x30>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a24      	ldr	r2, [pc, #144]	; (8002968 <LL_TIM_Init+0xb4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d003      	beq.n	80028e4 <LL_TIM_Init+0x30>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a23      	ldr	r2, [pc, #140]	; (800296c <LL_TIM_Init+0xb8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d106      	bne.n	80028f2 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a1b      	ldr	r2, [pc, #108]	; (8002964 <LL_TIM_Init+0xb0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00b      	beq.n	8002912 <LL_TIM_Init+0x5e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002900:	d007      	beq.n	8002912 <LL_TIM_Init+0x5e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a18      	ldr	r2, [pc, #96]	; (8002968 <LL_TIM_Init+0xb4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d003      	beq.n	8002912 <LL_TIM_Init+0x5e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a17      	ldr	r2, [pc, #92]	; (800296c <LL_TIM_Init+0xb8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d106      	bne.n	8002920 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4619      	mov	r1, r3
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff98 	bl	8002862 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	4619      	mov	r1, r3
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff85 	bl	8002848 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a08      	ldr	r2, [pc, #32]	; (8002964 <LL_TIM_Init+0xb0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d105      	bne.n	8002952 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	4619      	mov	r1, r3
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff95 	bl	800287c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ff9f 	bl	8002896 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40012c00 	.word	0x40012c00
 8002968:	40000400 	.word	0x40000400
 800296c:	40000800 	.word	0x40000800

08002970 <LL_USART_IsEnabled>:
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <LL_USART_SetStopBitsLength>:
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	611a      	str	r2, [r3, #16]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <LL_USART_SetHWFlowCtrl>:
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	615a      	str	r2, [r3, #20]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
	...

080029e0 <LL_USART_SetBaudRate>:
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	441a      	add	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a00:	4a25      	ldr	r2, [pc, #148]	; (8002a98 <LL_USART_SetBaudRate+0xb8>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	b299      	uxth	r1, r3
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	009a      	lsls	r2, r3, #2
 8002a18:	441a      	add	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a22:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <LL_USART_SetBaudRate+0xb8>)
 8002a24:	fba3 0302 	umull	r0, r3, r3, r2
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	2064      	movs	r0, #100	; 0x64
 8002a2c:	fb00 f303 	mul.w	r3, r0, r3
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	3332      	adds	r3, #50	; 0x32
 8002a36:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <LL_USART_SetBaudRate+0xb8>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	440b      	add	r3, r1
 8002a48:	b299      	uxth	r1, r3
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	009a      	lsls	r2, r3, #2
 8002a54:	441a      	add	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <LL_USART_SetBaudRate+0xb8>)
 8002a60:	fba3 0302 	umull	r0, r3, r3, r2
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	2064      	movs	r0, #100	; 0x64
 8002a68:	fb00 f303 	mul.w	r3, r0, r3
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	3332      	adds	r3, #50	; 0x32
 8002a72:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <LL_USART_SetBaudRate+0xb8>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	440b      	add	r3, r1
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	609a      	str	r2, [r3, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	51eb851f 	.word	0x51eb851f

08002a9c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ff5e 	bl	8002970 <LL_USART_IsEnabled>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d145      	bne.n	8002b46 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ac2:	f023 030c 	bic.w	r3, r3, #12
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	6851      	ldr	r1, [r2, #4]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	68d2      	ldr	r2, [r2, #12]
 8002ace:	4311      	orrs	r1, r2
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	6912      	ldr	r2, [r2, #16]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ff57 	bl	8002996 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	4619      	mov	r1, r3
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ff63 	bl	80029ba <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002af4:	f107 0308 	add.w	r3, r7, #8
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fde7 	bl	80026cc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <LL_USART_Init+0xb4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d102      	bne.n	8002b0c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	e00c      	b.n	8002b26 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <LL_USART_Init+0xb8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d102      	bne.n	8002b1a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	e005      	b.n	8002b26 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <LL_USART_Init+0xbc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d101      	bne.n	8002b26 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00c      	beq.n	8002b46 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002b34:	2300      	movs	r3, #0
 8002b36:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ff4d 	bl	80029e0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002b46:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40013800 	.word	0x40013800
 8002b54:	40004400 	.word	0x40004400
 8002b58:	40004800 	.word	0x40004800

08002b5c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002b64:	4a03      	ldr	r2, [pc, #12]	; (8002b74 <LL_SetSystemCoreClock+0x18>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6013      	str	r3, [r2, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	20000000 	.word	0x20000000

08002b78 <__libc_init_array>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	2600      	movs	r6, #0
 8002b7c:	4d0c      	ldr	r5, [pc, #48]	; (8002bb0 <__libc_init_array+0x38>)
 8002b7e:	4c0d      	ldr	r4, [pc, #52]	; (8002bb4 <__libc_init_array+0x3c>)
 8002b80:	1b64      	subs	r4, r4, r5
 8002b82:	10a4      	asrs	r4, r4, #2
 8002b84:	42a6      	cmp	r6, r4
 8002b86:	d109      	bne.n	8002b9c <__libc_init_array+0x24>
 8002b88:	f000 f81a 	bl	8002bc0 <_init>
 8002b8c:	2600      	movs	r6, #0
 8002b8e:	4d0a      	ldr	r5, [pc, #40]	; (8002bb8 <__libc_init_array+0x40>)
 8002b90:	4c0a      	ldr	r4, [pc, #40]	; (8002bbc <__libc_init_array+0x44>)
 8002b92:	1b64      	subs	r4, r4, r5
 8002b94:	10a4      	asrs	r4, r4, #2
 8002b96:	42a6      	cmp	r6, r4
 8002b98:	d105      	bne.n	8002ba6 <__libc_init_array+0x2e>
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba0:	4798      	blx	r3
 8002ba2:	3601      	adds	r6, #1
 8002ba4:	e7ee      	b.n	8002b84 <__libc_init_array+0xc>
 8002ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002baa:	4798      	blx	r3
 8002bac:	3601      	adds	r6, #1
 8002bae:	e7f2      	b.n	8002b96 <__libc_init_array+0x1e>
 8002bb0:	08002c08 	.word	0x08002c08
 8002bb4:	08002c08 	.word	0x08002c08
 8002bb8:	08002c08 	.word	0x08002c08
 8002bbc:	08002c0c 	.word	0x08002c0c

08002bc0 <_init>:
 8002bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc2:	bf00      	nop
 8002bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc6:	bc08      	pop	{r3}
 8002bc8:	469e      	mov	lr, r3
 8002bca:	4770      	bx	lr

08002bcc <_fini>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	bf00      	nop
 8002bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd2:	bc08      	pop	{r3}
 8002bd4:	469e      	mov	lr, r3
 8002bd6:	4770      	bx	lr
