
for uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002348  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080024d0  080024d0  000124d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024f8  080024f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080024f8  080024f8  000124f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002500  08002500  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002500  08002500  00012500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000020  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000058b1  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001217  00000000  00000000  000258f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a0  00000000  00000000  00026b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005f8  00000000  00000000  000271a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001abc2  00000000  00000000  000277a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005031  00000000  00000000  00042362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095970  00000000  00000000  00047393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000dcd03  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a64  00000000  00000000  000dcd54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024b8 	.word	0x080024b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080024b8 	.word	0x080024b8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <__NVIC_GetPriorityGrouping+0x18>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	0a1b      	lsrs	r3, r3, #8
 80004d6:	f003 0307 	and.w	r3, r3, #7
}
 80004da:	4618      	mov	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	db0b      	blt.n	8000512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	f003 021f 	and.w	r2, r3, #31
 8000500:	4907      	ldr	r1, [pc, #28]	; (8000520 <__NVIC_EnableIRQ+0x38>)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	095b      	lsrs	r3, r3, #5
 8000508:	2001      	movs	r0, #1
 800050a:	fa00 f202 	lsl.w	r2, r0, r2
 800050e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000e100 	.word	0xe000e100

08000524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	db0a      	blt.n	800054e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	b2da      	uxtb	r2, r3
 800053c:	490c      	ldr	r1, [pc, #48]	; (8000570 <__NVIC_SetPriority+0x4c>)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	0112      	lsls	r2, r2, #4
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	440b      	add	r3, r1
 8000548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800054c:	e00a      	b.n	8000564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4908      	ldr	r1, [pc, #32]	; (8000574 <__NVIC_SetPriority+0x50>)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f003 030f 	and.w	r3, r3, #15
 800055a:	3b04      	subs	r3, #4
 800055c:	0112      	lsls	r2, r2, #4
 800055e:	b2d2      	uxtb	r2, r2
 8000560:	440b      	add	r3, r1
 8000562:	761a      	strb	r2, [r3, #24]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	e000e100 	.word	0xe000e100
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000578:	b480      	push	{r7}
 800057a:	b089      	sub	sp, #36	; 0x24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	f1c3 0307 	rsb	r3, r3, #7
 8000592:	2b04      	cmp	r3, #4
 8000594:	bf28      	it	cs
 8000596:	2304      	movcs	r3, #4
 8000598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	3304      	adds	r3, #4
 800059e:	2b06      	cmp	r3, #6
 80005a0:	d902      	bls.n	80005a8 <NVIC_EncodePriority+0x30>
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	3b03      	subs	r3, #3
 80005a6:	e000      	b.n	80005aa <NVIC_EncodePriority+0x32>
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	43da      	mvns	r2, r3
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	401a      	ands	r2, r3
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	43d9      	mvns	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	4313      	orrs	r3, r2
         );
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3724      	adds	r7, #36	; 0x24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ec:	4907      	ldr	r1, [pc, #28]	; (800060c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4013      	ands	r3, r2
 80005fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fe:	68fb      	ldr	r3, [r7, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	40023800 	.word	0x40023800

08000610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000614:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000618:	f7ff ffe2 	bl	80005e0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800061c:	f7ff ff56 	bl	80004cc <__NVIC_GetPriorityGrouping>
 8000620:	4603      	mov	r3, r0
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffa6 	bl	8000578 <NVIC_EncodePriority>
 800062c:	4603      	mov	r3, r0
 800062e:	4619      	mov	r1, r3
 8000630:	200b      	movs	r0, #11
 8000632:	f7ff ff77 	bl	8000524 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000636:	200b      	movs	r0, #11
 8000638:	f7ff ff56 	bl	80004e8 <__NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800063c:	f7ff ff46 	bl	80004cc <__NVIC_GetPriorityGrouping>
 8000640:	4603      	mov	r3, r0
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ff96 	bl	8000578 <NVIC_EncodePriority>
 800064c:	4603      	mov	r3, r0
 800064e:	4619      	mov	r1, r3
 8000650:	202f      	movs	r0, #47	; 0x2f
 8000652:	f7ff ff67 	bl	8000524 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000656:	202f      	movs	r0, #47	; 0x2f
 8000658:	f7ff ff46 	bl	80004e8 <__NVIC_EnableIRQ>

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}

08000660 <LL_AHB1_GRP1_EnableClock>:
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800066a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4313      	orrs	r3, r2
 8000672:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4013      	ands	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	40023800 	.word	0x40023800

08000690 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000694:	2004      	movs	r0, #4
 8000696:	f7ff ffe3 	bl	8000660 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800069a:	2008      	movs	r0, #8
 800069c:	f7ff ffe0 	bl	8000660 <LL_AHB1_GRP1_EnableClock>

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <__NVIC_SetPriorityGrouping>:
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_GetPriorityGrouping>:
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__NVIC_GetPriorityGrouping+0x18>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 0307 	and.w	r3, r3, #7
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_SetPriority>:
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	; (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	; (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43da      	mvns	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43d9      	mvns	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	4313      	orrs	r3, r2
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3724      	adds	r7, #36	; 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <LL_DMA_EnableStream+0x3c>)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4413      	add	r3, r2
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4908      	ldr	r1, [pc, #32]	; (8000800 <LL_DMA_EnableStream+0x3c>)
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	440a      	add	r2, r1
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	4611      	mov	r1, r2
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	440a      	add	r2, r1
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6013      	str	r3, [r2, #0]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	080024d0 	.word	0x080024d0

08000804 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800080e:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <LL_DMA_DisableStream+0x3c>)
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	4413      	add	r3, r2
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <LL_DMA_DisableStream+0x3c>)
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	440a      	add	r2, r1
 8000824:	7812      	ldrb	r2, [r2, #0]
 8000826:	4611      	mov	r1, r2
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	440a      	add	r2, r1
 800082c:	f023 0301 	bic.w	r3, r3, #1
 8000830:	6013      	str	r3, [r2, #0]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	080024d0 	.word	0x080024d0

08000844 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR));
 800084e:	4a08      	ldr	r2, [pc, #32]	; (8000870 <LL_DMA_GetDataTransferDirection+0x2c>)
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	4413      	add	r3, r2
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4413      	add	r3, r2
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	080024d0 	.word	0x080024d0

08000874 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <LL_DMA_SetDataLength+0x44>)
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	4413      	add	r3, r2
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	0c1b      	lsrs	r3, r3, #16
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	4908      	ldr	r1, [pc, #32]	; (80008b8 <LL_DMA_SetDataLength+0x44>)
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	440a      	add	r2, r1
 800089a:	7812      	ldrb	r2, [r2, #0]
 800089c:	4611      	mov	r1, r2
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	440a      	add	r2, r1
 80008a2:	4611      	mov	r1, r2
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	604b      	str	r3, [r1, #4]
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	080024d0 	.word	0x080024d0

080008bc <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
 80008c8:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	2b40      	cmp	r3, #64	; 0x40
 80008ce:	d114      	bne.n	80008fa <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <LL_DMA_ConfigAddresses+0x74>)
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	4413      	add	r3, r2
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	4413      	add	r3, r2
 80008de:	461a      	mov	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 80008e4:	4a12      	ldr	r2, [pc, #72]	; (8000930 <LL_DMA_ConfigAddresses+0x74>)
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4413      	add	r3, r2
 80008f2:	461a      	mov	r2, r3
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 80008f8:	e013      	b.n	8000922 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 80008fa:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <LL_DMA_ConfigAddresses+0x74>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	461a      	mov	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <LL_DMA_ConfigAddresses+0x74>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4413      	add	r3, r2
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4413      	add	r3, r2
 800091c:	461a      	mov	r2, r3
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	60d3      	str	r3, [r2, #12]
}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	080024d0 	.word	0x080024d0

08000934 <LL_DMA_ClearFlag_TC0>:
  * @rmtoll LIFCR  CTCIF0    LL_DMA_ClearFlag_TC0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC0(DMA_TypeDef *DMAx)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF0);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2220      	movs	r2, #32
 8000940:	609a      	str	r2, [r3, #8]
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <LL_DMA_ClearFlag_TC7>:
  * @rmtoll HIFCR  CTCIF7    LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF7);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800095c:	60da      	str	r2, [r3, #12]
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <LL_DMA_ClearFlag_TE0>:
  * @rmtoll LIFCR  CTEIF0    LL_DMA_ClearFlag_TE0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE0(DMA_TypeDef *DMAx)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF0);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2208      	movs	r2, #8
 8000976:	609a      	str	r2, [r3, #8]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <LL_DMA_ClearFlag_TE7>:
  * @rmtoll HIFCR  CTEIF7    LL_DMA_ClearFlag_TE7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE7(DMA_TypeDef *DMAx)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF7);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000992:	60da      	str	r2, [r3, #12]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 80009aa:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <LL_DMA_EnableIT_TE+0x3c>)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4413      	add	r3, r2
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4908      	ldr	r1, [pc, #32]	; (80009dc <LL_DMA_EnableIT_TE+0x3c>)
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	440a      	add	r2, r1
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	4611      	mov	r1, r2
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	440a      	add	r2, r1
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6013      	str	r3, [r2, #0]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	080024d0 	.word	0x080024d0

080009e0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80009ea:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <LL_DMA_EnableIT_TC+0x3c>)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4413      	add	r3, r2
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4908      	ldr	r1, [pc, #32]	; (8000a1c <LL_DMA_EnableIT_TC+0x3c>)
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	440a      	add	r2, r1
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	4611      	mov	r1, r2
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	440a      	add	r2, r1
 8000a08:	f043 0310 	orr.w	r3, r3, #16
 8000a0c:	6013      	str	r3, [r2, #0]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	080024d0 	.word	0x080024d0

08000a20 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <LL_RCC_HSI_Enable+0x1c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <LL_RCC_HSI_Enable+0x1c>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <LL_RCC_HSI_IsReady+0x20>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	bf0c      	ite	eq
 8000a50:	2301      	moveq	r3, #1
 8000a52:	2300      	movne	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	40023800 	.word	0x40023800

08000a64 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	4904      	ldr	r1, [pc, #16]	; (8000a8c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	600b      	str	r3, [r1, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <LL_RCC_SetSysClkSource+0x24>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f023 0203 	bic.w	r2, r3, #3
 8000aa0:	4904      	ldr	r1, [pc, #16]	; (8000ab4 <LL_RCC_SetSysClkSource+0x24>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	608b      	str	r3, [r1, #8]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <LL_RCC_GetSysClkSource+0x18>)
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	f003 030c 	and.w	r3, r3, #12
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ae4:	4904      	ldr	r1, [pc, #16]	; (8000af8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	608b      	str	r3, [r1, #8]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	40023800 	.word	0x40023800

08000afc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000b0c:	4904      	ldr	r1, [pc, #16]	; (8000b20 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	608b      	str	r3, [r1, #8]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40023800 	.word	0x40023800

08000b24 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000b34:	4904      	ldr	r1, [pc, #16]	; (8000b48 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	608b      	str	r3, [r1, #8]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	40023800 	.word	0x40023800

08000b4c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <LL_RCC_PLL_Enable+0x1c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <LL_RCC_PLL_Enable+0x1c>)
 8000b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <LL_RCC_PLL_IsReady+0x24>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b7c:	bf0c      	ite	eq
 8000b7e:	2301      	moveq	r3, #1
 8000b80:	2300      	movne	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
 8000ba0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	68f9      	ldr	r1, [r7, #12]
 8000bac:	68ba      	ldr	r2, [r7, #8]
 8000bae:	4311      	orrs	r1, r2
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	0192      	lsls	r2, r2, #6
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000bc4:	4904      	ldr	r1, [pc, #16]	; (8000bd8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	ffbf8000 	.word	0xffbf8000

08000be0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bec:	4907      	ldr	r1, [pc, #28]	; (8000c0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	40023800 	.word	0x40023800

08000c10 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c1c:	4907      	ldr	r1, [pc, #28]	; (8000c3c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	40023800 	.word	0x40023800

08000c40 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <LL_FLASH_SetLatency+0x24>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f023 0207 	bic.w	r2, r3, #7
 8000c50:	4904      	ldr	r1, [pc, #16]	; (8000c64 <LL_FLASH_SetLatency+0x24>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	600b      	str	r3, [r1, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <LL_FLASH_GetLatency+0x18>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0307 	and.w	r3, r3, #7
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023c00 	.word	0x40023c00

08000c84 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000c94:	4904      	ldr	r1, [pc, #16]	; (8000ca8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	600b      	str	r3, [r1, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	40007000 	.word	0x40007000

08000cac <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3314      	adds	r3, #20
 8000cb8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	e853 3f00 	ldrex	r3, [r3]
 8000cc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3314      	adds	r3, #20
 8000cce:	69fa      	ldr	r2, [r7, #28]
 8000cd0:	61ba      	str	r2, [r7, #24]
 8000cd2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000cd4:	6979      	ldr	r1, [r7, #20]
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	e841 2300 	strex	r3, r2, [r1]
 8000cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1e7      	bne.n	8000cb4 <LL_USART_EnableDMAReq_RX+0x8>
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3724      	adds	r7, #36	; 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b089      	sub	sp, #36	; 0x24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3314      	adds	r3, #20
 8000cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	e853 3f00 	ldrex	r3, [r3]
 8000d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d0e:	61fb      	str	r3, [r7, #28]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3314      	adds	r3, #20
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	61ba      	str	r2, [r7, #24]
 8000d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d1a:	6979      	ldr	r1, [r7, #20]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	e841 2300 	strex	r3, r2, [r1]
 8000d22:	613b      	str	r3, [r7, #16]
   return(result);
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1e7      	bne.n	8000cfa <LL_USART_EnableDMAReq_TX+0x8>
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	3724      	adds	r7, #36	; 0x24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3304      	adds	r3, #4
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <USART_TX>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USART_TX (uint8_t* dt, uint16_t sz)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]
  LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_7);
 8000d5c:	2107      	movs	r1, #7
 8000d5e:	480c      	ldr	r0, [pc, #48]	; (8000d90 <USART_TX+0x40>)
 8000d60:	f7ff fd50 	bl	8000804 <LL_DMA_DisableStream>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_7, sz);
 8000d64:	887b      	ldrh	r3, [r7, #2]
 8000d66:	461a      	mov	r2, r3
 8000d68:	2107      	movs	r1, #7
 8000d6a:	4809      	ldr	r0, [pc, #36]	; (8000d90 <USART_TX+0x40>)
 8000d6c:	f7ff fd82 	bl	8000874 <LL_DMA_SetDataLength>
  LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_7);
 8000d70:	2107      	movs	r1, #7
 8000d72:	4807      	ldr	r0, [pc, #28]	; (8000d90 <USART_TX+0x40>)
 8000d74:	f7ff fd26 	bl	80007c4 <LL_DMA_EnableStream>
  while (!fl_tx) {}
 8000d78:	bf00      	nop
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <USART_TX+0x44>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0fb      	beq.n	8000d7a <USART_TX+0x2a>
  fl_tx=0;
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <USART_TX+0x44>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40026000 	.word	0x40026000
 8000d94:	2000002e 	.word	0x2000002e

08000d98 <USART_RX>:
//-------------------------------------------------------
void USART_RX (uint8_t* dt, uint16_t sz)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
  LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_0);
 8000da4:	2100      	movs	r1, #0
 8000da6:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <USART_RX+0x40>)
 8000da8:	f7ff fd2c 	bl	8000804 <LL_DMA_DisableStream>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_0, sz);
 8000dac:	887b      	ldrh	r3, [r7, #2]
 8000dae:	461a      	mov	r2, r3
 8000db0:	2100      	movs	r1, #0
 8000db2:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <USART_RX+0x40>)
 8000db4:	f7ff fd5e 	bl	8000874 <LL_DMA_SetDataLength>
  LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_0);
 8000db8:	2100      	movs	r1, #0
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <USART_RX+0x40>)
 8000dbc:	f7ff fd02 	bl	80007c4 <LL_DMA_EnableStream>
  while (!fl_rx) {}
 8000dc0:	bf00      	nop
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <USART_RX+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0fb      	beq.n	8000dc2 <USART_RX+0x2a>
  fl_rx=0;
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <USART_RX+0x44>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40026000 	.word	0x40026000
 8000ddc:	2000002d 	.word	0x2000002d

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000de6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000dea:	f7ff ff11 	bl	8000c10 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000dee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000df2:	f7ff fef5 	bl	8000be0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df6:	2003      	movs	r0, #3
 8000df8:	f7ff fc54 	bl	80006a4 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000dfc:	f7ff fc76 	bl	80006ec <__NVIC_GetPriorityGrouping>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2200      	movs	r2, #0
 8000e04:	210f      	movs	r1, #15
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fca8 	bl	800075c <NVIC_EncodePriority>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e14:	f7ff fc78 	bl	8000708 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e18:	f000 f872 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1c:	f7ff fc38 	bl	8000690 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e20:	f7ff fbf6 	bl	8000610 <MX_DMA_Init>
  MX_UART5_Init();
 8000e24:	f000 fc54 	bl	80016d0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_0);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4831      	ldr	r0, [pc, #196]	; (8000ef0 <main+0x110>)
 8000e2c:	f7ff fcea 	bl	8000804 <LL_DMA_DisableStream>
  LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_7);
 8000e30:	2107      	movs	r1, #7
 8000e32:	482f      	ldr	r0, [pc, #188]	; (8000ef0 <main+0x110>)
 8000e34:	f7ff fce6 	bl	8000804 <LL_DMA_DisableStream>
  LL_DMA_ClearFlag_TC0(DMA1);
 8000e38:	482d      	ldr	r0, [pc, #180]	; (8000ef0 <main+0x110>)
 8000e3a:	f7ff fd7b 	bl	8000934 <LL_DMA_ClearFlag_TC0>
  LL_DMA_ClearFlag_TC7(DMA1);
 8000e3e:	482c      	ldr	r0, [pc, #176]	; (8000ef0 <main+0x110>)
 8000e40:	f7ff fd85 	bl	800094e <LL_DMA_ClearFlag_TC7>
  LL_DMA_ClearFlag_TE0(DMA1);
 8000e44:	482a      	ldr	r0, [pc, #168]	; (8000ef0 <main+0x110>)
 8000e46:	f7ff fd90 	bl	800096a <LL_DMA_ClearFlag_TE0>
  LL_DMA_ClearFlag_TE7(DMA1);
 8000e4a:	4829      	ldr	r0, [pc, #164]	; (8000ef0 <main+0x110>)
 8000e4c:	f7ff fd9a 	bl	8000984 <LL_DMA_ClearFlag_TE7>
  LL_USART_EnableDMAReq_TX(UART5);
 8000e50:	4828      	ldr	r0, [pc, #160]	; (8000ef4 <main+0x114>)
 8000e52:	f7ff ff4e 	bl	8000cf2 <LL_USART_EnableDMAReq_TX>
  LL_USART_EnableDMAReq_RX(UART5);
 8000e56:	4827      	ldr	r0, [pc, #156]	; (8000ef4 <main+0x114>)
 8000e58:	f7ff ff28 	bl	8000cac <LL_USART_EnableDMAReq_RX>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_0);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4824      	ldr	r0, [pc, #144]	; (8000ef0 <main+0x110>)
 8000e60:	f7ff fdbe 	bl	80009e0 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_STREAM_0);
 8000e64:	2100      	movs	r1, #0
 8000e66:	4822      	ldr	r0, [pc, #136]	; (8000ef0 <main+0x110>)
 8000e68:	f7ff fd9a 	bl	80009a0 <LL_DMA_EnableIT_TE>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_7);
 8000e6c:	2107      	movs	r1, #7
 8000e6e:	4820      	ldr	r0, [pc, #128]	; (8000ef0 <main+0x110>)
 8000e70:	f7ff fdb6 	bl	80009e0 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_STREAM_7);
 8000e74:	2107      	movs	r1, #7
 8000e76:	481e      	ldr	r0, [pc, #120]	; (8000ef0 <main+0x110>)
 8000e78:	f7ff fd92 	bl	80009a0 <LL_DMA_EnableIT_TE>
  LL_DMA_ClearFlag_TC0(DMA1);
 8000e7c:	481c      	ldr	r0, [pc, #112]	; (8000ef0 <main+0x110>)
 8000e7e:	f7ff fd59 	bl	8000934 <LL_DMA_ClearFlag_TC0>
  LL_DMA_ClearFlag_TE0(DMA1);
 8000e82:	481b      	ldr	r0, [pc, #108]	; (8000ef0 <main+0x110>)
 8000e84:	f7ff fd71 	bl	800096a <LL_DMA_ClearFlag_TE0>
  LL_DMA_ClearFlag_TC7(DMA1);
 8000e88:	4819      	ldr	r0, [pc, #100]	; (8000ef0 <main+0x110>)
 8000e8a:	f7ff fd60 	bl	800094e <LL_DMA_ClearFlag_TC7>
  LL_DMA_ClearFlag_TC7(DMA1);
 8000e8e:	4818      	ldr	r0, [pc, #96]	; (8000ef0 <main+0x110>)
 8000e90:	f7ff fd5d 	bl	800094e <LL_DMA_ClearFlag_TC7>
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_STREAM_0, LL_USART_DMA_GetRegAddr(UART5), (uint32_t)&rx_str, LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_STREAM_0));
 8000e94:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <main+0x114>)
 8000e96:	f7ff ff4f 	bl	8000d38 <LL_USART_DMA_GetRegAddr>
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	4d16      	ldr	r5, [pc, #88]	; (8000ef8 <main+0x118>)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <main+0x110>)
 8000ea2:	f7ff fccf 	bl	8000844 <LL_DMA_GetDataTransferDirection>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	462b      	mov	r3, r5
 8000eac:	4622      	mov	r2, r4
 8000eae:	2100      	movs	r1, #0
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <main+0x110>)
 8000eb2:	f7ff fd03 	bl	80008bc <LL_DMA_ConfigAddresses>
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_STREAM_7, (uint32_t)&tx_str, LL_USART_DMA_GetRegAddr(UART5), LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_STREAM_7));
 8000eb6:	4d11      	ldr	r5, [pc, #68]	; (8000efc <main+0x11c>)
 8000eb8:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <main+0x114>)
 8000eba:	f7ff ff3d 	bl	8000d38 <LL_USART_DMA_GetRegAddr>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	2107      	movs	r1, #7
 8000ec2:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <main+0x110>)
 8000ec4:	f7ff fcbe 	bl	8000844 <LL_DMA_GetDataTransferDirection>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	4623      	mov	r3, r4
 8000ece:	462a      	mov	r2, r5
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <main+0x110>)
 8000ed4:	f7ff fcf2 	bl	80008bc <LL_DMA_ConfigAddresses>
  /* USER CODE END 2 */
  uint32_t f = GPIO_IDR_IDR_13;
 8000ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000edc:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  USART_RX(rx_str, 1);
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <main+0x118>)
 8000ee2:	f7ff ff59 	bl	8000d98 <USART_RX>
	  USART_TX(tx_str,12);
 8000ee6:	210c      	movs	r1, #12
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <main+0x11c>)
 8000eea:	f7ff ff31 	bl	8000d50 <USART_TX>
	  USART_RX(rx_str, 1);
 8000eee:	e7f6      	b.n	8000ede <main+0xfe>
 8000ef0:	40026000 	.word	0x40026000
 8000ef4:	40005000 	.word	0x40005000
 8000ef8:	2000002c 	.word	0x2000002c
 8000efc:	20000000 	.word	0x20000000

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000f04:	2005      	movs	r0, #5
 8000f06:	f7ff fe9b 	bl	8000c40 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff feac 	bl	8000c68 <LL_FLASH_GetLatency>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	d1fa      	bne.n	8000f0c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000f16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f1a:	f7ff feb3 	bl	8000c84 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000f1e:	2010      	movs	r0, #16
 8000f20:	f7ff fda0 	bl	8000a64 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000f24:	f7ff fd7c 	bl	8000a20 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000f28:	bf00      	nop
 8000f2a:	f7ff fd89 	bl	8000a40 <LL_RCC_HSI_IsReady>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d1fa      	bne.n	8000f2a <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 8000f34:	2300      	movs	r3, #0
 8000f36:	22a8      	movs	r2, #168	; 0xa8
 8000f38:	2108      	movs	r1, #8
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f7ff fe2a 	bl	8000b94 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000f40:	f7ff fe04 	bl	8000b4c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000f44:	bf00      	nop
 8000f46:	f7ff fe11 	bl	8000b6c <LL_RCC_PLL_IsReady>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d1fa      	bne.n	8000f46 <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff fdbf 	bl	8000ad4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000f56:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000f5a:	f7ff fdcf 	bl	8000afc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000f5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f62:	f7ff fddf 	bl	8000b24 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f66:	2002      	movs	r0, #2
 8000f68:	f7ff fd92 	bl	8000a90 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000f6c:	bf00      	nop
 8000f6e:	f7ff fda3 	bl	8000ab8 <LL_RCC_GetSysClkSource>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d1fa      	bne.n	8000f6e <SystemClock_Config+0x6e>
  {

  }
  LL_Init1msTick(168000000);
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <SystemClock_Config+0x88>)
 8000f7a:	f001 fa5b 	bl	8002434 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8000f7e:	4802      	ldr	r0, [pc, #8]	; (8000f88 <SystemClock_Config+0x88>)
 8000f80:	f001 fa66 	bl	8002450 <LL_SetSystemCoreClock>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	0a037a00 	.word	0x0a037a00

08000f8c <DMA1_Stream0_TransferComplete>:

/* USER CODE BEGIN 4 */
void DMA1_Stream0_TransferComplete(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  LL_DMA_ClearFlag_TC0(DMA1);
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <DMA1_Stream0_TransferComplete+0x14>)
 8000f92:	f7ff fccf 	bl	8000934 <LL_DMA_ClearFlag_TC0>
  fl_rx = 1;
 8000f96:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <DMA1_Stream0_TransferComplete+0x18>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40026000 	.word	0x40026000
 8000fa4:	2000002d 	.word	0x2000002d

08000fa8 <DMA1_Stream7_TransferComplete>:
//-----------------------------------------------
void DMA1_Stream7_TransferComplete(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  LL_DMA_ClearFlag_TC7(DMA1);
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <DMA1_Stream7_TransferComplete+0x14>)
 8000fae:	f7ff fcce 	bl	800094e <LL_DMA_ClearFlag_TC7>
  fl_tx = 1;
 8000fb2:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <DMA1_Stream7_TransferComplete+0x18>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40026000 	.word	0x40026000
 8000fc0:	2000002e 	.word	0x2000002e

08000fc4 <LL_DMA_IsActiveFlag_TC0>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF0)==(DMA_LISR_TCIF0));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0320 	and.w	r3, r3, #32
 8000fd4:	2b20      	cmp	r3, #32
 8000fd6:	bf0c      	ite	eq
 8000fd8:	2301      	moveq	r3, #1
 8000fda:	2300      	movne	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <LL_DMA_IsActiveFlag_TC7>:
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF7)==(DMA_HISR_TCIF7));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000ffe:	bf0c      	ite	eq
 8001000:	2301      	moveq	r3, #1
 8001002:	2300      	movne	r3, #0
 8001004:	b2db      	uxtb	r3, r3
} 
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_DMA_IsActiveFlag_TE0>:
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF0)==(DMA_LISR_TEIF0));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b08      	cmp	r3, #8
 8001024:	bf0c      	ite	eq
 8001026:	2301      	moveq	r3, #1
 8001028:	2300      	movne	r3, #0
 800102a:	b2db      	uxtb	r3, r3
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_DMA_IsActiveFlag_TE7>:
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF7)==(DMA_HISR_TEIF7));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001048:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800104c:	bf0c      	ite	eq
 800104e:	2301      	moveq	r3, #1
 8001050:	2300      	movne	r3, #0
 8001052:	b2db      	uxtb	r3, r3
} 
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_DMA_ClearFlag_TE0>:
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF0);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2208      	movs	r2, #8
 800106c:	609a      	str	r2, [r3, #8]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_DMA_ClearFlag_TE7>:
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF7);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001088:	60da      	str	r2, [r3, #12]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <LL_USART_IsActiveFlag_FE>:
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	bf0c      	ite	eq
 80010aa:	2301      	moveq	r3, #1
 80010ac:	2300      	movne	r3, #0
 80010ae:	b2db      	uxtb	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_USART_IsActiveFlag_NE>:
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	bf0c      	ite	eq
 80010d0:	2301      	moveq	r3, #1
 80010d2:	2300      	movne	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LL_USART_IsActiveFlag_ORE>:
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	bf0c      	ite	eq
 80010f6:	2301      	moveq	r3, #1
 80010f8:	2300      	movne	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_USART_IsActiveFlag_RXNE>:
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0320 	and.w	r3, r3, #32
 8001118:	2b20      	cmp	r3, #32
 800111a:	bf0c      	ite	eq
 800111c:	2301      	moveq	r3, #1
 800111e:	2300      	movne	r3, #0
 8001120:	b2db      	uxtb	r3, r3
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <LL_USART_IsEnabledIT_RXNE>:
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	f003 0320 	and.w	r3, r3, #32
 800113e:	2b20      	cmp	r3, #32
 8001140:	bf0c      	ite	eq
 8001142:	2301      	moveq	r3, #1
 8001144:	2300      	movne	r3, #0
 8001146:	b2db      	uxtb	r3, r3
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <NMI_Handler+0x4>

0800115a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <HardFault_Handler+0x4>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <MemManage_Handler+0x4>

08001166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <UsageFault_Handler+0x4>

08001172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  if(LL_DMA_IsActiveFlag_TC0(DMA1) == 1)
 80011b0:	4809      	ldr	r0, [pc, #36]	; (80011d8 <DMA1_Stream0_IRQHandler+0x2c>)
 80011b2:	f7ff ff07 	bl	8000fc4 <LL_DMA_IsActiveFlag_TC0>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d102      	bne.n	80011c2 <DMA1_Stream0_IRQHandler+0x16>
  {
    DMA1_Stream0_TransferComplete();
 80011bc:	f7ff fee6 	bl	8000f8c <DMA1_Stream0_TransferComplete>
  else if(LL_DMA_IsActiveFlag_TE0(DMA1) == 1)
  {
    LL_DMA_ClearFlag_TE0(DMA1);
  }
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80011c0:	e008      	b.n	80011d4 <DMA1_Stream0_IRQHandler+0x28>
  else if(LL_DMA_IsActiveFlag_TE0(DMA1) == 1)
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <DMA1_Stream0_IRQHandler+0x2c>)
 80011c4:	f7ff ff25 	bl	8001012 <LL_DMA_IsActiveFlag_TE0>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d102      	bne.n	80011d4 <DMA1_Stream0_IRQHandler+0x28>
    LL_DMA_ClearFlag_TE0(DMA1);
 80011ce:	4802      	ldr	r0, [pc, #8]	; (80011d8 <DMA1_Stream0_IRQHandler+0x2c>)
 80011d0:	f7ff ff46 	bl	8001060 <LL_DMA_ClearFlag_TE0>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40026000 	.word	0x40026000

080011dc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */
  if(LL_DMA_IsActiveFlag_TC7(DMA1) == 1)
 80011e0:	4809      	ldr	r0, [pc, #36]	; (8001208 <DMA1_Stream7_IRQHandler+0x2c>)
 80011e2:	f7ff ff02 	bl	8000fea <LL_DMA_IsActiveFlag_TC7>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d102      	bne.n	80011f2 <DMA1_Stream7_IRQHandler+0x16>
  {
    DMA1_Stream7_TransferComplete();
 80011ec:	f7ff fedc 	bl	8000fa8 <DMA1_Stream7_TransferComplete>
  else if(LL_DMA_IsActiveFlag_TE7(DMA1) == 1)
  {
    LL_DMA_ClearFlag_TE7(DMA1);
  }
  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80011f0:	e008      	b.n	8001204 <DMA1_Stream7_IRQHandler+0x28>
  else if(LL_DMA_IsActiveFlag_TE7(DMA1) == 1)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <DMA1_Stream7_IRQHandler+0x2c>)
 80011f4:	f7ff ff20 	bl	8001038 <LL_DMA_IsActiveFlag_TE7>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d102      	bne.n	8001204 <DMA1_Stream7_IRQHandler+0x28>
    LL_DMA_ClearFlag_TE7(DMA1);
 80011fe:	4802      	ldr	r0, [pc, #8]	; (8001208 <DMA1_Stream7_IRQHandler+0x2c>)
 8001200:	f7ff ff3b 	bl	800107a <LL_DMA_ClearFlag_TE7>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40026000 	.word	0x40026000

0800120c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(LL_USART_IsActiveFlag_RXNE(UART5) && LL_USART_IsEnabledIT_RXNE(UART5))
 8001210:	4815      	ldr	r0, [pc, #84]	; (8001268 <UART5_IRQHandler+0x5c>)
 8001212:	f7ff ff79 	bl	8001108 <LL_USART_IsActiveFlag_RXNE>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <UART5_IRQHandler+0x22>
 800121c:	4812      	ldr	r0, [pc, #72]	; (8001268 <UART5_IRQHandler+0x5c>)
 800121e:	f7ff ff86 	bl	800112e <LL_USART_IsEnabledIT_RXNE>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <UART5_IRQHandler+0x22>
  {
    (void) UART5->DR;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <UART5_IRQHandler+0x5c>)
 800122a:	685b      	ldr	r3, [r3, #4]
    {
      (void) UART5->DR;
    }
  }
  /* USER CODE END USART1_IRQn 1 */
}
 800122c:	e019      	b.n	8001262 <UART5_IRQHandler+0x56>
    if(LL_USART_IsActiveFlag_ORE(UART5))
 800122e:	480e      	ldr	r0, [pc, #56]	; (8001268 <UART5_IRQHandler+0x5c>)
 8001230:	f7ff ff57 	bl	80010e2 <LL_USART_IsActiveFlag_ORE>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <UART5_IRQHandler+0x34>
      (void) UART5->DR;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <UART5_IRQHandler+0x5c>)
 800123c:	685b      	ldr	r3, [r3, #4]
}
 800123e:	e010      	b.n	8001262 <UART5_IRQHandler+0x56>
    else if(LL_USART_IsActiveFlag_FE(UART5))
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <UART5_IRQHandler+0x5c>)
 8001242:	f7ff ff28 	bl	8001096 <LL_USART_IsActiveFlag_FE>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d002      	beq.n	8001252 <UART5_IRQHandler+0x46>
      (void) UART5->DR;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <UART5_IRQHandler+0x5c>)
 800124e:	685b      	ldr	r3, [r3, #4]
}
 8001250:	e007      	b.n	8001262 <UART5_IRQHandler+0x56>
    else if(LL_USART_IsActiveFlag_NE(UART5))
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <UART5_IRQHandler+0x5c>)
 8001254:	f7ff ff32 	bl	80010bc <LL_USART_IsActiveFlag_NE>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <UART5_IRQHandler+0x56>
      (void) UART5->DR;
 800125e:	4b02      	ldr	r3, [pc, #8]	; (8001268 <UART5_IRQHandler+0x5c>)
 8001260:	685b      	ldr	r3, [r3, #4]
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40005000 	.word	0x40005000

0800126c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <SystemInit+0x20>)
 8001272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <SystemInit+0x20>)
 8001278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800127c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_GetPriorityGrouping>:
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4907      	ldr	r1, [pc, #28]	; (80012e4 <__NVIC_EnableIRQ+0x38>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <LL_DMA_SetDataTransferDirection>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <LL_DMA_SetDataTransferDirection+0x44>)
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4413      	add	r3, r2
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80013c4:	4908      	ldr	r1, [pc, #32]	; (80013e8 <LL_DMA_SetDataTransferDirection+0x44>)
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	440b      	add	r3, r1
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	440b      	add	r3, r1
 80013d2:	4619      	mov	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	080024f0 	.word	0x080024f0

080013ec <LL_DMA_SetMode>:
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <LL_DMA_SetMode+0x44>)
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	4413      	add	r3, r2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4413      	add	r3, r2
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800140c:	4908      	ldr	r1, [pc, #32]	; (8001430 <LL_DMA_SetMode+0x44>)
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	440b      	add	r3, r1
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	440b      	add	r3, r1
 800141a:	4619      	mov	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	080024f0 	.word	0x080024f0

08001434 <LL_DMA_SetPeriphIncMode>:
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001440:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <LL_DMA_SetPeriphIncMode+0x44>)
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4413      	add	r3, r2
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001454:	4908      	ldr	r1, [pc, #32]	; (8001478 <LL_DMA_SetPeriphIncMode+0x44>)
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	440b      	add	r3, r1
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	440b      	add	r3, r1
 8001462:	4619      	mov	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	080024f0 	.word	0x080024f0

0800147c <LL_DMA_SetMemoryIncMode>:
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001488:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <LL_DMA_SetMemoryIncMode+0x44>)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4413      	add	r3, r2
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800149c:	4908      	ldr	r1, [pc, #32]	; (80014c0 <LL_DMA_SetMemoryIncMode+0x44>)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	440b      	add	r3, r1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	440b      	add	r3, r1
 80014aa:	4619      	mov	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	080024f0 	.word	0x080024f0

080014c4 <LL_DMA_SetPeriphSize>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <LL_DMA_SetPeriphSize+0x44>)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4413      	add	r3, r2
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80014e4:	4908      	ldr	r1, [pc, #32]	; (8001508 <LL_DMA_SetPeriphSize+0x44>)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	440b      	add	r3, r1
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	440b      	add	r3, r1
 80014f2:	4619      	mov	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	080024f0 	.word	0x080024f0

0800150c <LL_DMA_SetMemorySize>:
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <LL_DMA_SetMemorySize+0x44>)
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4413      	add	r3, r2
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800152c:	4908      	ldr	r1, [pc, #32]	; (8001550 <LL_DMA_SetMemorySize+0x44>)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	440b      	add	r3, r1
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	440b      	add	r3, r1
 800153a:	4619      	mov	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4313      	orrs	r3, r2
 8001540:	600b      	str	r3, [r1, #0]
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	080024f0 	.word	0x080024f0

08001554 <LL_DMA_SetStreamPriorityLevel>:
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4413      	add	r3, r2
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001574:	4908      	ldr	r1, [pc, #32]	; (8001598 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	440b      	add	r3, r1
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	440b      	add	r3, r1
 8001582:	4619      	mov	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	080024f0 	.word	0x080024f0

0800159c <LL_DMA_SetChannelSelection>:
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <LL_DMA_SetChannelSelection+0x44>)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80015bc:	4908      	ldr	r1, [pc, #32]	; (80015e0 <LL_DMA_SetChannelSelection+0x44>)
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	440b      	add	r3, r1
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	440b      	add	r3, r1
 80015ca:	4619      	mov	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	080024f0 	.word	0x080024f0

080015e4 <LL_DMA_DisableFifoMode>:
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80015ee:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <LL_DMA_DisableFifoMode+0x3c>)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4413      	add	r3, r2
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <LL_DMA_DisableFifoMode+0x3c>)
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	440a      	add	r2, r1
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	4611      	mov	r1, r2
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	440a      	add	r2, r1
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6153      	str	r3, [r2, #20]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	080024f0 	.word	0x080024f0

08001624 <LL_AHB1_GRP1_EnableClock>:
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800162e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001630:	4907      	ldr	r1, [pc, #28]	; (8001650 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800163a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4013      	ands	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40023800 	.word	0x40023800

08001654 <LL_APB1_GRP1_EnableClock>:
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <LL_APB1_GRP1_EnableClock+0x2c>)
 800165e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001660:	4907      	ldr	r1, [pc, #28]	; (8001680 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4313      	orrs	r3, r2
 8001666:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <LL_APB1_GRP1_EnableClock+0x2c>)
 800166a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4013      	ands	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40023800 	.word	0x40023800

08001684 <LL_USART_Enable>:
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	60da      	str	r2, [r3, #12]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_USART_ConfigAsyncMode>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	615a      	str	r2, [r3, #20]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <MX_UART5_Init>:

/* USER CODE END 0 */

/* UART5 init function */
void MX_UART5_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08e      	sub	sp, #56	; 0x38
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]
 80016e6:	615a      	str	r2, [r3, #20]
 80016e8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80016fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80016fe:	f7ff ffa9 	bl	8001654 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001702:	2004      	movs	r0, #4
 8001704:	f7ff ff8e 	bl	8001624 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001708:	2008      	movs	r0, #8
 800170a:	f7ff ff8b 	bl	8001624 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800170e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001712:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001714:	2302      	movs	r3, #2
 8001716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001724:	2308      	movs	r3, #8
 8001726:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4619      	mov	r1, r3
 800172c:	484f      	ldr	r0, [pc, #316]	; (800186c <MX_UART5_Init+0x19c>)
 800172e:	f000 f9d3 	bl	8001ad8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001732:	2304      	movs	r3, #4
 8001734:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001736:	2302      	movs	r3, #2
 8001738:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001746:	2308      	movs	r3, #8
 8001748:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4619      	mov	r1, r3
 800174e:	4848      	ldr	r0, [pc, #288]	; (8001870 <MX_UART5_Init+0x1a0>)
 8001750:	f000 f9c2 	bl	8001ad8 <LL_GPIO_Init>

  /* UART5 DMA Init */

  /* UART5_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_0, LL_DMA_CHANNEL_4);
 8001754:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001758:	2100      	movs	r1, #0
 800175a:	4846      	ldr	r0, [pc, #280]	; (8001874 <MX_UART5_Init+0x1a4>)
 800175c:	f7ff ff1e 	bl	800159c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	4843      	ldr	r0, [pc, #268]	; (8001874 <MX_UART5_Init+0x1a4>)
 8001766:	f7ff fe1d 	bl	80013a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	4841      	ldr	r0, [pc, #260]	; (8001874 <MX_UART5_Init+0x1a4>)
 8001770:	f7ff fef0 	bl	8001554 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MODE_NORMAL);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	483e      	ldr	r0, [pc, #248]	; (8001874 <MX_UART5_Init+0x1a4>)
 800177a:	f7ff fe37 	bl	80013ec <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	483c      	ldr	r0, [pc, #240]	; (8001874 <MX_UART5_Init+0x1a4>)
 8001784:	f7ff fe56 	bl	8001434 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8001788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178c:	2100      	movs	r1, #0
 800178e:	4839      	ldr	r0, [pc, #228]	; (8001874 <MX_UART5_Init+0x1a4>)
 8001790:	f7ff fe74 	bl	800147c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_BYTE);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	4836      	ldr	r0, [pc, #216]	; (8001874 <MX_UART5_Init+0x1a4>)
 800179a:	f7ff fe93 	bl	80014c4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_BYTE);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	4834      	ldr	r0, [pc, #208]	; (8001874 <MX_UART5_Init+0x1a4>)
 80017a4:	f7ff feb2 	bl	800150c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_0);
 80017a8:	2100      	movs	r1, #0
 80017aa:	4832      	ldr	r0, [pc, #200]	; (8001874 <MX_UART5_Init+0x1a4>)
 80017ac:	f7ff ff1a 	bl	80015e4 <LL_DMA_DisableFifoMode>

  /* UART5_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_7, LL_DMA_CHANNEL_4);
 80017b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b4:	2107      	movs	r1, #7
 80017b6:	482f      	ldr	r0, [pc, #188]	; (8001874 <MX_UART5_Init+0x1a4>)
 80017b8:	f7ff fef0 	bl	800159c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80017bc:	2240      	movs	r2, #64	; 0x40
 80017be:	2107      	movs	r1, #7
 80017c0:	482c      	ldr	r0, [pc, #176]	; (8001874 <MX_UART5_Init+0x1a4>)
 80017c2:	f7ff fdef 	bl	80013a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_7, LL_DMA_PRIORITY_LOW);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2107      	movs	r1, #7
 80017ca:	482a      	ldr	r0, [pc, #168]	; (8001874 <MX_UART5_Init+0x1a4>)
 80017cc:	f7ff fec2 	bl	8001554 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_7, LL_DMA_MODE_NORMAL);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2107      	movs	r1, #7
 80017d4:	4827      	ldr	r0, [pc, #156]	; (8001874 <MX_UART5_Init+0x1a4>)
 80017d6:	f7ff fe09 	bl	80013ec <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
 80017da:	2200      	movs	r2, #0
 80017dc:	2107      	movs	r1, #7
 80017de:	4825      	ldr	r0, [pc, #148]	; (8001874 <MX_UART5_Init+0x1a4>)
 80017e0:	f7ff fe28 	bl	8001434 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
 80017e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e8:	2107      	movs	r1, #7
 80017ea:	4822      	ldr	r0, [pc, #136]	; (8001874 <MX_UART5_Init+0x1a4>)
 80017ec:	f7ff fe46 	bl	800147c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2107      	movs	r1, #7
 80017f4:	481f      	ldr	r0, [pc, #124]	; (8001874 <MX_UART5_Init+0x1a4>)
 80017f6:	f7ff fe65 	bl	80014c4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2107      	movs	r1, #7
 80017fe:	481d      	ldr	r0, [pc, #116]	; (8001874 <MX_UART5_Init+0x1a4>)
 8001800:	f7ff fe84 	bl	800150c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_7);
 8001804:	2107      	movs	r1, #7
 8001806:	481b      	ldr	r0, [pc, #108]	; (8001874 <MX_UART5_Init+0x1a4>)
 8001808:	f7ff feec 	bl	80015e4 <LL_DMA_DisableFifoMode>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800180c:	f7ff fd40 	bl	8001290 <__NVIC_GetPriorityGrouping>
 8001810:	4603      	mov	r3, r0
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fd90 	bl	800133c <NVIC_EncodePriority>
 800181c:	4603      	mov	r3, r0
 800181e:	4619      	mov	r1, r3
 8001820:	2035      	movs	r0, #53	; 0x35
 8001822:	f7ff fd61 	bl	80012e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8001826:	2035      	movs	r0, #53	; 0x35
 8001828:	f7ff fd40 	bl	80012ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800182c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001830:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800183a:	2300      	movs	r3, #0
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800183e:	230c      	movs	r3, #12
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001842:	2300      	movs	r3, #0
 8001844:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001846:	2300      	movs	r3, #0
 8001848:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	4809      	ldr	r0, [pc, #36]	; (8001878 <MX_UART5_Init+0x1a8>)
 8001852:	f000 fd55 	bl	8002300 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8001856:	4808      	ldr	r0, [pc, #32]	; (8001878 <MX_UART5_Init+0x1a8>)
 8001858:	f7ff ff24 	bl	80016a4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800185c:	4806      	ldr	r0, [pc, #24]	; (8001878 <MX_UART5_Init+0x1a8>)
 800185e:	f7ff ff11 	bl	8001684 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	3738      	adds	r7, #56	; 0x38
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40020800 	.word	0x40020800
 8001870:	40020c00 	.word	0x40020c00
 8001874:	40026000 	.word	0x40026000
 8001878:	40005000 	.word	0x40005000

0800187c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800187c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001882:	490e      	ldr	r1, [pc, #56]	; (80018bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001884:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001898:	4c0b      	ldr	r4, [pc, #44]	; (80018c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018a6:	f7ff fce1 	bl	800126c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018aa:	f000 fde1 	bl	8002470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ae:	f7ff fa97 	bl	8000de0 <main>
  bx  lr    
 80018b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80018c0:	08002508 	.word	0x08002508
  ldr r2, =_sbss
 80018c4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80018c8:	20000030 	.word	0x20000030

080018cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC_IRQHandler>

080018ce <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b089      	sub	sp, #36	; 0x24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	fa93 f3a3 	rbit	r3, r3
 80018e8:	613b      	str	r3, [r7, #16]
  return result;
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2103      	movs	r1, #3
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	401a      	ands	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	61bb      	str	r3, [r7, #24]
  return result;
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	fab3 f383 	clz	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	431a      	orrs	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	601a      	str	r2, [r3, #0]
}
 8001920:	bf00      	nop
 8001922:	3724      	adds	r7, #36	; 0x24
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	43db      	mvns	r3, r3
 8001940:	401a      	ands	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	431a      	orrs	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	605a      	str	r2, [r3, #4]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa93 f3a3 	rbit	r3, r3
 8001976:	613b      	str	r3, [r7, #16]
  return result;
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2103      	movs	r1, #3
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	61bb      	str	r3, [r7, #24]
  return result;
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	431a      	orrs	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80019ae:	bf00      	nop
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b089      	sub	sp, #36	; 0x24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	613b      	str	r3, [r7, #16]
  return result;
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2103      	movs	r1, #3
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	401a      	ands	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	61bb      	str	r3, [r7, #24]
  return result;
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	431a      	orrs	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	60da      	str	r2, [r3, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3724      	adds	r7, #36	; 0x24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a1a      	ldr	r2, [r3, #32]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	613b      	str	r3, [r7, #16]
  return result;
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	fab3 f383 	clz	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	210f      	movs	r1, #15
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	401a      	ands	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	61bb      	str	r3, [r7, #24]
  return result;
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	431a      	orrs	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001a6a:	bf00      	nop
 8001a6c:	3724      	adds	r7, #36	; 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b089      	sub	sp, #36	; 0x24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	613b      	str	r3, [r7, #16]
  return result;
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	61bb      	str	r3, [r7, #24]
  return result;
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001acc:	bf00      	nop
 8001ace:	3724      	adds	r7, #36	; 0x24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	613b      	str	r3, [r7, #16]
  return result;
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001b02:	e050      	b.n	8001ba6 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d042      	beq.n	8001ba0 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d003      	beq.n	8001b2a <LL_GPIO_Init+0x52>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d10d      	bne.n	8001b46 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	69b9      	ldr	r1, [r7, #24]
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff12 	bl	800195c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff fef3 	bl	800192c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	69b9      	ldr	r1, [r7, #24]
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ff33 	bl	80019ba <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d11a      	bne.n	8001b92 <LL_GPIO_Init+0xba>
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	60bb      	str	r3, [r7, #8]
  return result;
 8001b68:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b07      	cmp	r3, #7
 8001b72:	d807      	bhi.n	8001b84 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff4b 	bl	8001a18 <LL_GPIO_SetAFPin_0_7>
 8001b82:	e006      	b.n	8001b92 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	69b9      	ldr	r1, [r7, #24]
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff72 	bl	8001a76 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	461a      	mov	r2, r3
 8001b98:	69b9      	ldr	r1, [r7, #24]
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff fe97 	bl	80018ce <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1a7      	bne.n	8001b04 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <LL_RCC_GetSysClkSource>:
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <LL_RCC_GetSysClkSource+0x18>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800

08001bdc <LL_RCC_GetAHBPrescaler>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <LL_RCC_GetAHBPrescaler+0x18>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <LL_RCC_GetAPB1Prescaler>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800

08001c14 <LL_RCC_GetAPB2Prescaler>:
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <LL_RCC_GetAPB2Prescaler+0x18>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800

08001c30 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <LL_RCC_PLL_GetMainSource+0x18>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <LL_RCC_PLL_GetN+0x18>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	099b      	lsrs	r3, r3, #6
 8001c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40023800 	.word	0x40023800

08001c68 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <LL_RCC_PLL_GetP+0x18>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <LL_RCC_PLL_GetDivider+0x18>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001ca8:	f000 f820 	bl	8001cec <RCC_GetSystemClockFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f840 	bl	8001d3c <RCC_GetHCLKClockFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f84e 	bl	8001d68 <RCC_GetPCLK1ClockFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f85a 	bl	8001d90 <RCC_GetPCLK2ClockFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60da      	str	r2, [r3, #12]
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001cf6:	f7ff ff63 	bl	8001bc0 <LL_RCC_GetSysClkSource>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d00c      	beq.n	8001d1a <RCC_GetSystemClockFreq+0x2e>
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d80f      	bhi.n	8001d24 <RCC_GetSystemClockFreq+0x38>
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <RCC_GetSystemClockFreq+0x22>
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d003      	beq.n	8001d14 <RCC_GetSystemClockFreq+0x28>
 8001d0c:	e00a      	b.n	8001d24 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <RCC_GetSystemClockFreq+0x48>)
 8001d10:	607b      	str	r3, [r7, #4]
      break;
 8001d12:	e00a      	b.n	8001d2a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <RCC_GetSystemClockFreq+0x4c>)
 8001d16:	607b      	str	r3, [r7, #4]
      break;
 8001d18:	e007      	b.n	8001d2a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001d1a:	2008      	movs	r0, #8
 8001d1c:	f000 f84c 	bl	8001db8 <RCC_PLL_GetFreqDomain_SYS>
 8001d20:	6078      	str	r0, [r7, #4]
      break;
 8001d22:	e002      	b.n	8001d2a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <RCC_GetSystemClockFreq+0x48>)
 8001d26:	607b      	str	r3, [r7, #4]
      break;
 8001d28:	bf00      	nop
  }

  return frequency;
 8001d2a:	687b      	ldr	r3, [r7, #4]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	00f42400 	.word	0x00f42400
 8001d38:	017d7840 	.word	0x017d7840

08001d3c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001d44:	f7ff ff4a 	bl	8001bdc <LL_RCC_GetAHBPrescaler>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	091b      	lsrs	r3, r3, #4
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <RCC_GetHCLKClockFreq+0x28>)
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	461a      	mov	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	40d3      	lsrs	r3, r2
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	080024d8 	.word	0x080024d8

08001d68 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001d70:	f7ff ff42 	bl	8001bf8 <LL_RCC_GetAPB1Prescaler>
 8001d74:	4603      	mov	r3, r0
 8001d76:	0a9b      	lsrs	r3, r3, #10
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <RCC_GetPCLK1ClockFreq+0x24>)
 8001d7a:	5cd3      	ldrb	r3, [r2, r3]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	40d3      	lsrs	r3, r2
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	080024e8 	.word	0x080024e8

08001d90 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001d98:	f7ff ff3c 	bl	8001c14 <LL_RCC_GetAPB2Prescaler>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	0b5b      	lsrs	r3, r3, #13
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <RCC_GetPCLK2ClockFreq+0x24>)
 8001da2:	5cd3      	ldrb	r3, [r2, r3]
 8001da4:	461a      	mov	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	40d3      	lsrs	r3, r2
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	080024e8 	.word	0x080024e8

08001db8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001dcc:	f7ff ff30 	bl	8001c30 <LL_RCC_PLL_GetMainSource>
 8001dd0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d004      	beq.n	8001de2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dde:	d003      	beq.n	8001de8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001de0:	e005      	b.n	8001dee <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001de4:	617b      	str	r3, [r7, #20]
      break;
 8001de6:	e005      	b.n	8001df4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001dea:	617b      	str	r3, [r7, #20]
      break;
 8001dec:	e002      	b.n	8001df4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001dee:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001df0:	617b      	str	r3, [r7, #20]
      break;
 8001df2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d113      	bne.n	8001e22 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001dfa:	f7ff ff43 	bl	8001c84 <LL_RCC_PLL_GetDivider>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fbb3 f4f2 	udiv	r4, r3, r2
 8001e06:	f7ff ff21 	bl	8001c4c <LL_RCC_PLL_GetN>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	fb03 f404 	mul.w	r4, r3, r4
 8001e10:	f7ff ff2a 	bl	8001c68 <LL_RCC_PLL_GetP>
 8001e14:	4603      	mov	r3, r0
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	3301      	adds	r3, #1
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001e20:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001e22:	693b      	ldr	r3, [r7, #16]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd90      	pop	{r4, r7, pc}
 8001e2c:	00f42400 	.word	0x00f42400
 8001e30:	017d7840 	.word	0x017d7840

08001e34 <LL_USART_IsEnabled>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_USART_SetStopBitsLength>:
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	611a      	str	r2, [r3, #16]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_USART_SetHWFlowCtrl>:
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	615a      	str	r2, [r3, #20]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_USART_SetBaudRate>:
{
 8001ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eac:	b0c0      	sub	sp, #256	; 0x100
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001eb4:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8001eb8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001ebc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec8:	f040 810c 	bne.w	80020e4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001ecc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ed6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001eda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ede:	4622      	mov	r2, r4
 8001ee0:	462b      	mov	r3, r5
 8001ee2:	1891      	adds	r1, r2, r2
 8001ee4:	6639      	str	r1, [r7, #96]	; 0x60
 8001ee6:	415b      	adcs	r3, r3
 8001ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8001eea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001eee:	4621      	mov	r1, r4
 8001ef0:	eb12 0801 	adds.w	r8, r2, r1
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	eb43 0901 	adc.w	r9, r3, r1
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f0e:	4690      	mov	r8, r2
 8001f10:	4699      	mov	r9, r3
 8001f12:	4623      	mov	r3, r4
 8001f14:	eb18 0303 	adds.w	r3, r8, r3
 8001f18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f1c:	462b      	mov	r3, r5
 8001f1e:	eb49 0303 	adc.w	r3, r9, r3
 8001f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	469a      	mov	sl, r3
 8001f2e:	4693      	mov	fp, r2
 8001f30:	eb1a 030a 	adds.w	r3, sl, sl
 8001f34:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f36:	eb4b 030b 	adc.w	r3, fp, fp
 8001f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f44:	f7fe f940 	bl	80001c8 <__aeabi_uldivmod>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4b64      	ldr	r3, [pc, #400]	; (80020e0 <LL_USART_SetBaudRate+0x238>)
 8001f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	b29c      	uxth	r4, r3
 8001f5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f64:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f68:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8001f6c:	4642      	mov	r2, r8
 8001f6e:	464b      	mov	r3, r9
 8001f70:	1891      	adds	r1, r2, r2
 8001f72:	6539      	str	r1, [r7, #80]	; 0x50
 8001f74:	415b      	adcs	r3, r3
 8001f76:	657b      	str	r3, [r7, #84]	; 0x54
 8001f78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f7c:	4641      	mov	r1, r8
 8001f7e:	1851      	adds	r1, r2, r1
 8001f80:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f82:	4649      	mov	r1, r9
 8001f84:	414b      	adcs	r3, r1
 8001f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8001f94:	4659      	mov	r1, fp
 8001f96:	00cb      	lsls	r3, r1, #3
 8001f98:	4651      	mov	r1, sl
 8001f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f9e:	4651      	mov	r1, sl
 8001fa0:	00ca      	lsls	r2, r1, #3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4642      	mov	r2, r8
 8001faa:	189b      	adds	r3, r3, r2
 8001fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fb0:	464b      	mov	r3, r9
 8001fb2:	460a      	mov	r2, r1
 8001fb4:	eb42 0303 	adc.w	r3, r2, r3
 8001fb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001fbc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001fc6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001fca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001fce:	460b      	mov	r3, r1
 8001fd0:	18db      	adds	r3, r3, r3
 8001fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	eb42 0303 	adc.w	r3, r2, r3
 8001fda:	647b      	str	r3, [r7, #68]	; 0x44
 8001fdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fe0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001fe4:	f7fe f8f0 	bl	80001c8 <__aeabi_uldivmod>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4611      	mov	r1, r2
 8001fee:	4b3c      	ldr	r3, [pc, #240]	; (80020e0 <LL_USART_SetBaudRate+0x238>)
 8001ff0:	fba3 2301 	umull	r2, r3, r3, r1
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	2264      	movs	r2, #100	; 0x64
 8001ff8:	fb02 f303 	mul.w	r3, r2, r3
 8001ffc:	1acb      	subs	r3, r1, r3
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002004:	4b36      	ldr	r3, [pc, #216]	; (80020e0 <LL_USART_SetBaudRate+0x238>)
 8002006:	fba3 2302 	umull	r2, r3, r3, r2
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	b29b      	uxth	r3, r3
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	b29b      	uxth	r3, r3
 8002012:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002016:	b29b      	uxth	r3, r3
 8002018:	4423      	add	r3, r4
 800201a:	b29c      	uxth	r4, r3
 800201c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002020:	2200      	movs	r2, #0
 8002022:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002026:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800202a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800202e:	4642      	mov	r2, r8
 8002030:	464b      	mov	r3, r9
 8002032:	1891      	adds	r1, r2, r2
 8002034:	63b9      	str	r1, [r7, #56]	; 0x38
 8002036:	415b      	adcs	r3, r3
 8002038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800203a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800203e:	4641      	mov	r1, r8
 8002040:	1851      	adds	r1, r2, r1
 8002042:	6339      	str	r1, [r7, #48]	; 0x30
 8002044:	4649      	mov	r1, r9
 8002046:	414b      	adcs	r3, r1
 8002048:	637b      	str	r3, [r7, #52]	; 0x34
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002056:	4659      	mov	r1, fp
 8002058:	00cb      	lsls	r3, r1, #3
 800205a:	4651      	mov	r1, sl
 800205c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002060:	4651      	mov	r1, sl
 8002062:	00ca      	lsls	r2, r1, #3
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	4603      	mov	r3, r0
 800206a:	4642      	mov	r2, r8
 800206c:	189b      	adds	r3, r3, r2
 800206e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002072:	464b      	mov	r3, r9
 8002074:	460a      	mov	r2, r1
 8002076:	eb42 0303 	adc.w	r3, r2, r3
 800207a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800207e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002082:	2200      	movs	r2, #0
 8002084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002088:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800208c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002090:	460b      	mov	r3, r1
 8002092:	18db      	adds	r3, r3, r3
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
 8002096:	4613      	mov	r3, r2
 8002098:	eb42 0303 	adc.w	r3, r2, r3
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800209e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020a2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80020a6:	f7fe f88f 	bl	80001c8 <__aeabi_uldivmod>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <LL_USART_SetBaudRate+0x238>)
 80020b0:	fba3 1302 	umull	r1, r3, r3, r2
 80020b4:	095b      	lsrs	r3, r3, #5
 80020b6:	2164      	movs	r1, #100	; 0x64
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	3332      	adds	r3, #50	; 0x32
 80020c2:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <LL_USART_SetBaudRate+0x238>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	4423      	add	r3, r4
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020dc:	609a      	str	r2, [r3, #8]
}
 80020de:	e107      	b.n	80022f0 <LL_USART_SetBaudRate+0x448>
 80020e0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80020e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020e8:	2200      	movs	r2, #0
 80020ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020ee:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80020f2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80020f6:	4642      	mov	r2, r8
 80020f8:	464b      	mov	r3, r9
 80020fa:	1891      	adds	r1, r2, r2
 80020fc:	6239      	str	r1, [r7, #32]
 80020fe:	415b      	adcs	r3, r3
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002106:	4641      	mov	r1, r8
 8002108:	1854      	adds	r4, r2, r1
 800210a:	4649      	mov	r1, r9
 800210c:	eb43 0501 	adc.w	r5, r3, r1
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	00eb      	lsls	r3, r5, #3
 800211a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800211e:	00e2      	lsls	r2, r4, #3
 8002120:	4614      	mov	r4, r2
 8002122:	461d      	mov	r5, r3
 8002124:	4643      	mov	r3, r8
 8002126:	18e3      	adds	r3, r4, r3
 8002128:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800212c:	464b      	mov	r3, r9
 800212e:	eb45 0303 	adc.w	r3, r5, r3
 8002132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002136:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800213a:	2200      	movs	r2, #0
 800213c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002140:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002150:	4629      	mov	r1, r5
 8002152:	008b      	lsls	r3, r1, #2
 8002154:	4621      	mov	r1, r4
 8002156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800215a:	4621      	mov	r1, r4
 800215c:	008a      	lsls	r2, r1, #2
 800215e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002162:	f7fe f831 	bl	80001c8 <__aeabi_uldivmod>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4b64      	ldr	r3, [pc, #400]	; (80022fc <LL_USART_SetBaudRate+0x454>)
 800216c:	fba3 2302 	umull	r2, r3, r3, r2
 8002170:	095b      	lsrs	r3, r3, #5
 8002172:	b29b      	uxth	r3, r3
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	b29c      	uxth	r4, r3
 8002178:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800217c:	2200      	movs	r2, #0
 800217e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002182:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002186:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800218a:	4642      	mov	r2, r8
 800218c:	464b      	mov	r3, r9
 800218e:	1891      	adds	r1, r2, r2
 8002190:	61b9      	str	r1, [r7, #24]
 8002192:	415b      	adcs	r3, r3
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800219a:	4641      	mov	r1, r8
 800219c:	1851      	adds	r1, r2, r1
 800219e:	6139      	str	r1, [r7, #16]
 80021a0:	4649      	mov	r1, r9
 80021a2:	414b      	adcs	r3, r1
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021b2:	4659      	mov	r1, fp
 80021b4:	00cb      	lsls	r3, r1, #3
 80021b6:	4651      	mov	r1, sl
 80021b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021bc:	4651      	mov	r1, sl
 80021be:	00ca      	lsls	r2, r1, #3
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	4603      	mov	r3, r0
 80021c6:	4642      	mov	r2, r8
 80021c8:	189b      	adds	r3, r3, r2
 80021ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021ce:	464b      	mov	r3, r9
 80021d0:	460a      	mov	r2, r1
 80021d2:	eb42 0303 	adc.w	r3, r2, r3
 80021d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80021da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80021de:	2200      	movs	r2, #0
 80021e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021e4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80021f4:	4649      	mov	r1, r9
 80021f6:	008b      	lsls	r3, r1, #2
 80021f8:	4641      	mov	r1, r8
 80021fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021fe:	4641      	mov	r1, r8
 8002200:	008a      	lsls	r2, r1, #2
 8002202:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002206:	f7fd ffdf 	bl	80001c8 <__aeabi_uldivmod>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4b3b      	ldr	r3, [pc, #236]	; (80022fc <LL_USART_SetBaudRate+0x454>)
 8002210:	fba3 1302 	umull	r1, r3, r3, r2
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	2164      	movs	r1, #100	; 0x64
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	3332      	adds	r3, #50	; 0x32
 8002222:	4a36      	ldr	r2, [pc, #216]	; (80022fc <LL_USART_SetBaudRate+0x454>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	b29b      	uxth	r3, r3
 800222c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002230:	b29b      	uxth	r3, r3
 8002232:	4423      	add	r3, r4
 8002234:	b29c      	uxth	r4, r3
 8002236:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800223a:	2200      	movs	r2, #0
 800223c:	67bb      	str	r3, [r7, #120]	; 0x78
 800223e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002240:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002244:	4642      	mov	r2, r8
 8002246:	464b      	mov	r3, r9
 8002248:	1891      	adds	r1, r2, r2
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	415b      	adcs	r3, r3
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002254:	4641      	mov	r1, r8
 8002256:	1851      	adds	r1, r2, r1
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	4649      	mov	r1, r9
 800225c:	414b      	adcs	r3, r1
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800226c:	4659      	mov	r1, fp
 800226e:	00cb      	lsls	r3, r1, #3
 8002270:	4651      	mov	r1, sl
 8002272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002276:	4651      	mov	r1, sl
 8002278:	00ca      	lsls	r2, r1, #3
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	4603      	mov	r3, r0
 8002280:	4642      	mov	r2, r8
 8002282:	189b      	adds	r3, r3, r2
 8002284:	673b      	str	r3, [r7, #112]	; 0x70
 8002286:	464b      	mov	r3, r9
 8002288:	460a      	mov	r2, r1
 800228a:	eb42 0303 	adc.w	r3, r2, r3
 800228e:	677b      	str	r3, [r7, #116]	; 0x74
 8002290:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002294:	2200      	movs	r2, #0
 8002296:	66bb      	str	r3, [r7, #104]	; 0x68
 8002298:	66fa      	str	r2, [r7, #108]	; 0x6c
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80022a6:	4649      	mov	r1, r9
 80022a8:	008b      	lsls	r3, r1, #2
 80022aa:	4641      	mov	r1, r8
 80022ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022b0:	4641      	mov	r1, r8
 80022b2:	008a      	lsls	r2, r1, #2
 80022b4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80022b8:	f7fd ff86 	bl	80001c8 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <LL_USART_SetBaudRate+0x454>)
 80022c2:	fba3 1302 	umull	r1, r3, r3, r2
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2164      	movs	r1, #100	; 0x64
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	3332      	adds	r3, #50	; 0x32
 80022d4:	4a09      	ldr	r2, [pc, #36]	; (80022fc <LL_USART_SetBaudRate+0x454>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	b29b      	uxth	r3, r3
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4423      	add	r3, r4
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	bf00      	nop
 80022f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80022f6:	46bd      	mov	sp, r7
 80022f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022fc:	51eb851f 	.word	0x51eb851f

08002300 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff fd8e 	bl	8001e34 <LL_USART_IsEnabled>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d15e      	bne.n	80023dc <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002326:	f023 030c 	bic.w	r3, r3, #12
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	6851      	ldr	r1, [r2, #4]
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	68d2      	ldr	r2, [r2, #12]
 8002332:	4311      	orrs	r1, r2
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	6912      	ldr	r2, [r2, #16]
 8002338:	4311      	orrs	r1, r2
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	6992      	ldr	r2, [r2, #24]
 800233e:	430a      	orrs	r2, r1
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4619      	mov	r1, r3
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff fd85 	bl	8001e5c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	4619      	mov	r1, r3
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff fd92 	bl	8001e82 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800235e:	f107 0308 	add.w	r3, r7, #8
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fc9c 	bl	8001ca0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a1f      	ldr	r2, [pc, #124]	; (80023e8 <LL_USART_Init+0xe8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d102      	bne.n	8002376 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	61bb      	str	r3, [r7, #24]
 8002374:	e021      	b.n	80023ba <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <LL_USART_Init+0xec>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d102      	bne.n	8002384 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	e01a      	b.n	80023ba <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <LL_USART_Init+0xf0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d102      	bne.n	8002392 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	e013      	b.n	80023ba <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <LL_USART_Init+0xf4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d102      	bne.n	80023a0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	e00c      	b.n	80023ba <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <LL_USART_Init+0xf8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d102      	bne.n	80023ae <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	e005      	b.n	80023ba <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a12      	ldr	r2, [pc, #72]	; (80023fc <LL_USART_Init+0xfc>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00d      	beq.n	80023dc <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80023c8:	2300      	movs	r3, #0
 80023ca:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	69b9      	ldr	r1, [r7, #24]
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff fd66 	bl	8001ea8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80023dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3720      	adds	r7, #32
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40011000 	.word	0x40011000
 80023ec:	40004400 	.word	0x40004400
 80023f0:	40004800 	.word	0x40004800
 80023f4:	40011400 	.word	0x40011400
 80023f8:	40004c00 	.word	0x40004c00
 80023fc:	40005000 	.word	0x40005000

08002400 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <LL_InitTick+0x30>)
 8002414:	3b01      	subs	r3, #1
 8002416:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <LL_InitTick+0x30>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <LL_InitTick+0x30>)
 8002420:	2205      	movs	r2, #5
 8002422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000e010 	.word	0xe000e010

08002434 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800243c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff ffdd 	bl	8002400 <LL_InitTick>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002458:	4a04      	ldr	r2, [pc, #16]	; (800246c <LL_SetSystemCoreClock+0x1c>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6013      	str	r3, [r2, #0]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	2000000c 	.word	0x2000000c

08002470 <__libc_init_array>:
 8002470:	b570      	push	{r4, r5, r6, lr}
 8002472:	4d0d      	ldr	r5, [pc, #52]	; (80024a8 <__libc_init_array+0x38>)
 8002474:	4c0d      	ldr	r4, [pc, #52]	; (80024ac <__libc_init_array+0x3c>)
 8002476:	1b64      	subs	r4, r4, r5
 8002478:	10a4      	asrs	r4, r4, #2
 800247a:	2600      	movs	r6, #0
 800247c:	42a6      	cmp	r6, r4
 800247e:	d109      	bne.n	8002494 <__libc_init_array+0x24>
 8002480:	4d0b      	ldr	r5, [pc, #44]	; (80024b0 <__libc_init_array+0x40>)
 8002482:	4c0c      	ldr	r4, [pc, #48]	; (80024b4 <__libc_init_array+0x44>)
 8002484:	f000 f818 	bl	80024b8 <_init>
 8002488:	1b64      	subs	r4, r4, r5
 800248a:	10a4      	asrs	r4, r4, #2
 800248c:	2600      	movs	r6, #0
 800248e:	42a6      	cmp	r6, r4
 8002490:	d105      	bne.n	800249e <__libc_init_array+0x2e>
 8002492:	bd70      	pop	{r4, r5, r6, pc}
 8002494:	f855 3b04 	ldr.w	r3, [r5], #4
 8002498:	4798      	blx	r3
 800249a:	3601      	adds	r6, #1
 800249c:	e7ee      	b.n	800247c <__libc_init_array+0xc>
 800249e:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a2:	4798      	blx	r3
 80024a4:	3601      	adds	r6, #1
 80024a6:	e7f2      	b.n	800248e <__libc_init_array+0x1e>
 80024a8:	08002500 	.word	0x08002500
 80024ac:	08002500 	.word	0x08002500
 80024b0:	08002500 	.word	0x08002500
 80024b4:	08002504 	.word	0x08002504

080024b8 <_init>:
 80024b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ba:	bf00      	nop
 80024bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024be:	bc08      	pop	{r3}
 80024c0:	469e      	mov	lr, r3
 80024c2:	4770      	bx	lr

080024c4 <_fini>:
 80024c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c6:	bf00      	nop
 80024c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ca:	bc08      	pop	{r3}
 80024cc:	469e      	mov	lr, r3
 80024ce:	4770      	bx	lr
