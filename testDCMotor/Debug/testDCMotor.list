
testDCMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000251c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026b4  080026b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026b4  080026b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026b4  080026b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026b4  080026b4  000126b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026b8  080026b8  000126b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008764  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c1b  00000000  00000000  000287a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  0002a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000800  00000000  00000000  0002acb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023176  00000000  00000000  0002b4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009efb  00000000  00000000  0004e62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7d26  00000000  00000000  00058529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013024f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000230c  00000000  00000000  001302a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800268c 	.word	0x0800268c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800268c 	.word	0x0800268c

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	463b      	mov	r3, r7
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
 80001d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80001da:	4b21      	ldr	r3, [pc, #132]	; (8000260 <MX_ADC1_Init+0x98>)
 80001dc:	4a21      	ldr	r2, [pc, #132]	; (8000264 <MX_ADC1_Init+0x9c>)
 80001de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80001e0:	4b1f      	ldr	r3, [pc, #124]	; (8000260 <MX_ADC1_Init+0x98>)
 80001e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80001e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001e8:	4b1d      	ldr	r3, [pc, #116]	; (8000260 <MX_ADC1_Init+0x98>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80001ee:	4b1c      	ldr	r3, [pc, #112]	; (8000260 <MX_ADC1_Init+0x98>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80001f4:	4b1a      	ldr	r3, [pc, #104]	; (8000260 <MX_ADC1_Init+0x98>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001fa:	4b19      	ldr	r3, [pc, #100]	; (8000260 <MX_ADC1_Init+0x98>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000202:	4b17      	ldr	r3, [pc, #92]	; (8000260 <MX_ADC1_Init+0x98>)
 8000204:	2200      	movs	r2, #0
 8000206:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000208:	4b15      	ldr	r3, [pc, #84]	; (8000260 <MX_ADC1_Init+0x98>)
 800020a:	4a17      	ldr	r2, [pc, #92]	; (8000268 <MX_ADC1_Init+0xa0>)
 800020c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800020e:	4b14      	ldr	r3, [pc, #80]	; (8000260 <MX_ADC1_Init+0x98>)
 8000210:	2200      	movs	r2, #0
 8000212:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000214:	4b12      	ldr	r3, [pc, #72]	; (8000260 <MX_ADC1_Init+0x98>)
 8000216:	2201      	movs	r2, #1
 8000218:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800021a:	4b11      	ldr	r3, [pc, #68]	; (8000260 <MX_ADC1_Init+0x98>)
 800021c:	2200      	movs	r2, #0
 800021e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000222:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <MX_ADC1_Init+0x98>)
 8000224:	2201      	movs	r2, #1
 8000226:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000228:	480d      	ldr	r0, [pc, #52]	; (8000260 <MX_ADC1_Init+0x98>)
 800022a:	f000 ff8b 	bl	8001144 <HAL_ADC_Init>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000234:	f000 fca4 	bl	8000b80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000238:	2301      	movs	r3, #1
 800023a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800023c:	2301      	movs	r3, #1
 800023e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000240:	2302      	movs	r3, #2
 8000242:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000244:	463b      	mov	r3, r7
 8000246:	4619      	mov	r1, r3
 8000248:	4805      	ldr	r0, [pc, #20]	; (8000260 <MX_ADC1_Init+0x98>)
 800024a:	f000 ffbf 	bl	80011cc <HAL_ADC_ConfigChannel>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000254:	f000 fc94 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000028 	.word	0x20000028
 8000264:	40012000 	.word	0x40012000
 8000268:	0f000001 	.word	0x0f000001

0800026c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000272:	463b      	mov	r3, r7
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800027e:	4b21      	ldr	r3, [pc, #132]	; (8000304 <MX_ADC2_Init+0x98>)
 8000280:	4a21      	ldr	r2, [pc, #132]	; (8000308 <MX_ADC2_Init+0x9c>)
 8000282:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000284:	4b1f      	ldr	r3, [pc, #124]	; (8000304 <MX_ADC2_Init+0x98>)
 8000286:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800028a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800028c:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <MX_ADC2_Init+0x98>)
 800028e:	2200      	movs	r2, #0
 8000290:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000292:	4b1c      	ldr	r3, [pc, #112]	; (8000304 <MX_ADC2_Init+0x98>)
 8000294:	2200      	movs	r2, #0
 8000296:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000298:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <MX_ADC2_Init+0x98>)
 800029a:	2200      	movs	r2, #0
 800029c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800029e:	4b19      	ldr	r3, [pc, #100]	; (8000304 <MX_ADC2_Init+0x98>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002a6:	4b17      	ldr	r3, [pc, #92]	; (8000304 <MX_ADC2_Init+0x98>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <MX_ADC2_Init+0x98>)
 80002ae:	4a17      	ldr	r2, [pc, #92]	; (800030c <MX_ADC2_Init+0xa0>)
 80002b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <MX_ADC2_Init+0x98>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_ADC2_Init+0x98>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <MX_ADC2_Init+0x98>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_ADC2_Init+0x98>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80002cc:	480d      	ldr	r0, [pc, #52]	; (8000304 <MX_ADC2_Init+0x98>)
 80002ce:	f000 ff39 	bl	8001144 <HAL_ADC_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80002d8:	f000 fc52 	bl	8000b80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002dc:	2303      	movs	r3, #3
 80002de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80002e4:	2302      	movs	r3, #2
 80002e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80002e8:	463b      	mov	r3, r7
 80002ea:	4619      	mov	r1, r3
 80002ec:	4805      	ldr	r0, [pc, #20]	; (8000304 <MX_ADC2_Init+0x98>)
 80002ee:	f000 ff6d 	bl	80011cc <HAL_ADC_ConfigChannel>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80002f8:	f000 fc42 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000070 	.word	0x20000070
 8000308:	40012100 	.word	0x40012100
 800030c:	0f000001 	.word	0x0f000001

08000310 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08c      	sub	sp, #48	; 0x30
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000318:	f107 031c 	add.w	r3, r7, #28
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a2e      	ldr	r2, [pc, #184]	; (80003e8 <HAL_ADC_MspInit+0xd8>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d128      	bne.n	8000384 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000332:	2300      	movs	r3, #0
 8000334:	61bb      	str	r3, [r7, #24]
 8000336:	4b2d      	ldr	r3, [pc, #180]	; (80003ec <HAL_ADC_MspInit+0xdc>)
 8000338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800033a:	4a2c      	ldr	r2, [pc, #176]	; (80003ec <HAL_ADC_MspInit+0xdc>)
 800033c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000340:	6453      	str	r3, [r2, #68]	; 0x44
 8000342:	4b2a      	ldr	r3, [pc, #168]	; (80003ec <HAL_ADC_MspInit+0xdc>)
 8000344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800034a:	61bb      	str	r3, [r7, #24]
 800034c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]
 8000352:	4b26      	ldr	r3, [pc, #152]	; (80003ec <HAL_ADC_MspInit+0xdc>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a25      	ldr	r2, [pc, #148]	; (80003ec <HAL_ADC_MspInit+0xdc>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
 800035e:	4b23      	ldr	r3, [pc, #140]	; (80003ec <HAL_ADC_MspInit+0xdc>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	617b      	str	r3, [r7, #20]
 8000368:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800036a:	2302      	movs	r3, #2
 800036c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800036e:	2303      	movs	r3, #3
 8000370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	2300      	movs	r3, #0
 8000374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000376:	f107 031c 	add.w	r3, r7, #28
 800037a:	4619      	mov	r1, r3
 800037c:	481c      	ldr	r0, [pc, #112]	; (80003f0 <HAL_ADC_MspInit+0xe0>)
 800037e:	f001 fa29 	bl	80017d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000382:	e02c      	b.n	80003de <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a1a      	ldr	r2, [pc, #104]	; (80003f4 <HAL_ADC_MspInit+0xe4>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d127      	bne.n	80003de <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
 8000392:	4b16      	ldr	r3, [pc, #88]	; (80003ec <HAL_ADC_MspInit+0xdc>)
 8000394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000396:	4a15      	ldr	r2, [pc, #84]	; (80003ec <HAL_ADC_MspInit+0xdc>)
 8000398:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800039c:	6453      	str	r3, [r2, #68]	; 0x44
 800039e:	4b13      	ldr	r3, [pc, #76]	; (80003ec <HAL_ADC_MspInit+0xdc>)
 80003a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003a6:	613b      	str	r3, [r7, #16]
 80003a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <HAL_ADC_MspInit+0xdc>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <HAL_ADC_MspInit+0xdc>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <HAL_ADC_MspInit+0xdc>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003c6:	2308      	movs	r3, #8
 80003c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003ca:	2303      	movs	r3, #3
 80003cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d2:	f107 031c 	add.w	r3, r7, #28
 80003d6:	4619      	mov	r1, r3
 80003d8:	4805      	ldr	r0, [pc, #20]	; (80003f0 <HAL_ADC_MspInit+0xe0>)
 80003da:	f001 f9fb 	bl	80017d4 <HAL_GPIO_Init>
}
 80003de:	bf00      	nop
 80003e0:	3730      	adds	r7, #48	; 0x30
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40012000 	.word	0x40012000
 80003ec:	40023800 	.word	0x40023800
 80003f0:	40020000 	.word	0x40020000
 80003f4:	40012100 	.word	0x40012100

080003f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <__NVIC_GetPriorityGrouping+0x18>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	0a1b      	lsrs	r3, r3, #8
 8000402:	f003 0307 	and.w	r3, r3, #7
}
 8000406:	4618      	mov	r0, r3
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	e000ed00 	.word	0xe000ed00

08000414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800041e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000422:	2b00      	cmp	r3, #0
 8000424:	db0b      	blt.n	800043e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	f003 021f 	and.w	r2, r3, #31
 800042c:	4907      	ldr	r1, [pc, #28]	; (800044c <__NVIC_EnableIRQ+0x38>)
 800042e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000432:	095b      	lsrs	r3, r3, #5
 8000434:	2001      	movs	r0, #1
 8000436:	fa00 f202 	lsl.w	r2, r0, r2
 800043a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	e000e100 	.word	0xe000e100

08000450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	6039      	str	r1, [r7, #0]
 800045a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800045c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000460:	2b00      	cmp	r3, #0
 8000462:	db0a      	blt.n	800047a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	b2da      	uxtb	r2, r3
 8000468:	490c      	ldr	r1, [pc, #48]	; (800049c <__NVIC_SetPriority+0x4c>)
 800046a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800046e:	0112      	lsls	r2, r2, #4
 8000470:	b2d2      	uxtb	r2, r2
 8000472:	440b      	add	r3, r1
 8000474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000478:	e00a      	b.n	8000490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	b2da      	uxtb	r2, r3
 800047e:	4908      	ldr	r1, [pc, #32]	; (80004a0 <__NVIC_SetPriority+0x50>)
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	f003 030f 	and.w	r3, r3, #15
 8000486:	3b04      	subs	r3, #4
 8000488:	0112      	lsls	r2, r2, #4
 800048a:	b2d2      	uxtb	r2, r2
 800048c:	440b      	add	r3, r1
 800048e:	761a      	strb	r2, [r3, #24]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	e000e100 	.word	0xe000e100
 80004a0:	e000ed00 	.word	0xe000ed00

080004a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b089      	sub	sp, #36	; 0x24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f003 0307 	and.w	r3, r3, #7
 80004b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004b8:	69fb      	ldr	r3, [r7, #28]
 80004ba:	f1c3 0307 	rsb	r3, r3, #7
 80004be:	2b04      	cmp	r3, #4
 80004c0:	bf28      	it	cs
 80004c2:	2304      	movcs	r3, #4
 80004c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004c6:	69fb      	ldr	r3, [r7, #28]
 80004c8:	3304      	adds	r3, #4
 80004ca:	2b06      	cmp	r3, #6
 80004cc:	d902      	bls.n	80004d4 <NVIC_EncodePriority+0x30>
 80004ce:	69fb      	ldr	r3, [r7, #28]
 80004d0:	3b03      	subs	r3, #3
 80004d2:	e000      	b.n	80004d6 <NVIC_EncodePriority+0x32>
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004dc:	69bb      	ldr	r3, [r7, #24]
 80004de:	fa02 f303 	lsl.w	r3, r2, r3
 80004e2:	43da      	mvns	r2, r3
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	401a      	ands	r2, r3
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	43d9      	mvns	r1, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004fc:	4313      	orrs	r3, r2
         );
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3724      	adds	r7, #36	; 0x24
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000518:	4907      	ldr	r1, [pc, #28]	; (8000538 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4313      	orrs	r3, r2
 800051e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4013      	ands	r3, r2
 8000528:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800052a:	68fb      	ldr	r3, [r7, #12]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	40023800 	.word	0x40023800

0800053c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000546:	4a13      	ldr	r2, [pc, #76]	; (8000594 <LL_SYSCFG_SetEXTISource+0x58>)
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	3302      	adds	r3, #2
 800054e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	0c1b      	lsrs	r3, r3, #16
 8000556:	43db      	mvns	r3, r3
 8000558:	ea02 0103 	and.w	r1, r2, r3
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	0c1b      	lsrs	r3, r3, #16
 8000560:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	fa93 f3a3 	rbit	r3, r3
 8000568:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	fab3 f383 	clz	r3, r3
 8000570:	b2db      	uxtb	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	fa03 f202 	lsl.w	r2, r3, r2
 800057a:	4806      	ldr	r0, [pc, #24]	; (8000594 <LL_SYSCFG_SetEXTISource+0x58>)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	430a      	orrs	r2, r1
 8000582:	3302      	adds	r3, #2
 8000584:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000588:	bf00      	nop
 800058a:	3714      	adds	r7, #20
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40013800 	.word	0x40013800

08000598 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000598:	b480      	push	{r7}
 800059a:	b089      	sub	sp, #36	; 0x24
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	fa93 f3a3 	rbit	r3, r3
 80005b2:	613b      	str	r3, [r7, #16]
  return result;
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	fab3 f383 	clz	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	2103      	movs	r1, #3
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	43db      	mvns	r3, r3
 80005c6:	401a      	ands	r2, r3
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	fa93 f3a3 	rbit	r3, r3
 80005d2:	61bb      	str	r3, [r7, #24]
  return result;
 80005d4:	69bb      	ldr	r3, [r7, #24]
 80005d6:	fab3 f383 	clz	r3, r3
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	fa01 f303 	lsl.w	r3, r1, r3
 80005e4:	431a      	orrs	r2, r3
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	3724      	adds	r7, #36	; 0x24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b089      	sub	sp, #36	; 0x24
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	68da      	ldr	r2, [r3, #12]
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	fa93 f3a3 	rbit	r3, r3
 8000610:	613b      	str	r3, [r7, #16]
  return result;
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	fab3 f383 	clz	r3, r3
 8000618:	b2db      	uxtb	r3, r3
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	2103      	movs	r1, #3
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	43db      	mvns	r3, r3
 8000624:	401a      	ands	r2, r3
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	fa93 f3a3 	rbit	r3, r3
 8000630:	61bb      	str	r3, [r7, #24]
  return result;
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	fab3 f383 	clz	r3, r3
 8000638:	b2db      	uxtb	r3, r3
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	fa01 f303 	lsl.w	r3, r1, r3
 8000642:	431a      	orrs	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	60da      	str	r2, [r3, #12]
}
 8000648:	bf00      	nop
 800064a:	3724      	adds	r7, #36	; 0x24
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	041a      	lsls	r2, r3, #16
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	619a      	str	r2, [r3, #24]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
	...

08000674 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	463b      	mov	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
 8000692:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000694:	2004      	movs	r0, #4
 8000696:	f7ff ff39 	bl	800050c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800069a:	2001      	movs	r0, #1
 800069c:	f7ff ff36 	bl	800050c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80006a0:	2010      	movs	r0, #16
 80006a2:	f7ff ff33 	bl	800050c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f7ff ff30 	bl	800050c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 80006ac:	f641 4106 	movw	r1, #7174	; 0x1c06
 80006b0:	4855      	ldr	r0, [pc, #340]	; (8000808 <MX_GPIO_Init+0x194>)
 80006b2:	f7ff ffcf 	bl	8000654 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_9);
 80006b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ba:	4854      	ldr	r0, [pc, #336]	; (800080c <MX_GPIO_Init+0x198>)
 80006bc:	f7ff ffca 	bl	8000654 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_15);
 80006c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c4:	4852      	ldr	r0, [pc, #328]	; (8000810 <MX_GPIO_Init+0x19c>)
 80006c6:	f7ff ffc5 	bl	8000654 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 80006ca:	2306      	movs	r3, #6
 80006cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006ce:	2301      	movs	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80006da:	2302      	movs	r3, #2
 80006dc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006de:	463b      	mov	r3, r7
 80006e0:	4619      	mov	r1, r3
 80006e2:	4849      	ldr	r0, [pc, #292]	; (8000808 <MX_GPIO_Init+0x194>)
 80006e4:	f001 fc30 	bl	8001f48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80006e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006ee:	2301      	movs	r3, #1
 80006f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80006f2:	2302      	movs	r3, #2
 80006f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80006fa:	2302      	movs	r3, #2
 80006fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fe:	463b      	mov	r3, r7
 8000700:	4619      	mov	r1, r3
 8000702:	4842      	ldr	r0, [pc, #264]	; (800080c <MX_GPIO_Init+0x198>)
 8000704:	f001 fc20 	bl	8001f48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000708:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800070c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800070e:	2301      	movs	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071e:	463b      	mov	r3, r7
 8000720:	4619      	mov	r1, r3
 8000722:	483b      	ldr	r0, [pc, #236]	; (8000810 <MX_GPIO_Init+0x19c>)
 8000724:	f001 fc10 	bl	8001f48 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8000728:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800072c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800072e:	2301      	movs	r3, #1
 8000730:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073e:	463b      	mov	r3, r7
 8000740:	4619      	mov	r1, r3
 8000742:	4831      	ldr	r0, [pc, #196]	; (8000808 <MX_GPIO_Init+0x194>)
 8000744:	f001 fc00 	bl	8001f48 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE9);
 8000748:	4932      	ldr	r1, [pc, #200]	; (8000814 <MX_GPIO_Init+0x1a0>)
 800074a:	2002      	movs	r0, #2
 800074c:	f7ff fef6 	bl	800053c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE15);
 8000750:	4931      	ldr	r1, [pc, #196]	; (8000818 <MX_GPIO_Init+0x1a4>)
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff fef2 	bl	800053c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 8000758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800075c:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800075e:	2301      	movs	r3, #1
 8000760:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000762:	2300      	movs	r3, #0
 8000764:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000766:	2302      	movs	r3, #2
 8000768:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800076a:	f107 0318 	add.w	r3, r7, #24
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fa64 	bl	8001c3c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000778:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800077a:	2301      	movs	r3, #1
 800077c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800077e:	2300      	movs	r3, #0
 8000780:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000782:	2302      	movs	r3, #2
 8000784:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000786:	f107 0318 	add.w	r3, r7, #24
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fa56 	bl	8001c3c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_9, LL_GPIO_PULL_UP);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000796:	481c      	ldr	r0, [pc, #112]	; (8000808 <MX_GPIO_Init+0x194>)
 8000798:	f7ff ff2d 	bl	80005f6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_15, LL_GPIO_PULL_UP);
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a2:	481e      	ldr	r0, [pc, #120]	; (800081c <MX_GPIO_Init+0x1a8>)
 80007a4:	f7ff ff27 	bl	80005f6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_9, LL_GPIO_MODE_INPUT);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ae:	4816      	ldr	r0, [pc, #88]	; (8000808 <MX_GPIO_Init+0x194>)
 80007b0:	f7ff fef2 	bl	8000598 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_15, LL_GPIO_MODE_INPUT);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ba:	4818      	ldr	r0, [pc, #96]	; (800081c <MX_GPIO_Init+0x1a8>)
 80007bc:	f7ff feec 	bl	8000598 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80007c0:	f7ff fe1a 	bl	80003f8 <__NVIC_GetPriorityGrouping>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fe6a 	bl	80004a4 <NVIC_EncodePriority>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4619      	mov	r1, r3
 80007d4:	2017      	movs	r0, #23
 80007d6:	f7ff fe3b 	bl	8000450 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007da:	2017      	movs	r0, #23
 80007dc:	f7ff fe1a 	bl	8000414 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80007e0:	f7ff fe0a 	bl	80003f8 <__NVIC_GetPriorityGrouping>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fe5a 	bl	80004a4 <NVIC_EncodePriority>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4619      	mov	r1, r3
 80007f4:	2028      	movs	r0, #40	; 0x28
 80007f6:	f7ff fe2b 	bl	8000450 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007fa:	2028      	movs	r0, #40	; 0x28
 80007fc:	f7ff fe0a 	bl	8000414 <__NVIC_EnableIRQ>

}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40020800 	.word	0x40020800
 800080c:	40021000 	.word	0x40021000
 8000810:	40020c00 	.word	0x40020c00
 8000814:	00f00002 	.word	0x00f00002
 8000818:	f0000003 	.word	0xf0000003
 800081c:	40020000 	.word	0x40020000

08000820 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <LL_RCC_HSI_Enable+0x1c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <LL_RCC_HSI_Enable+0x1c>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6013      	str	r3, [r2, #0]
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <LL_RCC_HSI_IsReady+0x20>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f003 0302 	and.w	r3, r3, #2
 800084c:	2b02      	cmp	r3, #2
 800084e:	bf0c      	ite	eq
 8000850:	2301      	moveq	r3, #1
 8000852:	2300      	movne	r3, #0
 8000854:	b2db      	uxtb	r3, r3
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40023800 	.word	0x40023800

08000864 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	4904      	ldr	r1, [pc, #16]	; (800088c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800087a:	4313      	orrs	r3, r2
 800087c:	600b      	str	r3, [r1, #0]
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <LL_RCC_SetSysClkSource+0x24>)
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f023 0203 	bic.w	r2, r3, #3
 80008a0:	4904      	ldr	r1, [pc, #16]	; (80008b4 <LL_RCC_SetSysClkSource+0x24>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	608b      	str	r3, [r1, #8]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40023800 	.word	0x40023800

080008b8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <LL_RCC_GetSysClkSource+0x18>)
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f003 030c 	and.w	r3, r3, #12
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80008e4:	4904      	ldr	r1, [pc, #16]	; (80008f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	608b      	str	r3, [r1, #8]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	40023800 	.word	0x40023800

080008fc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800090c:	4904      	ldr	r1, [pc, #16]	; (8000920 <LL_RCC_SetAPB1Prescaler+0x24>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4313      	orrs	r3, r2
 8000912:	608b      	str	r3, [r1, #8]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	40023800 	.word	0x40023800

08000924 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <LL_RCC_SetAPB2Prescaler+0x24>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000934:	4904      	ldr	r1, [pc, #16]	; (8000948 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4313      	orrs	r3, r2
 800093a:	608b      	str	r3, [r1, #8]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	40023800 	.word	0x40023800

0800094c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <LL_RCC_PLL_Enable+0x1c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <LL_RCC_PLL_Enable+0x1c>)
 8000956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <LL_RCC_PLL_IsReady+0x24>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800097c:	bf0c      	ite	eq
 800097e:	2301      	moveq	r3, #1
 8000980:	2300      	movne	r3, #0
 8000982:	b2db      	uxtb	r3, r3
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80009a8:	4013      	ands	r3, r2
 80009aa:	68f9      	ldr	r1, [r7, #12]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	4311      	orrs	r1, r2
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	0192      	lsls	r2, r2, #6
 80009b4:	430a      	orrs	r2, r1
 80009b6:	4908      	ldr	r1, [pc, #32]	; (80009d8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80009b8:	4313      	orrs	r3, r2
 80009ba:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80009c4:	4904      	ldr	r1, [pc, #16]	; (80009d8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40023800 	.word	0x40023800
 80009dc:	ffbf8000 	.word	0xffbf8000

080009e0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <LL_FLASH_SetLatency+0x24>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f023 0207 	bic.w	r2, r3, #7
 80009f0:	4904      	ldr	r1, [pc, #16]	; (8000a04 <LL_FLASH_SetLatency+0x24>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	600b      	str	r3, [r1, #0]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	40023c00 	.word	0x40023c00

08000a08 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <LL_FLASH_GetLatency+0x18>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f003 0307 	and.w	r3, r3, #7
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023c00 	.word	0x40023c00

08000a24 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000a34:	4904      	ldr	r1, [pc, #16]	; (8000a48 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	600b      	str	r3, [r1, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	40007000 	.word	0x40007000

08000a4c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f043 0201 	orr.w	r2, r3, #1
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a1a      	ldr	r2, [r3, #32]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	621a      	str	r2, [r3, #32]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f000 fae3 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab2:	f000 f81b 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab6:	f7ff fddd 	bl	8000674 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000aba:	f000 fa11 	bl	8000ee0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000abe:	f7ff fb83 	bl	80001c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ac2:	f7ff fbd3 	bl	800026c <MX_ADC2_Init>
  MX_TIM3_Init();
 8000ac6:	f000 fa7d 	bl	8000fc4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH3);
 8000aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ace:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ad2:	f7ff ffcb 	bl	8000a6c <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 8000ad6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ada:	f7ff ffb7 	bl	8000a4c <LL_TIM_EnableCounter>
  LL_TIM_OC_SetCompareCH3(TIM2, 64);
 8000ade:	2140      	movs	r1, #64	; 0x40
 8000ae0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ae4:	f7ff ffd3 	bl	8000a8e <LL_TIM_OC_SetCompareCH3>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <main+0x3e>
	...

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000af0:	2002      	movs	r0, #2
 8000af2:	f7ff ff75 	bl	80009e0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000af6:	bf00      	nop
 8000af8:	f7ff ff86 	bl	8000a08 <LL_FLASH_GetLatency>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d1fa      	bne.n	8000af8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000b02:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b06:	f7ff ff8d 	bl	8000a24 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000b0a:	2010      	movs	r0, #16
 8000b0c:	f7ff feaa 	bl	8000864 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000b10:	f7ff fe86 	bl	8000820 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000b14:	bf00      	nop
 8000b16:	f7ff fe93 	bl	8000840 <LL_RCC_HSI_IsReady>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d1fa      	bne.n	8000b16 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 84, LL_RCC_PLLP_DIV_2);
 8000b20:	2300      	movs	r3, #0
 8000b22:	2254      	movs	r2, #84	; 0x54
 8000b24:	2108      	movs	r1, #8
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff ff34 	bl	8000994 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000b2c:	f7ff ff0e 	bl	800094c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000b30:	bf00      	nop
 8000b32:	f7ff ff1b 	bl	800096c <LL_RCC_PLL_IsReady>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d1fa      	bne.n	8000b32 <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff fec9 	bl	80008d4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000b42:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b46:	f7ff fed9 	bl	80008fc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff feea 	bl	8000924 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b50:	2002      	movs	r0, #2
 8000b52:	f7ff fe9d 	bl	8000890 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b56:	bf00      	nop
 8000b58:	f7ff feae 	bl	80008b8 <LL_RCC_GetSysClkSource>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d1fa      	bne.n	8000b58 <SystemClock_Config+0x6c>
  {

  }
  LL_SetSystemCoreClock(84000000);
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <SystemClock_Config+0x90>)
 8000b64:	f001 fd56 	bl	8002614 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000b68:	200f      	movs	r0, #15
 8000b6a:	f000 faa7 	bl	80010bc <HAL_InitTick>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b74:	f000 f804 	bl	8000b80 <Error_Handler>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	0501bd00 	.word	0x0501bd00

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000be6:	695a      	ldr	r2, [r3, #20]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4013      	ands	r3, r2
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2301      	moveq	r3, #1
 8000bf4:	2300      	movne	r3, #0
 8000bf6:	b2db      	uxtb	r3, r3
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	40013c00 	.word	0x40013c00

08000c08 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6153      	str	r3, [r2, #20]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40013c00 	.word	0x40013c00

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 fa52 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8000c80:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c84:	f7ff ffaa 	bl	8000bdc <LL_EXTI_IsActiveFlag_0_31>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <EXTI9_5_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);
 8000c8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c92:	f7ff ffb9 	bl	8000c08 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_9 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8000c9e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ca2:	f7ff ff9b 	bl	8000bdc <LL_EXTI_IsActiveFlag_0_31>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d003      	beq.n	8000cb4 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8000cac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000cb0:	f7ff ffaa 	bl	8000c08 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <LL_AHB1_GRP1_EnableClock>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ce8:	4907      	ldr	r1, [pc, #28]	; (8000d08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	40023800 	.word	0x40023800

08000d0c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d18:	4907      	ldr	r1, [pc, #28]	; (8000d38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4013      	ands	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	40023800 	.word	0x40023800

08000d3c <LL_TIM_DisableARRPreload>:
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	601a      	str	r2, [r3, #0]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_TIM_OC_DisableFast>:
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d01c      	beq.n	8000da6 <LL_TIM_OC_DisableFast+0x4a>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	d017      	beq.n	8000da2 <LL_TIM_OC_DisableFast+0x46>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b10      	cmp	r3, #16
 8000d76:	d012      	beq.n	8000d9e <LL_TIM_OC_DisableFast+0x42>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	2b40      	cmp	r3, #64	; 0x40
 8000d7c:	d00d      	beq.n	8000d9a <LL_TIM_OC_DisableFast+0x3e>
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d84:	d007      	beq.n	8000d96 <LL_TIM_OC_DisableFast+0x3a>
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d8c:	d101      	bne.n	8000d92 <LL_TIM_OC_DisableFast+0x36>
 8000d8e:	2305      	movs	r3, #5
 8000d90:	e00a      	b.n	8000da8 <LL_TIM_OC_DisableFast+0x4c>
 8000d92:	2306      	movs	r3, #6
 8000d94:	e008      	b.n	8000da8 <LL_TIM_OC_DisableFast+0x4c>
 8000d96:	2304      	movs	r3, #4
 8000d98:	e006      	b.n	8000da8 <LL_TIM_OC_DisableFast+0x4c>
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e004      	b.n	8000da8 <LL_TIM_OC_DisableFast+0x4c>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e002      	b.n	8000da8 <LL_TIM_OC_DisableFast+0x4c>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <LL_TIM_OC_DisableFast+0x4c>
 8000da6:	2300      	movs	r3, #0
 8000da8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3318      	adds	r3, #24
 8000dae:	4619      	mov	r1, r3
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <LL_TIM_OC_DisableFast+0x84>)
 8000db4:	5cd3      	ldrb	r3, [r2, r3]
 8000db6:	440b      	add	r3, r1
 8000db8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	4908      	ldr	r1, [pc, #32]	; (8000de4 <LL_TIM_OC_DisableFast+0x88>)
 8000dc2:	5ccb      	ldrb	r3, [r1, r3]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	401a      	ands	r2, r3
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	601a      	str	r2, [r3, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	080026a4 	.word	0x080026a4
 8000de4:	080026ac 	.word	0x080026ac

08000de8 <LL_TIM_OC_EnablePreload>:
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d01c      	beq.n	8000e32 <LL_TIM_OC_EnablePreload+0x4a>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	d017      	beq.n	8000e2e <LL_TIM_OC_EnablePreload+0x46>
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	2b10      	cmp	r3, #16
 8000e02:	d012      	beq.n	8000e2a <LL_TIM_OC_EnablePreload+0x42>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2b40      	cmp	r3, #64	; 0x40
 8000e08:	d00d      	beq.n	8000e26 <LL_TIM_OC_EnablePreload+0x3e>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e10:	d007      	beq.n	8000e22 <LL_TIM_OC_EnablePreload+0x3a>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e18:	d101      	bne.n	8000e1e <LL_TIM_OC_EnablePreload+0x36>
 8000e1a:	2305      	movs	r3, #5
 8000e1c:	e00a      	b.n	8000e34 <LL_TIM_OC_EnablePreload+0x4c>
 8000e1e:	2306      	movs	r3, #6
 8000e20:	e008      	b.n	8000e34 <LL_TIM_OC_EnablePreload+0x4c>
 8000e22:	2304      	movs	r3, #4
 8000e24:	e006      	b.n	8000e34 <LL_TIM_OC_EnablePreload+0x4c>
 8000e26:	2303      	movs	r3, #3
 8000e28:	e004      	b.n	8000e34 <LL_TIM_OC_EnablePreload+0x4c>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e002      	b.n	8000e34 <LL_TIM_OC_EnablePreload+0x4c>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <LL_TIM_OC_EnablePreload+0x4c>
 8000e32:	2300      	movs	r3, #0
 8000e34:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3318      	adds	r3, #24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <LL_TIM_OC_EnablePreload+0x80>)
 8000e40:	5cd3      	ldrb	r3, [r2, r3]
 8000e42:	440b      	add	r3, r1
 8000e44:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <LL_TIM_OC_EnablePreload+0x84>)
 8000e4e:	5ccb      	ldrb	r3, [r1, r3]
 8000e50:	4619      	mov	r1, r3
 8000e52:	2308      	movs	r3, #8
 8000e54:	408b      	lsls	r3, r1
 8000e56:	431a      	orrs	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	080026a4 	.word	0x080026a4
 8000e6c:	080026ac 	.word	0x080026ac

08000e70 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e82:	f023 0307 	bic.w	r3, r3, #7
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	605a      	str	r2, [r3, #4]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	; 0x50
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000ee6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2220      	movs	r2, #32
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 fbbc 	bl	800267c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
 8000f12:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff fef9 	bl	8000d0c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 84;
 8000f1a:	2354      	movs	r3, #84	; 0x54
 8000f1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 128;
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000f2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f34:	f001 f8ee 	bl	8002114 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000f38:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f3c:	f7ff fefe 	bl	8000d3c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8000f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f48:	f7ff ff4e 	bl	8000de8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000f4c:	2360      	movs	r3, #96	; 0x60
 8000f4e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	461a      	mov	r2, r3
 8000f66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f6e:	f001 f96b 	bl	8002248 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8000f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f7a:	f7ff feef 	bl	8000d5c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f84:	f7ff ff89 	bl	8000e9a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000f88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f8c:	f7ff ff98 	bl	8000ec0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f7ff fea3 	bl	8000cdc <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000f96:	2304      	movs	r3, #4
 8000f98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <MX_TIM2_Init+0xe0>)
 8000fb4:	f000 ffc8 	bl	8001f48 <LL_GPIO_Init>

}
 8000fb8:	bf00      	nop
 8000fba:	3750      	adds	r7, #80	; 0x50
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f7ff fe97 	bl	8000d0c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 100;
 8000fde:	2364      	movs	r3, #100	; 0x64
 8000fe0:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8000fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fea:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480a      	ldr	r0, [pc, #40]	; (8001020 <MX_TIM3_Init+0x5c>)
 8000ff6:	f001 f88d 	bl	8002114 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8000ffa:	4809      	ldr	r0, [pc, #36]	; (8001020 <MX_TIM3_Init+0x5c>)
 8000ffc:	f7ff fe9e 	bl	8000d3c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001000:	2100      	movs	r1, #0
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <MX_TIM3_Init+0x5c>)
 8001004:	f7ff ff34 	bl	8000e70 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001008:	2100      	movs	r1, #0
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_TIM3_Init+0x5c>)
 800100c:	f7ff ff45 	bl	8000e9a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <MX_TIM3_Init+0x5c>)
 8001012:	f7ff ff55 	bl	8000ec0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40000400 	.word	0x40000400

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102a:	490e      	ldr	r1, [pc, #56]	; (8001064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104e:	f7ff fe33 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f001 faef 	bl	8002634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fd28 	bl	8000aaa <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800105c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001068:	080026bc 	.word	0x080026bc
  ldr r2, =_sbss
 800106c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001070:	200000bc 	.word	0x200000bc

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <HAL_Init+0x40>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_Init+0x40>)
 800108e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_Init+0x40>)
 800109a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 fb63 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	200f      	movs	r0, #15
 80010a8:	f000 f808 	bl	80010bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f7ff fd6e 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023c00 	.word	0x40023c00

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x54>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x58>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fb6d 	bl	80017ba <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00e      	b.n	8001108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d80a      	bhi.n	8001106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f8:	f000 fb43 	bl	8001782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <HAL_InitTick+0x5c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000000 	.word	0x20000000
 8001114:	20000008 	.word	0x20000008
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x20>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x24>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <HAL_IncTick+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000008 	.word	0x20000008
 8001140:	200000b8 	.word	0x200000b8

08001144 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e033      	b.n	80011c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff f8d4 	bl	8000310 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 0310 	and.w	r3, r3, #16
 800117e:	2b00      	cmp	r3, #0
 8001180:	d118      	bne.n	80011b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800118a:	f023 0302 	bic.w	r3, r3, #2
 800118e:	f043 0202 	orr.w	r2, r3, #2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f93a 	bl	8001410 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f023 0303 	bic.w	r3, r3, #3
 80011aa:	f043 0201 	orr.w	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40
 80011b2:	e001      	b.n	80011b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <HAL_ADC_ConfigChannel+0x1c>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e105      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x228>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b09      	cmp	r3, #9
 80011f6:	d925      	bls.n	8001244 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68d9      	ldr	r1, [r3, #12]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	b29b      	uxth	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	3b1e      	subs	r3, #30
 800120e:	2207      	movs	r2, #7
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43da      	mvns	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	400a      	ands	r2, r1
 800121c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68d9      	ldr	r1, [r3, #12]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	4618      	mov	r0, r3
 8001230:	4603      	mov	r3, r0
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4403      	add	r3, r0
 8001236:	3b1e      	subs	r3, #30
 8001238:	409a      	lsls	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	e022      	b.n	800128a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6919      	ldr	r1, [r3, #16]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	b29b      	uxth	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	2207      	movs	r2, #7
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	400a      	ands	r2, r1
 8001266:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6919      	ldr	r1, [r3, #16]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	b29b      	uxth	r3, r3
 8001278:	4618      	mov	r0, r3
 800127a:	4603      	mov	r3, r0
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4403      	add	r3, r0
 8001280:	409a      	lsls	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b06      	cmp	r3, #6
 8001290:	d824      	bhi.n	80012dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	3b05      	subs	r3, #5
 80012a4:	221f      	movs	r2, #31
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	400a      	ands	r2, r1
 80012b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	3b05      	subs	r3, #5
 80012ce:	fa00 f203 	lsl.w	r2, r0, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
 80012da:	e04c      	b.n	8001376 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b0c      	cmp	r3, #12
 80012e2:	d824      	bhi.n	800132e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	3b23      	subs	r3, #35	; 0x23
 80012f6:	221f      	movs	r2, #31
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43da      	mvns	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	400a      	ands	r2, r1
 8001304:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	b29b      	uxth	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	3b23      	subs	r3, #35	; 0x23
 8001320:	fa00 f203 	lsl.w	r2, r0, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	631a      	str	r2, [r3, #48]	; 0x30
 800132c:	e023      	b.n	8001376 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	3b41      	subs	r3, #65	; 0x41
 8001340:	221f      	movs	r2, #31
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	400a      	ands	r2, r1
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	3b41      	subs	r3, #65	; 0x41
 800136a:	fa00 f203 	lsl.w	r2, r0, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <HAL_ADC_ConfigChannel+0x234>)
 8001378:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a21      	ldr	r2, [pc, #132]	; (8001404 <HAL_ADC_ConfigChannel+0x238>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d109      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x1cc>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b12      	cmp	r3, #18
 800138a:	d105      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_ADC_ConfigChannel+0x238>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d123      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x21e>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b10      	cmp	r3, #16
 80013a8:	d003      	beq.n	80013b2 <HAL_ADC_ConfigChannel+0x1e6>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b11      	cmp	r3, #17
 80013b0:	d11b      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b10      	cmp	r3, #16
 80013c4:	d111      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_ADC_ConfigChannel+0x23c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <HAL_ADC_ConfigChannel+0x240>)
 80013cc:	fba2 2303 	umull	r2, r3, r2, r3
 80013d0:	0c9a      	lsrs	r2, r3, #18
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013dc:	e002      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f9      	bne.n	80013de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40012300 	.word	0x40012300
 8001404:	40012000 	.word	0x40012000
 8001408:	20000000 	.word	0x20000000
 800140c:	431bde83 	.word	0x431bde83

08001410 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001418:	4b79      	ldr	r3, [pc, #484]	; (8001600 <ADC_Init+0x1f0>)
 800141a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	431a      	orrs	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	021a      	lsls	r2, r3, #8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800148a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6899      	ldr	r1, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	4a58      	ldr	r2, [pc, #352]	; (8001604 <ADC_Init+0x1f4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d022      	beq.n	80014ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6899      	ldr	r1, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6899      	ldr	r1, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	e00f      	b.n	800150e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800150c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0202 	bic.w	r2, r2, #2
 800151c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6899      	ldr	r1, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7e1b      	ldrb	r3, [r3, #24]
 8001528:	005a      	lsls	r2, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d01b      	beq.n	8001574 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800154a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800155a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6859      	ldr	r1, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	3b01      	subs	r3, #1
 8001568:	035a      	lsls	r2, r3, #13
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	e007      	b.n	8001584 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001582:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	3b01      	subs	r3, #1
 80015a0:	051a      	lsls	r2, r3, #20
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6899      	ldr	r1, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015c6:	025a      	lsls	r2, r3, #9
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6899      	ldr	r1, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	029a      	lsls	r2, r3, #10
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	609a      	str	r2, [r3, #8]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40012300 	.word	0x40012300
 8001604:	0f000001 	.word	0x0f000001

08001608 <__NVIC_SetPriorityGrouping>:
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_SetPriority>:
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800174c:	f7ff ff8e 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff47 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff5c 	bl	8001650 <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff8e 	bl	80016c0 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5d 	bl	800166c <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffb0 	bl	8001728 <SysTick_Config>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e16b      	b.n	8001ac8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 815a 	bne.w	8001ac2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d005      	beq.n	8001826 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001822:	2b02      	cmp	r3, #2
 8001824:	d130      	bne.n	8001888 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d017      	beq.n	80018c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80b4 	beq.w	8001ac2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b60      	ldr	r3, [pc, #384]	; (8001ae0 <HAL_GPIO_Init+0x30c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a5f      	ldr	r2, [pc, #380]	; (8001ae0 <HAL_GPIO_Init+0x30c>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <HAL_GPIO_Init+0x30c>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001976:	4a5b      	ldr	r2, [pc, #364]	; (8001ae4 <HAL_GPIO_Init+0x310>)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a52      	ldr	r2, [pc, #328]	; (8001ae8 <HAL_GPIO_Init+0x314>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d02b      	beq.n	80019fa <HAL_GPIO_Init+0x226>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a51      	ldr	r2, [pc, #324]	; (8001aec <HAL_GPIO_Init+0x318>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d025      	beq.n	80019f6 <HAL_GPIO_Init+0x222>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a50      	ldr	r2, [pc, #320]	; (8001af0 <HAL_GPIO_Init+0x31c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d01f      	beq.n	80019f2 <HAL_GPIO_Init+0x21e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4f      	ldr	r2, [pc, #316]	; (8001af4 <HAL_GPIO_Init+0x320>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d019      	beq.n	80019ee <HAL_GPIO_Init+0x21a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4e      	ldr	r2, [pc, #312]	; (8001af8 <HAL_GPIO_Init+0x324>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0x216>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4d      	ldr	r2, [pc, #308]	; (8001afc <HAL_GPIO_Init+0x328>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x212>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4c      	ldr	r2, [pc, #304]	; (8001b00 <HAL_GPIO_Init+0x32c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x20e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_GPIO_Init+0x330>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x20a>
 80019da:	2307      	movs	r3, #7
 80019dc:	e00e      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019de:	2308      	movs	r3, #8
 80019e0:	e00c      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019e2:	2306      	movs	r3, #6
 80019e4:	e00a      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019e6:	2305      	movs	r3, #5
 80019e8:	e008      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019ea:	2304      	movs	r3, #4
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019ee:	2303      	movs	r3, #3
 80019f0:	e004      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e002      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019fa:	2300      	movs	r3, #0
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	f002 0203 	and.w	r2, r2, #3
 8001a02:	0092      	lsls	r2, r2, #2
 8001a04:	4093      	lsls	r3, r2
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a0c:	4935      	ldr	r1, [pc, #212]	; (8001ae4 <HAL_GPIO_Init+0x310>)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3e:	4a32      	ldr	r2, [pc, #200]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a44:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a68:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a92:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	2b0f      	cmp	r3, #15
 8001acc:	f67f ae90 	bls.w	80017f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40013800 	.word	0x40013800
 8001ae8:	40020000 	.word	0x40020000
 8001aec:	40020400 	.word	0x40020400
 8001af0:	40020800 	.word	0x40020800
 8001af4:	40020c00 	.word	0x40020c00
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40021400 	.word	0x40021400
 8001b00:	40021800 	.word	0x40021800
 8001b04:	40021c00 	.word	0x40021c00
 8001b08:	40013c00 	.word	0x40013c00

08001b0c <LL_EXTI_EnableIT_0_31>:
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <LL_EXTI_EnableIT_0_31+0x20>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4904      	ldr	r1, [pc, #16]	; (8001b2c <LL_EXTI_EnableIT_0_31+0x20>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40013c00 	.word	0x40013c00

08001b30 <LL_EXTI_DisableIT_0_31>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <LL_EXTI_DisableIT_0_31+0x24>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	4904      	ldr	r1, [pc, #16]	; (8001b54 <LL_EXTI_DisableIT_0_31+0x24>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40013c00 	.word	0x40013c00

08001b58 <LL_EXTI_EnableEvent_0_31>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	4904      	ldr	r1, [pc, #16]	; (8001b78 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40013c00 	.word	0x40013c00

08001b7c <LL_EXTI_DisableEvent_0_31>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	4904      	ldr	r1, [pc, #16]	; (8001ba0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40013c00 	.word	0x40013c00

08001ba4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	4904      	ldr	r1, [pc, #16]	; (8001bc4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40013c00 	.word	0x40013c00

08001bc8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	4904      	ldr	r1, [pc, #16]	; (8001bec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40013c00 	.word	0x40013c00

08001bf0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	4904      	ldr	r1, [pc, #16]	; (8001c10 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	40013c00 	.word	0x40013c00

08001c14 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4904      	ldr	r1, [pc, #16]	; (8001c38 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	60cb      	str	r3, [r1, #12]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40013c00 	.word	0x40013c00

08001c3c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	791b      	ldrb	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d065      	beq.n	8001d1c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d06c      	beq.n	8001d32 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	795b      	ldrb	r3, [r3, #5]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d01c      	beq.n	8001c9a <LL_EXTI_Init+0x5e>
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	dc25      	bgt.n	8001cb0 <LL_EXTI_Init+0x74>
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <LL_EXTI_Init+0x32>
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d00b      	beq.n	8001c84 <LL_EXTI_Init+0x48>
 8001c6c:	e020      	b.n	8001cb0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff82 	bl	8001b7c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff45 	bl	8001b0c <LL_EXTI_EnableIT_0_31>
          break;
 8001c82:	e018      	b.n	8001cb6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff51 	bl	8001b30 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ff60 	bl	8001b58 <LL_EXTI_EnableEvent_0_31>
          break;
 8001c98:	e00d      	b.n	8001cb6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff34 	bl	8001b0c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff55 	bl	8001b58 <LL_EXTI_EnableEvent_0_31>
          break;
 8001cae:	e002      	b.n	8001cb6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
          break;
 8001cb4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	799b      	ldrb	r3, [r3, #6]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d039      	beq.n	8001d32 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	799b      	ldrb	r3, [r3, #6]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d01c      	beq.n	8001d00 <LL_EXTI_Init+0xc4>
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	dc25      	bgt.n	8001d16 <LL_EXTI_Init+0xda>
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d002      	beq.n	8001cd4 <LL_EXTI_Init+0x98>
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d00b      	beq.n	8001cea <LL_EXTI_Init+0xae>
 8001cd2:	e020      	b.n	8001d16 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff9b 	bl	8001c14 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff5e 	bl	8001ba4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001ce8:	e024      	b.n	8001d34 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff6a 	bl	8001bc8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff79 	bl	8001bf0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001cfe:	e019      	b.n	8001d34 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff4d 	bl	8001ba4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff6e 	bl	8001bf0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001d14:	e00e      	b.n	8001d34 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
            break;
 8001d1a:	e00b      	b.n	8001d34 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff05 	bl	8001b30 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff26 	bl	8001b7c <LL_EXTI_DisableEvent_0_31>
 8001d30:	e000      	b.n	8001d34 <LL_EXTI_Init+0xf8>
      }
 8001d32:	bf00      	nop
  }
  return status;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <LL_GPIO_SetPinMode>:
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b089      	sub	sp, #36	; 0x24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	613b      	str	r3, [r7, #16]
  return result;
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2103      	movs	r1, #3
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa93 f3a3 	rbit	r3, r3
 8001d78:	61bb      	str	r3, [r7, #24]
  return result;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	601a      	str	r2, [r3, #0]
}
 8001d90:	bf00      	nop
 8001d92:	3724      	adds	r7, #36	; 0x24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_GPIO_SetPinOutputType>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	401a      	ands	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	605a      	str	r2, [r3, #4]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_GPIO_SetPinSpeed>:
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	613b      	str	r3, [r7, #16]
  return result;
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2103      	movs	r1, #3
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	61bb      	str	r3, [r7, #24]
  return result;
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	609a      	str	r2, [r3, #8]
}
 8001e1e:	bf00      	nop
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <LL_GPIO_SetPinPull>:
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b089      	sub	sp, #36	; 0x24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	613b      	str	r3, [r7, #16]
  return result;
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2103      	movs	r1, #3
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	401a      	ands	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	61bb      	str	r3, [r7, #24]
  return result;
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	431a      	orrs	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	60da      	str	r2, [r3, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3724      	adds	r7, #36	; 0x24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_GPIO_SetAFPin_0_7>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a1a      	ldr	r2, [r3, #32]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	613b      	str	r3, [r7, #16]
  return result;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	210f      	movs	r1, #15
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	61bb      	str	r3, [r7, #24]
  return result;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	621a      	str	r2, [r3, #32]
}
 8001eda:	bf00      	nop
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <LL_GPIO_SetAFPin_8_15>:
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b089      	sub	sp, #36	; 0x24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	613b      	str	r3, [r7, #16]
  return result;
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	210f      	movs	r1, #15
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	401a      	ands	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	61bb      	str	r3, [r7, #24]
  return result;
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	431a      	orrs	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f3c:	bf00      	nop
 8001f3e:	3724      	adds	r7, #36	; 0x24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	613b      	str	r3, [r7, #16]
  return result;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f72:	e050      	b.n	8002016 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2101      	movs	r1, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d042      	beq.n	8002010 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d003      	beq.n	8001f9a <LL_GPIO_Init+0x52>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d10d      	bne.n	8001fb6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	69b9      	ldr	r1, [r7, #24]
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ff12 	bl	8001dcc <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	461a      	mov	r2, r3
 8001fae:	69b9      	ldr	r1, [r7, #24]
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff fef3 	bl	8001d9c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	69b9      	ldr	r1, [r7, #24]
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ff33 	bl	8001e2a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d11a      	bne.n	8002002 <LL_GPIO_Init+0xba>
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	60bb      	str	r3, [r7, #8]
  return result;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b07      	cmp	r3, #7
 8001fe2:	d807      	bhi.n	8001ff4 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	69b9      	ldr	r1, [r7, #24]
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff4b 	bl	8001e88 <LL_GPIO_SetAFPin_0_7>
 8001ff2:	e006      	b.n	8002002 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	69b9      	ldr	r1, [r7, #24]
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff72 	bl	8001ee6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	461a      	mov	r2, r3
 8002008:	69b9      	ldr	r1, [r7, #24]
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff fe97 	bl	8001d3e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	3301      	adds	r3, #1
 8002014:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1a7      	bne.n	8001f74 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3720      	adds	r7, #32
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <LL_TIM_SetPrescaler>:
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_TIM_SetAutoReload>:
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_TIM_SetRepetitionCounter>:
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_TIM_OC_SetCompareCH1>:
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <LL_TIM_OC_SetCompareCH2>:
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <LL_TIM_OC_SetCompareCH3>:
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_TIM_OC_SetCompareCH4>:
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f043 0201 	orr.w	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	615a      	str	r2, [r3, #20]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3d      	ldr	r2, [pc, #244]	; (800221c <LL_TIM_Init+0x108>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d013      	beq.n	8002154 <LL_TIM_Init+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002132:	d00f      	beq.n	8002154 <LL_TIM_Init+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3a      	ldr	r2, [pc, #232]	; (8002220 <LL_TIM_Init+0x10c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00b      	beq.n	8002154 <LL_TIM_Init+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a39      	ldr	r2, [pc, #228]	; (8002224 <LL_TIM_Init+0x110>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <LL_TIM_Init+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a38      	ldr	r2, [pc, #224]	; (8002228 <LL_TIM_Init+0x114>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d003      	beq.n	8002154 <LL_TIM_Init+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a37      	ldr	r2, [pc, #220]	; (800222c <LL_TIM_Init+0x118>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d106      	bne.n	8002162 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2d      	ldr	r2, [pc, #180]	; (800221c <LL_TIM_Init+0x108>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <LL_TIM_Init+0xae>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002170:	d027      	beq.n	80021c2 <LL_TIM_Init+0xae>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2a      	ldr	r2, [pc, #168]	; (8002220 <LL_TIM_Init+0x10c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d023      	beq.n	80021c2 <LL_TIM_Init+0xae>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a29      	ldr	r2, [pc, #164]	; (8002224 <LL_TIM_Init+0x110>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01f      	beq.n	80021c2 <LL_TIM_Init+0xae>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a28      	ldr	r2, [pc, #160]	; (8002228 <LL_TIM_Init+0x114>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01b      	beq.n	80021c2 <LL_TIM_Init+0xae>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a27      	ldr	r2, [pc, #156]	; (800222c <LL_TIM_Init+0x118>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d017      	beq.n	80021c2 <LL_TIM_Init+0xae>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a26      	ldr	r2, [pc, #152]	; (8002230 <LL_TIM_Init+0x11c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <LL_TIM_Init+0xae>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a25      	ldr	r2, [pc, #148]	; (8002234 <LL_TIM_Init+0x120>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00f      	beq.n	80021c2 <LL_TIM_Init+0xae>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a24      	ldr	r2, [pc, #144]	; (8002238 <LL_TIM_Init+0x124>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00b      	beq.n	80021c2 <LL_TIM_Init+0xae>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <LL_TIM_Init+0x128>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d007      	beq.n	80021c2 <LL_TIM_Init+0xae>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a22      	ldr	r2, [pc, #136]	; (8002240 <LL_TIM_Init+0x12c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d003      	beq.n	80021c2 <LL_TIM_Init+0xae>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a21      	ldr	r2, [pc, #132]	; (8002244 <LL_TIM_Init+0x130>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d106      	bne.n	80021d0 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4619      	mov	r1, r3
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff34 	bl	800204a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	4619      	mov	r1, r3
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff20 	bl	800202e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <LL_TIM_Init+0x108>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d003      	beq.n	80021fe <LL_TIM_Init+0xea>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a0c      	ldr	r2, [pc, #48]	; (800222c <LL_TIM_Init+0x118>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d105      	bne.n	800220a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	4619      	mov	r1, r3
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff2e 	bl	8002066 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ff71 	bl	80020f2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40010000 	.word	0x40010000
 8002220:	40000400 	.word	0x40000400
 8002224:	40000800 	.word	0x40000800
 8002228:	40000c00 	.word	0x40000c00
 800222c:	40010400 	.word	0x40010400
 8002230:	40014000 	.word	0x40014000
 8002234:	40014400 	.word	0x40014400
 8002238:	40014800 	.word	0x40014800
 800223c:	40001800 	.word	0x40001800
 8002240:	40001c00 	.word	0x40001c00
 8002244:	40002000 	.word	0x40002000

08002248 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225e:	d027      	beq.n	80022b0 <LL_TIM_OC_Init+0x68>
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002266:	d82a      	bhi.n	80022be <LL_TIM_OC_Init+0x76>
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800226e:	d018      	beq.n	80022a2 <LL_TIM_OC_Init+0x5a>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002276:	d822      	bhi.n	80022be <LL_TIM_OC_Init+0x76>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d003      	beq.n	8002286 <LL_TIM_OC_Init+0x3e>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b10      	cmp	r3, #16
 8002282:	d007      	beq.n	8002294 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002284:	e01b      	b.n	80022be <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f81f 	bl	80022cc <OC1Config>
 800228e:	4603      	mov	r3, r0
 8002290:	75fb      	strb	r3, [r7, #23]
      break;
 8002292:	e015      	b.n	80022c0 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f884 	bl	80023a4 <OC2Config>
 800229c:	4603      	mov	r3, r0
 800229e:	75fb      	strb	r3, [r7, #23]
      break;
 80022a0:	e00e      	b.n	80022c0 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f8ed 	bl	8002484 <OC3Config>
 80022aa:	4603      	mov	r3, r0
 80022ac:	75fb      	strb	r3, [r7, #23]
      break;
 80022ae:	e007      	b.n	80022c0 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f956 	bl	8002564 <OC4Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	75fb      	strb	r3, [r7, #23]
      break;
 80022bc:	e000      	b.n	80022c0 <LL_TIM_OC_Init+0x78>
      break;
 80022be:	bf00      	nop
  }

  return result;
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f023 0201 	bic.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f023 0303 	bic.w	r3, r3, #3
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f023 0202 	bic.w	r2, r3, #2
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f023 0201 	bic.w	r2, r3, #1
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1c      	ldr	r2, [pc, #112]	; (800239c <OC1Config+0xd0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d003      	beq.n	8002336 <OC1Config+0x6a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1b      	ldr	r2, [pc, #108]	; (80023a0 <OC1Config+0xd4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d11e      	bne.n	8002374 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f023 0208 	bic.w	r2, r3, #8
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4313      	orrs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f023 0204 	bic.w	r2, r3, #4
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4619      	mov	r1, r3
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fe7b 	bl	8002082 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40010000 	.word	0x40010000
 80023a0:	40010400 	.word	0x40010400

080023a4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	f023 0210 	bic.w	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f023 0220 	bic.w	r2, r3, #32
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f023 0210 	bic.w	r2, r3, #16
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a1d      	ldr	r2, [pc, #116]	; (800247c <OC2Config+0xd8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d003      	beq.n	8002414 <OC2Config+0x70>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <OC2Config+0xdc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d11f      	bne.n	8002454 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	019b      	lsls	r3, r3, #6
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	019b      	lsls	r3, r3, #6
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fe19 	bl	800209e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40010000 	.word	0x40010000
 8002480:	40010400 	.word	0x40010400

08002484 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f023 0303 	bic.w	r3, r3, #3
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	4313      	orrs	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a1d      	ldr	r2, [pc, #116]	; (800255c <OC3Config+0xd8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d003      	beq.n	80024f2 <OC3Config+0x6e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <OC3Config+0xdc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d11f      	bne.n	8002532 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	029b      	lsls	r3, r3, #10
 80024fe:	4313      	orrs	r3, r2
 8002500:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	029b      	lsls	r3, r3, #10
 800250e:	4313      	orrs	r3, r2
 8002510:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	015b      	lsls	r3, r3, #5
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fdb8 	bl	80020ba <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40010000 	.word	0x40010000
 8002560:	40010400 	.word	0x40010400

08002564 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	031b      	lsls	r3, r3, #12
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	031b      	lsls	r3, r3, #12
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a11      	ldr	r2, [pc, #68]	; (800260c <OC4Config+0xa8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d003      	beq.n	80025d4 <OC4Config+0x70>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a10      	ldr	r2, [pc, #64]	; (8002610 <OC4Config+0xac>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d107      	bne.n	80025e4 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	019b      	lsls	r3, r3, #6
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4619      	mov	r1, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fd6d 	bl	80020d6 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40010000 	.word	0x40010000
 8002610:	40010400 	.word	0x40010400

08002614 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <LL_SetSystemCoreClock+0x1c>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000000 	.word	0x20000000

08002634 <__libc_init_array>:
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	4d0d      	ldr	r5, [pc, #52]	; (800266c <__libc_init_array+0x38>)
 8002638:	4c0d      	ldr	r4, [pc, #52]	; (8002670 <__libc_init_array+0x3c>)
 800263a:	1b64      	subs	r4, r4, r5
 800263c:	10a4      	asrs	r4, r4, #2
 800263e:	2600      	movs	r6, #0
 8002640:	42a6      	cmp	r6, r4
 8002642:	d109      	bne.n	8002658 <__libc_init_array+0x24>
 8002644:	4d0b      	ldr	r5, [pc, #44]	; (8002674 <__libc_init_array+0x40>)
 8002646:	4c0c      	ldr	r4, [pc, #48]	; (8002678 <__libc_init_array+0x44>)
 8002648:	f000 f820 	bl	800268c <_init>
 800264c:	1b64      	subs	r4, r4, r5
 800264e:	10a4      	asrs	r4, r4, #2
 8002650:	2600      	movs	r6, #0
 8002652:	42a6      	cmp	r6, r4
 8002654:	d105      	bne.n	8002662 <__libc_init_array+0x2e>
 8002656:	bd70      	pop	{r4, r5, r6, pc}
 8002658:	f855 3b04 	ldr.w	r3, [r5], #4
 800265c:	4798      	blx	r3
 800265e:	3601      	adds	r6, #1
 8002660:	e7ee      	b.n	8002640 <__libc_init_array+0xc>
 8002662:	f855 3b04 	ldr.w	r3, [r5], #4
 8002666:	4798      	blx	r3
 8002668:	3601      	adds	r6, #1
 800266a:	e7f2      	b.n	8002652 <__libc_init_array+0x1e>
 800266c:	080026b4 	.word	0x080026b4
 8002670:	080026b4 	.word	0x080026b4
 8002674:	080026b4 	.word	0x080026b4
 8002678:	080026b8 	.word	0x080026b8

0800267c <memset>:
 800267c:	4402      	add	r2, r0
 800267e:	4603      	mov	r3, r0
 8002680:	4293      	cmp	r3, r2
 8002682:	d100      	bne.n	8002686 <memset+0xa>
 8002684:	4770      	bx	lr
 8002686:	f803 1b01 	strb.w	r1, [r3], #1
 800268a:	e7f9      	b.n	8002680 <memset+0x4>

0800268c <_init>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	bf00      	nop
 8002690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002692:	bc08      	pop	{r3}
 8002694:	469e      	mov	lr, r3
 8002696:	4770      	bx	lr

08002698 <_fini>:
 8002698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269a:	bf00      	nop
 800269c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269e:	bc08      	pop	{r3}
 80026a0:	469e      	mov	lr, r3
 80026a2:	4770      	bx	lr
